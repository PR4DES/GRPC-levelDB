// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/proto/grpc/channelz/channelz.proto

#include "src/proto/grpc/channelz/channelz.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fprotobuf_2fany_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fany_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Any;
}  // namespace protobuf_google_2fprotobuf_2fany_2eproto
namespace protobuf_google_2fprotobuf_2fduration_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fduration_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Duration;
}  // namespace protobuf_google_2fprotobuf_2fduration_2eproto
namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp;
}  // namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto
namespace protobuf_google_2fprotobuf_2fwrappers_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fwrappers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Int64Value;
}  // namespace protobuf_google_2fprotobuf_2fwrappers_2eproto
namespace protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Address_TcpIpAddress;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Address_UdsAddress;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ChannelConnectivityState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ChannelRef;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Security_Tls;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ServerRef;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SocketRef;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SubchannelRef;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Address_OtherAddress;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Security_OtherSecurity;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SocketOption;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ChannelTrace;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Security;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ServerData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Address;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_ChannelData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_ChannelTraceEvent;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Server;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_SocketData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_Channel;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_Socket;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_Subchannel;
}  // namespace protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto
namespace grpc {
namespace channelz {
namespace v1 {
class ChannelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Channel>
      _instance;
} _Channel_default_instance_;
class SubchannelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Subchannel>
      _instance;
} _Subchannel_default_instance_;
class ChannelConnectivityStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChannelConnectivityState>
      _instance;
} _ChannelConnectivityState_default_instance_;
class ChannelDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChannelData>
      _instance;
} _ChannelData_default_instance_;
class ChannelTraceEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChannelTraceEvent>
      _instance;
  const ::grpc::channelz::v1::ChannelRef* channel_ref_;
  const ::grpc::channelz::v1::SubchannelRef* subchannel_ref_;
} _ChannelTraceEvent_default_instance_;
class ChannelTraceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChannelTrace>
      _instance;
} _ChannelTrace_default_instance_;
class ChannelRefDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChannelRef>
      _instance;
} _ChannelRef_default_instance_;
class SubchannelRefDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubchannelRef>
      _instance;
} _SubchannelRef_default_instance_;
class SocketRefDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SocketRef>
      _instance;
} _SocketRef_default_instance_;
class ServerRefDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerRef>
      _instance;
} _ServerRef_default_instance_;
class ServerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Server>
      _instance;
} _Server_default_instance_;
class ServerDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerData>
      _instance;
} _ServerData_default_instance_;
class SocketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Socket>
      _instance;
} _Socket_default_instance_;
class SocketDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SocketData>
      _instance;
} _SocketData_default_instance_;
class Address_TcpIpAddressDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Address_TcpIpAddress>
      _instance;
} _Address_TcpIpAddress_default_instance_;
class Address_UdsAddressDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Address_UdsAddress>
      _instance;
} _Address_UdsAddress_default_instance_;
class Address_OtherAddressDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Address_OtherAddress>
      _instance;
} _Address_OtherAddress_default_instance_;
class AddressDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Address>
      _instance;
  const ::grpc::channelz::v1::Address_TcpIpAddress* tcpip_address_;
  const ::grpc::channelz::v1::Address_UdsAddress* uds_address_;
  const ::grpc::channelz::v1::Address_OtherAddress* other_address_;
} _Address_default_instance_;
class Security_TlsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Security_Tls>
      _instance;
  ::google::protobuf::internal::ArenaStringPtr standard_name_;
  ::google::protobuf::internal::ArenaStringPtr other_name_;
} _Security_Tls_default_instance_;
class Security_OtherSecurityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Security_OtherSecurity>
      _instance;
} _Security_OtherSecurity_default_instance_;
class SecurityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Security>
      _instance;
  const ::grpc::channelz::v1::Security_Tls* tls_;
  const ::grpc::channelz::v1::Security_OtherSecurity* other_;
} _Security_default_instance_;
class SocketOptionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SocketOption>
      _instance;
} _SocketOption_default_instance_;
class SocketOptionTimeoutDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SocketOptionTimeout>
      _instance;
} _SocketOptionTimeout_default_instance_;
class SocketOptionLingerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SocketOptionLinger>
      _instance;
} _SocketOptionLinger_default_instance_;
class SocketOptionTcpInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SocketOptionTcpInfo>
      _instance;
} _SocketOptionTcpInfo_default_instance_;
class GetTopChannelsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetTopChannelsRequest>
      _instance;
} _GetTopChannelsRequest_default_instance_;
class GetTopChannelsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetTopChannelsResponse>
      _instance;
} _GetTopChannelsResponse_default_instance_;
class GetServersRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetServersRequest>
      _instance;
} _GetServersRequest_default_instance_;
class GetServersResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetServersResponse>
      _instance;
} _GetServersResponse_default_instance_;
class GetServerSocketsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetServerSocketsRequest>
      _instance;
} _GetServerSocketsRequest_default_instance_;
class GetServerSocketsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetServerSocketsResponse>
      _instance;
} _GetServerSocketsResponse_default_instance_;
class GetChannelRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetChannelRequest>
      _instance;
} _GetChannelRequest_default_instance_;
class GetChannelResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetChannelResponse>
      _instance;
} _GetChannelResponse_default_instance_;
class GetSubchannelRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetSubchannelRequest>
      _instance;
} _GetSubchannelRequest_default_instance_;
class GetSubchannelResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetSubchannelResponse>
      _instance;
} _GetSubchannelResponse_default_instance_;
class GetSocketRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetSocketRequest>
      _instance;
} _GetSocketRequest_default_instance_;
class GetSocketResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetSocketResponse>
      _instance;
} _GetSocketResponse_default_instance_;
}  // namespace v1
}  // namespace channelz
}  // namespace grpc
namespace protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto {
static void InitDefaultsChannel() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::channelz::v1::_Channel_default_instance_;
    new (ptr) ::grpc::channelz::v1::Channel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc::channelz::v1::Channel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_Channel =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsChannel}, {
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_ChannelRef.base,
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_ChannelData.base,
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_SubchannelRef.base,
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_SocketRef.base,}};

static void InitDefaultsSubchannel() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::channelz::v1::_Subchannel_default_instance_;
    new (ptr) ::grpc::channelz::v1::Subchannel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc::channelz::v1::Subchannel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_Subchannel =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsSubchannel}, {
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_SubchannelRef.base,
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_ChannelData.base,
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_ChannelRef.base,
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_SocketRef.base,}};

static void InitDefaultsChannelConnectivityState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::channelz::v1::_ChannelConnectivityState_default_instance_;
    new (ptr) ::grpc::channelz::v1::ChannelConnectivityState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc::channelz::v1::ChannelConnectivityState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ChannelConnectivityState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChannelConnectivityState}, {}};

static void InitDefaultsChannelData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::channelz::v1::_ChannelData_default_instance_;
    new (ptr) ::grpc::channelz::v1::ChannelData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc::channelz::v1::ChannelData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_ChannelData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsChannelData}, {
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_ChannelConnectivityState.base,
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_ChannelTrace.base,
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsChannelTraceEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::channelz::v1::_ChannelTraceEvent_default_instance_;
    new (ptr) ::grpc::channelz::v1::ChannelTraceEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc::channelz::v1::ChannelTraceEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_ChannelTraceEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsChannelTraceEvent}, {
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_ChannelRef.base,
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_SubchannelRef.base,}};

static void InitDefaultsChannelTrace() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::channelz::v1::_ChannelTrace_default_instance_;
    new (ptr) ::grpc::channelz::v1::ChannelTrace();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc::channelz::v1::ChannelTrace::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ChannelTrace =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsChannelTrace}, {
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_ChannelTraceEvent.base,}};

static void InitDefaultsChannelRef() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::channelz::v1::_ChannelRef_default_instance_;
    new (ptr) ::grpc::channelz::v1::ChannelRef();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc::channelz::v1::ChannelRef::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ChannelRef =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChannelRef}, {}};

static void InitDefaultsSubchannelRef() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::channelz::v1::_SubchannelRef_default_instance_;
    new (ptr) ::grpc::channelz::v1::SubchannelRef();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc::channelz::v1::SubchannelRef::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SubchannelRef =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSubchannelRef}, {}};

static void InitDefaultsSocketRef() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::channelz::v1::_SocketRef_default_instance_;
    new (ptr) ::grpc::channelz::v1::SocketRef();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc::channelz::v1::SocketRef::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SocketRef =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSocketRef}, {}};

static void InitDefaultsServerRef() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::channelz::v1::_ServerRef_default_instance_;
    new (ptr) ::grpc::channelz::v1::ServerRef();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc::channelz::v1::ServerRef::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ServerRef =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsServerRef}, {}};

static void InitDefaultsServer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::channelz::v1::_Server_default_instance_;
    new (ptr) ::grpc::channelz::v1::Server();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc::channelz::v1::Server::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Server =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsServer}, {
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_ServerRef.base,
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_ServerData.base,
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_SocketRef.base,}};

static void InitDefaultsServerData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::channelz::v1::_ServerData_default_instance_;
    new (ptr) ::grpc::channelz::v1::ServerData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc::channelz::v1::ServerData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ServerData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsServerData}, {
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_ChannelTrace.base,
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsSocket() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::channelz::v1::_Socket_default_instance_;
    new (ptr) ::grpc::channelz::v1::Socket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc::channelz::v1::Socket::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_Socket =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsSocket}, {
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_SocketRef.base,
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_SocketData.base,
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_Address.base,
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_Security.base,}};

static void InitDefaultsSocketData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::channelz::v1::_SocketData_default_instance_;
    new (ptr) ::grpc::channelz::v1::SocketData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc::channelz::v1::SocketData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_SocketData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsSocketData}, {
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int64Value.base,
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_SocketOption.base,}};

static void InitDefaultsAddress_TcpIpAddress() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::channelz::v1::_Address_TcpIpAddress_default_instance_;
    new (ptr) ::grpc::channelz::v1::Address_TcpIpAddress();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc::channelz::v1::Address_TcpIpAddress::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Address_TcpIpAddress =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAddress_TcpIpAddress}, {}};

static void InitDefaultsAddress_UdsAddress() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::channelz::v1::_Address_UdsAddress_default_instance_;
    new (ptr) ::grpc::channelz::v1::Address_UdsAddress();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc::channelz::v1::Address_UdsAddress::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Address_UdsAddress =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAddress_UdsAddress}, {}};

static void InitDefaultsAddress_OtherAddress() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::channelz::v1::_Address_OtherAddress_default_instance_;
    new (ptr) ::grpc::channelz::v1::Address_OtherAddress();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc::channelz::v1::Address_OtherAddress::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Address_OtherAddress =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAddress_OtherAddress}, {
      &protobuf_google_2fprotobuf_2fany_2eproto::scc_info_Any.base,}};

static void InitDefaultsAddress() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::channelz::v1::_Address_default_instance_;
    new (ptr) ::grpc::channelz::v1::Address();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc::channelz::v1::Address::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Address =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsAddress}, {
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_Address_TcpIpAddress.base,
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_Address_UdsAddress.base,
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_Address_OtherAddress.base,}};

static void InitDefaultsSecurity_Tls() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::channelz::v1::_Security_Tls_default_instance_;
    new (ptr) ::grpc::channelz::v1::Security_Tls();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc::channelz::v1::Security_Tls::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Security_Tls =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSecurity_Tls}, {}};

static void InitDefaultsSecurity_OtherSecurity() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::channelz::v1::_Security_OtherSecurity_default_instance_;
    new (ptr) ::grpc::channelz::v1::Security_OtherSecurity();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc::channelz::v1::Security_OtherSecurity::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Security_OtherSecurity =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSecurity_OtherSecurity}, {
      &protobuf_google_2fprotobuf_2fany_2eproto::scc_info_Any.base,}};

static void InitDefaultsSecurity() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::channelz::v1::_Security_default_instance_;
    new (ptr) ::grpc::channelz::v1::Security();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc::channelz::v1::Security::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Security =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSecurity}, {
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_Security_Tls.base,
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_Security_OtherSecurity.base,}};

static void InitDefaultsSocketOption() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::channelz::v1::_SocketOption_default_instance_;
    new (ptr) ::grpc::channelz::v1::SocketOption();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc::channelz::v1::SocketOption::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SocketOption =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSocketOption}, {
      &protobuf_google_2fprotobuf_2fany_2eproto::scc_info_Any.base,}};

static void InitDefaultsSocketOptionTimeout() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::channelz::v1::_SocketOptionTimeout_default_instance_;
    new (ptr) ::grpc::channelz::v1::SocketOptionTimeout();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc::channelz::v1::SocketOptionTimeout::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SocketOptionTimeout =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSocketOptionTimeout}, {
      &protobuf_google_2fprotobuf_2fduration_2eproto::scc_info_Duration.base,}};

static void InitDefaultsSocketOptionLinger() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::channelz::v1::_SocketOptionLinger_default_instance_;
    new (ptr) ::grpc::channelz::v1::SocketOptionLinger();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc::channelz::v1::SocketOptionLinger::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SocketOptionLinger =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSocketOptionLinger}, {
      &protobuf_google_2fprotobuf_2fduration_2eproto::scc_info_Duration.base,}};

static void InitDefaultsSocketOptionTcpInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::channelz::v1::_SocketOptionTcpInfo_default_instance_;
    new (ptr) ::grpc::channelz::v1::SocketOptionTcpInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc::channelz::v1::SocketOptionTcpInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SocketOptionTcpInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSocketOptionTcpInfo}, {}};

static void InitDefaultsGetTopChannelsRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::channelz::v1::_GetTopChannelsRequest_default_instance_;
    new (ptr) ::grpc::channelz::v1::GetTopChannelsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc::channelz::v1::GetTopChannelsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetTopChannelsRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetTopChannelsRequest}, {}};

static void InitDefaultsGetTopChannelsResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::channelz::v1::_GetTopChannelsResponse_default_instance_;
    new (ptr) ::grpc::channelz::v1::GetTopChannelsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc::channelz::v1::GetTopChannelsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetTopChannelsResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetTopChannelsResponse}, {
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_Channel.base,}};

static void InitDefaultsGetServersRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::channelz::v1::_GetServersRequest_default_instance_;
    new (ptr) ::grpc::channelz::v1::GetServersRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc::channelz::v1::GetServersRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetServersRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetServersRequest}, {}};

static void InitDefaultsGetServersResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::channelz::v1::_GetServersResponse_default_instance_;
    new (ptr) ::grpc::channelz::v1::GetServersResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc::channelz::v1::GetServersResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetServersResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetServersResponse}, {
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_Server.base,}};

static void InitDefaultsGetServerSocketsRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::channelz::v1::_GetServerSocketsRequest_default_instance_;
    new (ptr) ::grpc::channelz::v1::GetServerSocketsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc::channelz::v1::GetServerSocketsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetServerSocketsRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetServerSocketsRequest}, {}};

static void InitDefaultsGetServerSocketsResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::channelz::v1::_GetServerSocketsResponse_default_instance_;
    new (ptr) ::grpc::channelz::v1::GetServerSocketsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc::channelz::v1::GetServerSocketsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetServerSocketsResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetServerSocketsResponse}, {
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_SocketRef.base,}};

static void InitDefaultsGetChannelRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::channelz::v1::_GetChannelRequest_default_instance_;
    new (ptr) ::grpc::channelz::v1::GetChannelRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc::channelz::v1::GetChannelRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetChannelRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetChannelRequest}, {}};

static void InitDefaultsGetChannelResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::channelz::v1::_GetChannelResponse_default_instance_;
    new (ptr) ::grpc::channelz::v1::GetChannelResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc::channelz::v1::GetChannelResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetChannelResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetChannelResponse}, {
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_Channel.base,}};

static void InitDefaultsGetSubchannelRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::channelz::v1::_GetSubchannelRequest_default_instance_;
    new (ptr) ::grpc::channelz::v1::GetSubchannelRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc::channelz::v1::GetSubchannelRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetSubchannelRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetSubchannelRequest}, {}};

static void InitDefaultsGetSubchannelResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::channelz::v1::_GetSubchannelResponse_default_instance_;
    new (ptr) ::grpc::channelz::v1::GetSubchannelResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc::channelz::v1::GetSubchannelResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetSubchannelResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetSubchannelResponse}, {
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_Subchannel.base,}};

static void InitDefaultsGetSocketRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::channelz::v1::_GetSocketRequest_default_instance_;
    new (ptr) ::grpc::channelz::v1::GetSocketRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc::channelz::v1::GetSocketRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetSocketRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetSocketRequest}, {}};

static void InitDefaultsGetSocketResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::channelz::v1::_GetSocketResponse_default_instance_;
    new (ptr) ::grpc::channelz::v1::GetSocketResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc::channelz::v1::GetSocketResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetSocketResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetSocketResponse}, {
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_Socket.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Channel.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Subchannel.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChannelConnectivityState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChannelData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChannelTraceEvent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChannelTrace.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChannelRef.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SubchannelRef.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SocketRef.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServerRef.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Server.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServerData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Socket.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SocketData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Address_TcpIpAddress.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Address_UdsAddress.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Address_OtherAddress.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Address.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Security_Tls.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Security_OtherSecurity.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Security.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SocketOption.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SocketOptionTimeout.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SocketOptionLinger.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SocketOptionTcpInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetTopChannelsRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetTopChannelsResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetServersRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetServersResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetServerSocketsRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetServerSocketsResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetChannelRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetChannelResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetSubchannelRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetSubchannelResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetSocketRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetSocketResponse.base);
}

::google::protobuf::Metadata file_level_metadata[37];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::Channel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::Channel, ref_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::Channel, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::Channel, channel_ref_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::Channel, subchannel_ref_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::Channel, socket_ref_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::Subchannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::Subchannel, ref_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::Subchannel, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::Subchannel, channel_ref_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::Subchannel, subchannel_ref_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::Subchannel, socket_ref_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::ChannelConnectivityState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::ChannelConnectivityState, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::ChannelData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::ChannelData, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::ChannelData, target_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::ChannelData, trace_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::ChannelData, calls_started_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::ChannelData, calls_succeeded_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::ChannelData, calls_failed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::ChannelData, last_call_started_timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::ChannelTraceEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::ChannelTraceEvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::ChannelTraceEvent, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::ChannelTraceEvent, severity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::ChannelTraceEvent, timestamp_),
  offsetof(::grpc::channelz::v1::ChannelTraceEventDefaultTypeInternal, channel_ref_),
  offsetof(::grpc::channelz::v1::ChannelTraceEventDefaultTypeInternal, subchannel_ref_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::ChannelTraceEvent, child_ref_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::ChannelTrace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::ChannelTrace, num_events_logged_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::ChannelTrace, creation_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::ChannelTrace, events_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::ChannelRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::ChannelRef, channel_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::ChannelRef, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SubchannelRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SubchannelRef, subchannel_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SubchannelRef, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketRef, socket_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketRef, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::ServerRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::ServerRef, server_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::ServerRef, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::Server, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::Server, ref_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::Server, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::Server, listen_socket_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::ServerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::ServerData, trace_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::ServerData, calls_started_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::ServerData, calls_succeeded_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::ServerData, calls_failed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::ServerData, last_call_started_timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::Socket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::Socket, ref_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::Socket, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::Socket, local_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::Socket, remote_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::Socket, security_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::Socket, remote_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketData, streams_started_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketData, streams_succeeded_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketData, streams_failed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketData, messages_sent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketData, messages_received_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketData, keep_alives_sent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketData, last_local_stream_created_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketData, last_remote_stream_created_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketData, last_message_sent_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketData, last_message_received_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketData, local_flow_control_window_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketData, remote_flow_control_window_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketData, option_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::Address_TcpIpAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::Address_TcpIpAddress, ip_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::Address_TcpIpAddress, port_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::Address_UdsAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::Address_UdsAddress, filename_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::Address_OtherAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::Address_OtherAddress, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::Address_OtherAddress, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::Address, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::Address, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::grpc::channelz::v1::AddressDefaultTypeInternal, tcpip_address_),
  offsetof(::grpc::channelz::v1::AddressDefaultTypeInternal, uds_address_),
  offsetof(::grpc::channelz::v1::AddressDefaultTypeInternal, other_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::Address, address_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::Security_Tls, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::Security_Tls, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::grpc::channelz::v1::Security_TlsDefaultTypeInternal, standard_name_),
  offsetof(::grpc::channelz::v1::Security_TlsDefaultTypeInternal, other_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::Security_Tls, local_certificate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::Security_Tls, remote_certificate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::Security_Tls, cipher_suite_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::Security_OtherSecurity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::Security_OtherSecurity, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::Security_OtherSecurity, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::Security, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::Security, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::grpc::channelz::v1::SecurityDefaultTypeInternal, tls_),
  offsetof(::grpc::channelz::v1::SecurityDefaultTypeInternal, other_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::Security, model_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketOption, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketOption, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketOption, additional_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTimeout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTimeout, duration_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionLinger, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionLinger, active_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionLinger, duration_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_ca_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_retransmits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_probes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_backoff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_snd_wscale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_rcv_wscale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_rto_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_ato_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_snd_mss_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_rcv_mss_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_unacked_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_sacked_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_lost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_retrans_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_fackets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_last_data_sent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_last_ack_sent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_last_data_recv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_last_ack_recv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_pmtu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_rcv_ssthresh_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_rtt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_rttvar_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_snd_ssthresh_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_snd_cwnd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_advmss_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_reordering_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::GetTopChannelsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::GetTopChannelsRequest, start_channel_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::GetTopChannelsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::GetTopChannelsResponse, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::GetTopChannelsResponse, end_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::GetServersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::GetServersRequest, start_server_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::GetServersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::GetServersResponse, server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::GetServersResponse, end_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::GetServerSocketsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::GetServerSocketsRequest, server_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::GetServerSocketsRequest, start_socket_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::GetServerSocketsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::GetServerSocketsResponse, socket_ref_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::GetServerSocketsResponse, end_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::GetChannelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::GetChannelRequest, channel_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::GetChannelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::GetChannelResponse, channel_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::GetSubchannelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::GetSubchannelRequest, subchannel_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::GetSubchannelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::GetSubchannelResponse, subchannel_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::GetSocketRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::GetSocketRequest, socket_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::GetSocketResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpc::channelz::v1::GetSocketResponse, socket_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::grpc::channelz::v1::Channel)},
  { 10, -1, sizeof(::grpc::channelz::v1::Subchannel)},
  { 20, -1, sizeof(::grpc::channelz::v1::ChannelConnectivityState)},
  { 26, -1, sizeof(::grpc::channelz::v1::ChannelData)},
  { 38, -1, sizeof(::grpc::channelz::v1::ChannelTraceEvent)},
  { 49, -1, sizeof(::grpc::channelz::v1::ChannelTrace)},
  { 57, -1, sizeof(::grpc::channelz::v1::ChannelRef)},
  { 64, -1, sizeof(::grpc::channelz::v1::SubchannelRef)},
  { 71, -1, sizeof(::grpc::channelz::v1::SocketRef)},
  { 78, -1, sizeof(::grpc::channelz::v1::ServerRef)},
  { 85, -1, sizeof(::grpc::channelz::v1::Server)},
  { 93, -1, sizeof(::grpc::channelz::v1::ServerData)},
  { 103, -1, sizeof(::grpc::channelz::v1::Socket)},
  { 114, -1, sizeof(::grpc::channelz::v1::SocketData)},
  { 132, -1, sizeof(::grpc::channelz::v1::Address_TcpIpAddress)},
  { 139, -1, sizeof(::grpc::channelz::v1::Address_UdsAddress)},
  { 145, -1, sizeof(::grpc::channelz::v1::Address_OtherAddress)},
  { 152, -1, sizeof(::grpc::channelz::v1::Address)},
  { 161, -1, sizeof(::grpc::channelz::v1::Security_Tls)},
  { 171, -1, sizeof(::grpc::channelz::v1::Security_OtherSecurity)},
  { 178, -1, sizeof(::grpc::channelz::v1::Security)},
  { 186, -1, sizeof(::grpc::channelz::v1::SocketOption)},
  { 194, -1, sizeof(::grpc::channelz::v1::SocketOptionTimeout)},
  { 200, -1, sizeof(::grpc::channelz::v1::SocketOptionLinger)},
  { 207, -1, sizeof(::grpc::channelz::v1::SocketOptionTcpInfo)},
  { 241, -1, sizeof(::grpc::channelz::v1::GetTopChannelsRequest)},
  { 247, -1, sizeof(::grpc::channelz::v1::GetTopChannelsResponse)},
  { 254, -1, sizeof(::grpc::channelz::v1::GetServersRequest)},
  { 260, -1, sizeof(::grpc::channelz::v1::GetServersResponse)},
  { 267, -1, sizeof(::grpc::channelz::v1::GetServerSocketsRequest)},
  { 274, -1, sizeof(::grpc::channelz::v1::GetServerSocketsResponse)},
  { 281, -1, sizeof(::grpc::channelz::v1::GetChannelRequest)},
  { 287, -1, sizeof(::grpc::channelz::v1::GetChannelResponse)},
  { 293, -1, sizeof(::grpc::channelz::v1::GetSubchannelRequest)},
  { 299, -1, sizeof(::grpc::channelz::v1::GetSubchannelResponse)},
  { 305, -1, sizeof(::grpc::channelz::v1::GetSocketRequest)},
  { 311, -1, sizeof(::grpc::channelz::v1::GetSocketResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::grpc::channelz::v1::_Channel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::grpc::channelz::v1::_Subchannel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::grpc::channelz::v1::_ChannelConnectivityState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::grpc::channelz::v1::_ChannelData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::grpc::channelz::v1::_ChannelTraceEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::grpc::channelz::v1::_ChannelTrace_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::grpc::channelz::v1::_ChannelRef_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::grpc::channelz::v1::_SubchannelRef_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::grpc::channelz::v1::_SocketRef_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::grpc::channelz::v1::_ServerRef_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::grpc::channelz::v1::_Server_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::grpc::channelz::v1::_ServerData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::grpc::channelz::v1::_Socket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::grpc::channelz::v1::_SocketData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::grpc::channelz::v1::_Address_TcpIpAddress_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::grpc::channelz::v1::_Address_UdsAddress_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::grpc::channelz::v1::_Address_OtherAddress_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::grpc::channelz::v1::_Address_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::grpc::channelz::v1::_Security_Tls_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::grpc::channelz::v1::_Security_OtherSecurity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::grpc::channelz::v1::_Security_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::grpc::channelz::v1::_SocketOption_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::grpc::channelz::v1::_SocketOptionTimeout_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::grpc::channelz::v1::_SocketOptionLinger_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::grpc::channelz::v1::_SocketOptionTcpInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::grpc::channelz::v1::_GetTopChannelsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::grpc::channelz::v1::_GetTopChannelsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::grpc::channelz::v1::_GetServersRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::grpc::channelz::v1::_GetServersResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::grpc::channelz::v1::_GetServerSocketsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::grpc::channelz::v1::_GetServerSocketsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::grpc::channelz::v1::_GetChannelRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::grpc::channelz::v1::_GetChannelResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::grpc::channelz::v1::_GetSubchannelRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::grpc::channelz::v1::_GetSubchannelResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::grpc::channelz::v1::_GetSocketRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::grpc::channelz::v1::_GetSocketResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "src/proto/grpc/channelz/channelz.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 37);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n&src/proto/grpc/channelz/channelz.proto"
      "\022\020grpc.channelz.v1\032\031google/protobuf/any."
      "proto\032\036google/protobuf/duration.proto\032\037g"
      "oogle/protobuf/timestamp.proto\032\036google/p"
      "rotobuf/wrappers.proto\"\376\001\n\007Channel\022)\n\003re"
      "f\030\001 \001(\0132\034.grpc.channelz.v1.ChannelRef\022+\n"
      "\004data\030\002 \001(\0132\035.grpc.channelz.v1.ChannelDa"
      "ta\0221\n\013channel_ref\030\003 \003(\0132\034.grpc.channelz."
      "v1.ChannelRef\0227\n\016subchannel_ref\030\004 \003(\0132\037."
      "grpc.channelz.v1.SubchannelRef\022/\n\nsocket"
      "_ref\030\005 \003(\0132\033.grpc.channelz.v1.SocketRef\""
      "\204\002\n\nSubchannel\022,\n\003ref\030\001 \001(\0132\037.grpc.chann"
      "elz.v1.SubchannelRef\022+\n\004data\030\002 \001(\0132\035.grp"
      "c.channelz.v1.ChannelData\0221\n\013channel_ref"
      "\030\003 \003(\0132\034.grpc.channelz.v1.ChannelRef\0227\n\016"
      "subchannel_ref\030\004 \003(\0132\037.grpc.channelz.v1."
      "SubchannelRef\022/\n\nsocket_ref\030\005 \003(\0132\033.grpc"
      ".channelz.v1.SocketRef\"\273\001\n\030ChannelConnec"
      "tivityState\022\?\n\005state\030\001 \001(\01620.grpc.channe"
      "lz.v1.ChannelConnectivityState.State\"^\n\005"
      "State\022\013\n\007UNKNOWN\020\000\022\010\n\004IDLE\020\001\022\016\n\nCONNECTI"
      "NG\020\002\022\t\n\005READY\020\003\022\025\n\021TRANSIENT_FAILURE\020\004\022\014"
      "\n\010SHUTDOWN\020\005\"\216\002\n\013ChannelData\0229\n\005state\030\001 "
      "\001(\0132*.grpc.channelz.v1.ChannelConnectivi"
      "tyState\022\016\n\006target\030\002 \001(\t\022-\n\005trace\030\003 \001(\0132\036"
      ".grpc.channelz.v1.ChannelTrace\022\025\n\rcalls_"
      "started\030\004 \001(\003\022\027\n\017calls_succeeded\030\005 \001(\003\022\024"
      "\n\014calls_failed\030\006 \001(\003\022\?\n\033last_call_starte"
      "d_timestamp\030\007 \001(\0132\032.google.protobuf.Time"
      "stamp\"\333\002\n\021ChannelTraceEvent\022\023\n\013descripti"
      "on\030\001 \001(\t\022>\n\010severity\030\002 \001(\0162,.grpc.channe"
      "lz.v1.ChannelTraceEvent.Severity\022-\n\ttime"
      "stamp\030\003 \001(\0132\032.google.protobuf.Timestamp\022"
      "3\n\013channel_ref\030\004 \001(\0132\034.grpc.channelz.v1."
      "ChannelRefH\000\0229\n\016subchannel_ref\030\005 \001(\0132\037.g"
      "rpc.channelz.v1.SubchannelRefH\000\"E\n\010Sever"
      "ity\022\016\n\nCT_UNKNOWN\020\000\022\013\n\007CT_INFO\020\001\022\016\n\nCT_W"
      "ARNING\020\002\022\014\n\010CT_ERROR\020\003B\013\n\tchild_ref\"\226\001\n\014"
      "ChannelTrace\022\031\n\021num_events_logged\030\001 \001(\003\022"
      "6\n\022creation_timestamp\030\002 \001(\0132\032.google.pro"
      "tobuf.Timestamp\0223\n\006events\030\003 \003(\0132#.grpc.c"
      "hannelz.v1.ChannelTraceEvent\"R\n\nChannelR"
      "ef\022\022\n\nchannel_id\030\001 \001(\003\022\014\n\004name\030\002 \001(\tJ\004\010\003"
      "\020\004J\004\010\004\020\005J\004\010\005\020\006J\004\010\006\020\007J\004\010\007\020\010J\004\010\010\020\t\"X\n\rSubc"
      "hannelRef\022\025\n\rsubchannel_id\030\007 \001(\003\022\014\n\004name"
      "\030\010 \001(\tJ\004\010\001\020\002J\004\010\002\020\003J\004\010\003\020\004J\004\010\004\020\005J\004\010\005\020\006J\004\010\006"
      "\020\007\"P\n\tSocketRef\022\021\n\tsocket_id\030\003 \001(\003\022\014\n\004na"
      "me\030\004 \001(\tJ\004\010\001\020\002J\004\010\002\020\003J\004\010\005\020\006J\004\010\006\020\007J\004\010\007\020\010J\004"
      "\010\010\020\t\"P\n\tServerRef\022\021\n\tserver_id\030\005 \001(\003\022\014\n\004"
      "name\030\006 \001(\tJ\004\010\001\020\002J\004\010\002\020\003J\004\010\003\020\004J\004\010\004\020\005J\004\010\007\020\010"
      "J\004\010\010\020\t\"\222\001\n\006Server\022(\n\003ref\030\001 \001(\0132\033.grpc.ch"
      "annelz.v1.ServerRef\022*\n\004data\030\002 \001(\0132\034.grpc"
      ".channelz.v1.ServerData\0222\n\rlisten_socket"
      "\030\003 \003(\0132\033.grpc.channelz.v1.SocketRef\"\302\001\n\n"
      "ServerData\022-\n\005trace\030\001 \001(\0132\036.grpc.channel"
      "z.v1.ChannelTrace\022\025\n\rcalls_started\030\002 \001(\003"
      "\022\027\n\017calls_succeeded\030\003 \001(\003\022\024\n\014calls_faile"
      "d\030\004 \001(\003\022\?\n\033last_call_started_timestamp\030\005"
      " \001(\0132\032.google.protobuf.Timestamp\"\366\001\n\006Soc"
      "ket\022(\n\003ref\030\001 \001(\0132\033.grpc.channelz.v1.Sock"
      "etRef\022*\n\004data\030\002 \001(\0132\034.grpc.channelz.v1.S"
      "ocketData\022(\n\005local\030\003 \001(\0132\031.grpc.channelz"
      ".v1.Address\022)\n\006remote\030\004 \001(\0132\031.grpc.chann"
      "elz.v1.Address\022,\n\010security\030\005 \001(\0132\032.grpc."
      "channelz.v1.Security\022\023\n\013remote_name\030\006 \001("
      "\t\"\356\004\n\nSocketData\022\027\n\017streams_started\030\001 \001("
      "\003\022\031\n\021streams_succeeded\030\002 \001(\003\022\026\n\016streams_"
      "failed\030\003 \001(\003\022\025\n\rmessages_sent\030\004 \001(\003\022\031\n\021m"
      "essages_received\030\005 \001(\003\022\030\n\020keep_alives_se"
      "nt\030\006 \001(\003\022G\n#last_local_stream_created_ti"
      "mestamp\030\007 \001(\0132\032.google.protobuf.Timestam"
      "p\022H\n$last_remote_stream_created_timestam"
      "p\030\010 \001(\0132\032.google.protobuf.Timestamp\022\?\n\033l"
      "ast_message_sent_timestamp\030\t \001(\0132\032.googl"
      "e.protobuf.Timestamp\022C\n\037last_message_rec"
      "eived_timestamp\030\n \001(\0132\032.google.protobuf."
      "Timestamp\022>\n\031local_flow_control_window\030\013"
      " \001(\0132\033.google.protobuf.Int64Value\022\?\n\032rem"
      "ote_flow_control_window\030\014 \001(\0132\033.google.p"
      "rotobuf.Int64Value\022.\n\006option\030\r \003(\0132\036.grp"
      "c.channelz.v1.SocketOption\"\350\002\n\007Address\022\?"
      "\n\rtcpip_address\030\001 \001(\0132&.grpc.channelz.v1"
      ".Address.TcpIpAddressH\000\022;\n\013uds_address\030\002"
      " \001(\0132$.grpc.channelz.v1.Address.UdsAddre"
      "ssH\000\022\?\n\rother_address\030\003 \001(\0132&.grpc.chann"
      "elz.v1.Address.OtherAddressH\000\0320\n\014TcpIpAd"
      "dress\022\022\n\nip_address\030\001 \001(\014\022\014\n\004port\030\002 \001(\005\032"
      "\036\n\nUdsAddress\022\020\n\010filename\030\001 \001(\t\032A\n\014Other"
      "Address\022\014\n\004name\030\001 \001(\t\022#\n\005value\030\002 \001(\0132\024.g"
      "oogle.protobuf.AnyB\t\n\007address\"\276\002\n\010Securi"
      "ty\022-\n\003tls\030\001 \001(\0132\036.grpc.channelz.v1.Secur"
      "ity.TlsH\000\0229\n\005other\030\002 \001(\0132(.grpc.channelz"
      ".v1.Security.OtherSecurityH\000\032{\n\003Tls\022\027\n\rs"
      "tandard_name\030\001 \001(\tH\000\022\024\n\nother_name\030\002 \001(\t"
      "H\000\022\031\n\021local_certificate\030\003 \001(\014\022\032\n\022remote_"
      "certificate\030\004 \001(\014B\016\n\014cipher_suite\032B\n\rOth"
      "erSecurity\022\014\n\004name\030\001 \001(\t\022#\n\005value\030\002 \001(\0132"
      "\024.google.protobuf.AnyB\007\n\005model\"U\n\014Socket"
      "Option\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\022(\n\na"
      "dditional\030\003 \001(\0132\024.google.protobuf.Any\"B\n"
      "\023SocketOptionTimeout\022+\n\010duration\030\001 \001(\0132\031"
      ".google.protobuf.Duration\"Q\n\022SocketOptio"
      "nLinger\022\016\n\006active\030\001 \001(\010\022+\n\010duration\030\002 \001("
      "\0132\031.google.protobuf.Duration\"\256\005\n\023SocketO"
      "ptionTcpInfo\022\022\n\ntcpi_state\030\001 \001(\r\022\025\n\rtcpi"
      "_ca_state\030\002 \001(\r\022\030\n\020tcpi_retransmits\030\003 \001("
      "\r\022\023\n\013tcpi_probes\030\004 \001(\r\022\024\n\014tcpi_backoff\030\005"
      " \001(\r\022\024\n\014tcpi_options\030\006 \001(\r\022\027\n\017tcpi_snd_w"
      "scale\030\007 \001(\r\022\027\n\017tcpi_rcv_wscale\030\010 \001(\r\022\020\n\010"
      "tcpi_rto\030\t \001(\r\022\020\n\010tcpi_ato\030\n \001(\r\022\024\n\014tcpi"
      "_snd_mss\030\013 \001(\r\022\024\n\014tcpi_rcv_mss\030\014 \001(\r\022\024\n\014"
      "tcpi_unacked\030\r \001(\r\022\023\n\013tcpi_sacked\030\016 \001(\r\022"
      "\021\n\ttcpi_lost\030\017 \001(\r\022\024\n\014tcpi_retrans\030\020 \001(\r"
      "\022\024\n\014tcpi_fackets\030\021 \001(\r\022\033\n\023tcpi_last_data"
      "_sent\030\022 \001(\r\022\032\n\022tcpi_last_ack_sent\030\023 \001(\r\022"
      "\033\n\023tcpi_last_data_recv\030\024 \001(\r\022\032\n\022tcpi_las"
      "t_ack_recv\030\025 \001(\r\022\021\n\ttcpi_pmtu\030\026 \001(\r\022\031\n\021t"
      "cpi_rcv_ssthresh\030\027 \001(\r\022\020\n\010tcpi_rtt\030\030 \001(\r"
      "\022\023\n\013tcpi_rttvar\030\031 \001(\r\022\031\n\021tcpi_snd_ssthre"
      "sh\030\032 \001(\r\022\025\n\rtcpi_snd_cwnd\030\033 \001(\r\022\023\n\013tcpi_"
      "advmss\030\034 \001(\r\022\027\n\017tcpi_reordering\030\035 \001(\r\"1\n"
      "\025GetTopChannelsRequest\022\030\n\020start_channel_"
      "id\030\001 \001(\003\"Q\n\026GetTopChannelsResponse\022*\n\007ch"
      "annel\030\001 \003(\0132\031.grpc.channelz.v1.Channel\022\013"
      "\n\003end\030\002 \001(\010\",\n\021GetServersRequest\022\027\n\017star"
      "t_server_id\030\001 \001(\003\"K\n\022GetServersResponse\022"
      "(\n\006server\030\001 \003(\0132\030.grpc.channelz.v1.Serve"
      "r\022\013\n\003end\030\002 \001(\010\"E\n\027GetServerSocketsReques"
      "t\022\021\n\tserver_id\030\001 \001(\003\022\027\n\017start_socket_id\030"
      "\002 \001(\003\"X\n\030GetServerSocketsResponse\022/\n\nsoc"
      "ket_ref\030\001 \003(\0132\033.grpc.channelz.v1.SocketR"
      "ef\022\013\n\003end\030\002 \001(\010\"\'\n\021GetChannelRequest\022\022\n\n"
      "channel_id\030\001 \001(\003\"@\n\022GetChannelResponse\022*"
      "\n\007channel\030\001 \001(\0132\031.grpc.channelz.v1.Chann"
      "el\"-\n\024GetSubchannelRequest\022\025\n\rsubchannel"
      "_id\030\001 \001(\003\"I\n\025GetSubchannelResponse\0220\n\nsu"
      "bchannel\030\001 \001(\0132\034.grpc.channelz.v1.Subcha"
      "nnel\"%\n\020GetSocketRequest\022\021\n\tsocket_id\030\001 "
      "\001(\003\"=\n\021GetSocketResponse\022(\n\006socket\030\001 \001(\013"
      "2\030.grpc.channelz.v1.Socket2\304\004\n\010Channelz\022"
      "c\n\016GetTopChannels\022\'.grpc.channelz.v1.Get"
      "TopChannelsRequest\032(.grpc.channelz.v1.Ge"
      "tTopChannelsResponse\022W\n\nGetServers\022#.grp"
      "c.channelz.v1.GetServersRequest\032$.grpc.c"
      "hannelz.v1.GetServersResponse\022i\n\020GetServ"
      "erSockets\022).grpc.channelz.v1.GetServerSo"
      "cketsRequest\032*.grpc.channelz.v1.GetServe"
      "rSocketsResponse\022W\n\nGetChannel\022#.grpc.ch"
      "annelz.v1.GetChannelRequest\032$.grpc.chann"
      "elz.v1.GetChannelResponse\022`\n\rGetSubchann"
      "el\022&.grpc.channelz.v1.GetSubchannelReque"
      "st\032\'.grpc.channelz.v1.GetSubchannelRespo"
      "nse\022T\n\tGetSocket\022\".grpc.channelz.v1.GetS"
      "ocketRequest\032#.grpc.channelz.v1.GetSocke"
      "tResponseBX\n\023io.grpc.channelz.v1B\rChanne"
      "lzProtoP\001Z0google.golang.org/grpc/channe"
      "lz/grpc_channelz_v1b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 6267);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "src/proto/grpc/channelz/channelz.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fany_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fduration_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fwrappers_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto
namespace grpc {
namespace channelz {
namespace v1 {
const ::google::protobuf::EnumDescriptor* ChannelConnectivityState_State_descriptor() {
  protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_enum_descriptors[0];
}
bool ChannelConnectivityState_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChannelConnectivityState_State ChannelConnectivityState::UNKNOWN;
const ChannelConnectivityState_State ChannelConnectivityState::IDLE;
const ChannelConnectivityState_State ChannelConnectivityState::CONNECTING;
const ChannelConnectivityState_State ChannelConnectivityState::READY;
const ChannelConnectivityState_State ChannelConnectivityState::TRANSIENT_FAILURE;
const ChannelConnectivityState_State ChannelConnectivityState::SHUTDOWN;
const ChannelConnectivityState_State ChannelConnectivityState::State_MIN;
const ChannelConnectivityState_State ChannelConnectivityState::State_MAX;
const int ChannelConnectivityState::State_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ChannelTraceEvent_Severity_descriptor() {
  protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_enum_descriptors[1];
}
bool ChannelTraceEvent_Severity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChannelTraceEvent_Severity ChannelTraceEvent::CT_UNKNOWN;
const ChannelTraceEvent_Severity ChannelTraceEvent::CT_INFO;
const ChannelTraceEvent_Severity ChannelTraceEvent::CT_WARNING;
const ChannelTraceEvent_Severity ChannelTraceEvent::CT_ERROR;
const ChannelTraceEvent_Severity ChannelTraceEvent::Severity_MIN;
const ChannelTraceEvent_Severity ChannelTraceEvent::Severity_MAX;
const int ChannelTraceEvent::Severity_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Channel::InitAsDefaultInstance() {
  ::grpc::channelz::v1::_Channel_default_instance_._instance.get_mutable()->ref_ = const_cast< ::grpc::channelz::v1::ChannelRef*>(
      ::grpc::channelz::v1::ChannelRef::internal_default_instance());
  ::grpc::channelz::v1::_Channel_default_instance_._instance.get_mutable()->data_ = const_cast< ::grpc::channelz::v1::ChannelData*>(
      ::grpc::channelz::v1::ChannelData::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Channel::kRefFieldNumber;
const int Channel::kDataFieldNumber;
const int Channel::kChannelRefFieldNumber;
const int Channel::kSubchannelRefFieldNumber;
const int Channel::kSocketRefFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Channel::Channel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_Channel.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.channelz.v1.Channel)
}
Channel::Channel(const Channel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      channel_ref_(from.channel_ref_),
      subchannel_ref_(from.subchannel_ref_),
      socket_ref_(from.socket_ref_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ref()) {
    ref_ = new ::grpc::channelz::v1::ChannelRef(*from.ref_);
  } else {
    ref_ = NULL;
  }
  if (from.has_data()) {
    data_ = new ::grpc::channelz::v1::ChannelData(*from.data_);
  } else {
    data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.Channel)
}

void Channel::SharedCtor() {
  ::memset(&ref_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_) -
      reinterpret_cast<char*>(&ref_)) + sizeof(data_));
}

Channel::~Channel() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.Channel)
  SharedDtor();
}

void Channel::SharedDtor() {
  if (this != internal_default_instance()) delete ref_;
  if (this != internal_default_instance()) delete data_;
}

void Channel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Channel::descriptor() {
  ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Channel& Channel::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_Channel.base);
  return *internal_default_instance();
}


void Channel::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.Channel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_ref_.Clear();
  subchannel_ref_.Clear();
  socket_ref_.Clear();
  if (GetArenaNoVirtual() == NULL && ref_ != NULL) {
    delete ref_;
  }
  ref_ = NULL;
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
  _internal_metadata_.Clear();
}

bool Channel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.channelz.v1.Channel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .grpc.channelz.v1.ChannelRef ref = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ref()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .grpc.channelz.v1.ChannelData data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_channel_ref()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_subchannel_ref()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .grpc.channelz.v1.SocketRef socket_ref = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_socket_ref()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.channelz.v1.Channel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.channelz.v1.Channel)
  return false;
#undef DO_
}

void Channel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.channelz.v1.Channel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.ChannelRef ref = 1;
  if (this->has_ref()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_ref(), output);
  }

  // .grpc.channelz.v1.ChannelData data = 2;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_data(), output);
  }

  // repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->channel_ref_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->channel_ref(static_cast<int>(i)),
      output);
  }

  // repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->subchannel_ref_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->subchannel_ref(static_cast<int>(i)),
      output);
  }

  // repeated .grpc.channelz.v1.SocketRef socket_ref = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->socket_ref_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->socket_ref(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:grpc.channelz.v1.Channel)
}

::google::protobuf::uint8* Channel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.Channel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.ChannelRef ref = 1;
  if (this->has_ref()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_ref(), deterministic, target);
  }

  // .grpc.channelz.v1.ChannelData data = 2;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_data(), deterministic, target);
  }

  // repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->channel_ref_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->channel_ref(static_cast<int>(i)), deterministic, target);
  }

  // repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->subchannel_ref_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->subchannel_ref(static_cast<int>(i)), deterministic, target);
  }

  // repeated .grpc.channelz.v1.SocketRef socket_ref = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->socket_ref_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->socket_ref(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.Channel)
  return target;
}

size_t Channel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.Channel)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->channel_ref_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->channel_ref(static_cast<int>(i)));
    }
  }

  // repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->subchannel_ref_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->subchannel_ref(static_cast<int>(i)));
    }
  }

  // repeated .grpc.channelz.v1.SocketRef socket_ref = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->socket_ref_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->socket_ref(static_cast<int>(i)));
    }
  }

  // .grpc.channelz.v1.ChannelRef ref = 1;
  if (this->has_ref()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ref_);
  }

  // .grpc.channelz.v1.ChannelData data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Channel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.channelz.v1.Channel)
  GOOGLE_DCHECK_NE(&from, this);
  const Channel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Channel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.channelz.v1.Channel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.channelz.v1.Channel)
    MergeFrom(*source);
  }
}

void Channel::MergeFrom(const Channel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.Channel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channel_ref_.MergeFrom(from.channel_ref_);
  subchannel_ref_.MergeFrom(from.subchannel_ref_);
  socket_ref_.MergeFrom(from.socket_ref_);
  if (from.has_ref()) {
    mutable_ref()->::grpc::channelz::v1::ChannelRef::MergeFrom(from.ref());
  }
  if (from.has_data()) {
    mutable_data()->::grpc::channelz::v1::ChannelData::MergeFrom(from.data());
  }
}

void Channel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.channelz.v1.Channel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Channel::CopyFrom(const Channel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.Channel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Channel::IsInitialized() const {
  return true;
}

void Channel::Swap(Channel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Channel::InternalSwap(Channel* other) {
  using std::swap;
  CastToBase(&channel_ref_)->InternalSwap(CastToBase(&other->channel_ref_));
  CastToBase(&subchannel_ref_)->InternalSwap(CastToBase(&other->subchannel_ref_));
  CastToBase(&socket_ref_)->InternalSwap(CastToBase(&other->socket_ref_));
  swap(ref_, other->ref_);
  swap(data_, other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Channel::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Subchannel::InitAsDefaultInstance() {
  ::grpc::channelz::v1::_Subchannel_default_instance_._instance.get_mutable()->ref_ = const_cast< ::grpc::channelz::v1::SubchannelRef*>(
      ::grpc::channelz::v1::SubchannelRef::internal_default_instance());
  ::grpc::channelz::v1::_Subchannel_default_instance_._instance.get_mutable()->data_ = const_cast< ::grpc::channelz::v1::ChannelData*>(
      ::grpc::channelz::v1::ChannelData::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Subchannel::kRefFieldNumber;
const int Subchannel::kDataFieldNumber;
const int Subchannel::kChannelRefFieldNumber;
const int Subchannel::kSubchannelRefFieldNumber;
const int Subchannel::kSocketRefFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Subchannel::Subchannel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_Subchannel.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.channelz.v1.Subchannel)
}
Subchannel::Subchannel(const Subchannel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      channel_ref_(from.channel_ref_),
      subchannel_ref_(from.subchannel_ref_),
      socket_ref_(from.socket_ref_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ref()) {
    ref_ = new ::grpc::channelz::v1::SubchannelRef(*from.ref_);
  } else {
    ref_ = NULL;
  }
  if (from.has_data()) {
    data_ = new ::grpc::channelz::v1::ChannelData(*from.data_);
  } else {
    data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.Subchannel)
}

void Subchannel::SharedCtor() {
  ::memset(&ref_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_) -
      reinterpret_cast<char*>(&ref_)) + sizeof(data_));
}

Subchannel::~Subchannel() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.Subchannel)
  SharedDtor();
}

void Subchannel::SharedDtor() {
  if (this != internal_default_instance()) delete ref_;
  if (this != internal_default_instance()) delete data_;
}

void Subchannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Subchannel::descriptor() {
  ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Subchannel& Subchannel::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_Subchannel.base);
  return *internal_default_instance();
}


void Subchannel::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.Subchannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_ref_.Clear();
  subchannel_ref_.Clear();
  socket_ref_.Clear();
  if (GetArenaNoVirtual() == NULL && ref_ != NULL) {
    delete ref_;
  }
  ref_ = NULL;
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
  _internal_metadata_.Clear();
}

bool Subchannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.channelz.v1.Subchannel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .grpc.channelz.v1.SubchannelRef ref = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ref()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .grpc.channelz.v1.ChannelData data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_channel_ref()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_subchannel_ref()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .grpc.channelz.v1.SocketRef socket_ref = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_socket_ref()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.channelz.v1.Subchannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.channelz.v1.Subchannel)
  return false;
#undef DO_
}

void Subchannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.channelz.v1.Subchannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.SubchannelRef ref = 1;
  if (this->has_ref()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_ref(), output);
  }

  // .grpc.channelz.v1.ChannelData data = 2;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_data(), output);
  }

  // repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->channel_ref_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->channel_ref(static_cast<int>(i)),
      output);
  }

  // repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->subchannel_ref_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->subchannel_ref(static_cast<int>(i)),
      output);
  }

  // repeated .grpc.channelz.v1.SocketRef socket_ref = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->socket_ref_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->socket_ref(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:grpc.channelz.v1.Subchannel)
}

::google::protobuf::uint8* Subchannel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.Subchannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.SubchannelRef ref = 1;
  if (this->has_ref()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_ref(), deterministic, target);
  }

  // .grpc.channelz.v1.ChannelData data = 2;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_data(), deterministic, target);
  }

  // repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->channel_ref_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->channel_ref(static_cast<int>(i)), deterministic, target);
  }

  // repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->subchannel_ref_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->subchannel_ref(static_cast<int>(i)), deterministic, target);
  }

  // repeated .grpc.channelz.v1.SocketRef socket_ref = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->socket_ref_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->socket_ref(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.Subchannel)
  return target;
}

size_t Subchannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.Subchannel)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->channel_ref_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->channel_ref(static_cast<int>(i)));
    }
  }

  // repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->subchannel_ref_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->subchannel_ref(static_cast<int>(i)));
    }
  }

  // repeated .grpc.channelz.v1.SocketRef socket_ref = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->socket_ref_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->socket_ref(static_cast<int>(i)));
    }
  }

  // .grpc.channelz.v1.SubchannelRef ref = 1;
  if (this->has_ref()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ref_);
  }

  // .grpc.channelz.v1.ChannelData data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Subchannel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.channelz.v1.Subchannel)
  GOOGLE_DCHECK_NE(&from, this);
  const Subchannel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Subchannel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.channelz.v1.Subchannel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.channelz.v1.Subchannel)
    MergeFrom(*source);
  }
}

void Subchannel::MergeFrom(const Subchannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.Subchannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channel_ref_.MergeFrom(from.channel_ref_);
  subchannel_ref_.MergeFrom(from.subchannel_ref_);
  socket_ref_.MergeFrom(from.socket_ref_);
  if (from.has_ref()) {
    mutable_ref()->::grpc::channelz::v1::SubchannelRef::MergeFrom(from.ref());
  }
  if (from.has_data()) {
    mutable_data()->::grpc::channelz::v1::ChannelData::MergeFrom(from.data());
  }
}

void Subchannel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.channelz.v1.Subchannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Subchannel::CopyFrom(const Subchannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.Subchannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Subchannel::IsInitialized() const {
  return true;
}

void Subchannel::Swap(Subchannel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Subchannel::InternalSwap(Subchannel* other) {
  using std::swap;
  CastToBase(&channel_ref_)->InternalSwap(CastToBase(&other->channel_ref_));
  CastToBase(&subchannel_ref_)->InternalSwap(CastToBase(&other->subchannel_ref_));
  CastToBase(&socket_ref_)->InternalSwap(CastToBase(&other->socket_ref_));
  swap(ref_, other->ref_);
  swap(data_, other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Subchannel::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChannelConnectivityState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelConnectivityState::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelConnectivityState::ChannelConnectivityState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_ChannelConnectivityState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.channelz.v1.ChannelConnectivityState)
}
ChannelConnectivityState::ChannelConnectivityState(const ChannelConnectivityState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.ChannelConnectivityState)
}

void ChannelConnectivityState::SharedCtor() {
  state_ = 0;
}

ChannelConnectivityState::~ChannelConnectivityState() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.ChannelConnectivityState)
  SharedDtor();
}

void ChannelConnectivityState::SharedDtor() {
}

void ChannelConnectivityState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ChannelConnectivityState::descriptor() {
  ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChannelConnectivityState& ChannelConnectivityState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_ChannelConnectivityState.base);
  return *internal_default_instance();
}


void ChannelConnectivityState::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.ChannelConnectivityState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear();
}

bool ChannelConnectivityState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.channelz.v1.ChannelConnectivityState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .grpc.channelz.v1.ChannelConnectivityState.State state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::grpc::channelz::v1::ChannelConnectivityState_State >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.channelz.v1.ChannelConnectivityState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.channelz.v1.ChannelConnectivityState)
  return false;
#undef DO_
}

void ChannelConnectivityState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.channelz.v1.ChannelConnectivityState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.ChannelConnectivityState.State state = 1;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:grpc.channelz.v1.ChannelConnectivityState)
}

::google::protobuf::uint8* ChannelConnectivityState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.ChannelConnectivityState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.ChannelConnectivityState.State state = 1;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.ChannelConnectivityState)
  return target;
}

size_t ChannelConnectivityState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.ChannelConnectivityState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .grpc.channelz.v1.ChannelConnectivityState.State state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelConnectivityState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.channelz.v1.ChannelConnectivityState)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelConnectivityState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelConnectivityState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.channelz.v1.ChannelConnectivityState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.channelz.v1.ChannelConnectivityState)
    MergeFrom(*source);
  }
}

void ChannelConnectivityState::MergeFrom(const ChannelConnectivityState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.ChannelConnectivityState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state() != 0) {
    set_state(from.state());
  }
}

void ChannelConnectivityState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.channelz.v1.ChannelConnectivityState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelConnectivityState::CopyFrom(const ChannelConnectivityState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.ChannelConnectivityState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelConnectivityState::IsInitialized() const {
  return true;
}

void ChannelConnectivityState::Swap(ChannelConnectivityState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelConnectivityState::InternalSwap(ChannelConnectivityState* other) {
  using std::swap;
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChannelConnectivityState::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChannelData::InitAsDefaultInstance() {
  ::grpc::channelz::v1::_ChannelData_default_instance_._instance.get_mutable()->state_ = const_cast< ::grpc::channelz::v1::ChannelConnectivityState*>(
      ::grpc::channelz::v1::ChannelConnectivityState::internal_default_instance());
  ::grpc::channelz::v1::_ChannelData_default_instance_._instance.get_mutable()->trace_ = const_cast< ::grpc::channelz::v1::ChannelTrace*>(
      ::grpc::channelz::v1::ChannelTrace::internal_default_instance());
  ::grpc::channelz::v1::_ChannelData_default_instance_._instance.get_mutable()->last_call_started_timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void ChannelData::clear_last_call_started_timestamp() {
  if (GetArenaNoVirtual() == NULL && last_call_started_timestamp_ != NULL) {
    delete last_call_started_timestamp_;
  }
  last_call_started_timestamp_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelData::kStateFieldNumber;
const int ChannelData::kTargetFieldNumber;
const int ChannelData::kTraceFieldNumber;
const int ChannelData::kCallsStartedFieldNumber;
const int ChannelData::kCallsSucceededFieldNumber;
const int ChannelData::kCallsFailedFieldNumber;
const int ChannelData::kLastCallStartedTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelData::ChannelData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_ChannelData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.channelz.v1.ChannelData)
}
ChannelData::ChannelData(const ChannelData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  target_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.target().size() > 0) {
    target_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_);
  }
  if (from.has_state()) {
    state_ = new ::grpc::channelz::v1::ChannelConnectivityState(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_trace()) {
    trace_ = new ::grpc::channelz::v1::ChannelTrace(*from.trace_);
  } else {
    trace_ = NULL;
  }
  if (from.has_last_call_started_timestamp()) {
    last_call_started_timestamp_ = new ::google::protobuf::Timestamp(*from.last_call_started_timestamp_);
  } else {
    last_call_started_timestamp_ = NULL;
  }
  ::memcpy(&calls_started_, &from.calls_started_,
    static_cast<size_t>(reinterpret_cast<char*>(&calls_failed_) -
    reinterpret_cast<char*>(&calls_started_)) + sizeof(calls_failed_));
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.ChannelData)
}

void ChannelData::SharedCtor() {
  target_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&calls_failed_) -
      reinterpret_cast<char*>(&state_)) + sizeof(calls_failed_));
}

ChannelData::~ChannelData() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.ChannelData)
  SharedDtor();
}

void ChannelData::SharedDtor() {
  target_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete trace_;
  if (this != internal_default_instance()) delete last_call_started_timestamp_;
}

void ChannelData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ChannelData::descriptor() {
  ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChannelData& ChannelData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_ChannelData.base);
  return *internal_default_instance();
}


void ChannelData::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.ChannelData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && trace_ != NULL) {
    delete trace_;
  }
  trace_ = NULL;
  if (GetArenaNoVirtual() == NULL && last_call_started_timestamp_ != NULL) {
    delete last_call_started_timestamp_;
  }
  last_call_started_timestamp_ = NULL;
  ::memset(&calls_started_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&calls_failed_) -
      reinterpret_cast<char*>(&calls_started_)) + sizeof(calls_failed_));
  _internal_metadata_.Clear();
}

bool ChannelData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.channelz.v1.ChannelData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .grpc.channelz.v1.ChannelConnectivityState state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string target = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->target().data(), static_cast<int>(this->target().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "grpc.channelz.v1.ChannelData.target"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .grpc.channelz.v1.ChannelTrace trace = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trace()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 calls_started = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &calls_started_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 calls_succeeded = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &calls_succeeded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 calls_failed = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &calls_failed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp last_call_started_timestamp = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_last_call_started_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.channelz.v1.ChannelData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.channelz.v1.ChannelData)
  return false;
#undef DO_
}

void ChannelData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.channelz.v1.ChannelData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.ChannelConnectivityState state = 1;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_state(), output);
  }

  // string target = 2;
  if (this->target().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target().data(), static_cast<int>(this->target().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.ChannelData.target");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->target(), output);
  }

  // .grpc.channelz.v1.ChannelTrace trace = 3;
  if (this->has_trace()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_trace(), output);
  }

  // int64 calls_started = 4;
  if (this->calls_started() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->calls_started(), output);
  }

  // int64 calls_succeeded = 5;
  if (this->calls_succeeded() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->calls_succeeded(), output);
  }

  // int64 calls_failed = 6;
  if (this->calls_failed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->calls_failed(), output);
  }

  // .google.protobuf.Timestamp last_call_started_timestamp = 7;
  if (this->has_last_call_started_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_last_call_started_timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:grpc.channelz.v1.ChannelData)
}

::google::protobuf::uint8* ChannelData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.ChannelData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.ChannelConnectivityState state = 1;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_state(), deterministic, target);
  }

  // string target = 2;
  if (this->target().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target().data(), static_cast<int>(this->target().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.ChannelData.target");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->target(), target);
  }

  // .grpc.channelz.v1.ChannelTrace trace = 3;
  if (this->has_trace()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_trace(), deterministic, target);
  }

  // int64 calls_started = 4;
  if (this->calls_started() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->calls_started(), target);
  }

  // int64 calls_succeeded = 5;
  if (this->calls_succeeded() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->calls_succeeded(), target);
  }

  // int64 calls_failed = 6;
  if (this->calls_failed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->calls_failed(), target);
  }

  // .google.protobuf.Timestamp last_call_started_timestamp = 7;
  if (this->has_last_call_started_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_last_call_started_timestamp(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.ChannelData)
  return target;
}

size_t ChannelData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.ChannelData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string target = 2;
  if (this->target().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->target());
  }

  // .grpc.channelz.v1.ChannelConnectivityState state = 1;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *state_);
  }

  // .grpc.channelz.v1.ChannelTrace trace = 3;
  if (this->has_trace()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *trace_);
  }

  // .google.protobuf.Timestamp last_call_started_timestamp = 7;
  if (this->has_last_call_started_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *last_call_started_timestamp_);
  }

  // int64 calls_started = 4;
  if (this->calls_started() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->calls_started());
  }

  // int64 calls_succeeded = 5;
  if (this->calls_succeeded() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->calls_succeeded());
  }

  // int64 calls_failed = 6;
  if (this->calls_failed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->calls_failed());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.channelz.v1.ChannelData)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.channelz.v1.ChannelData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.channelz.v1.ChannelData)
    MergeFrom(*source);
  }
}

void ChannelData::MergeFrom(const ChannelData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.ChannelData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target().size() > 0) {

    target_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_);
  }
  if (from.has_state()) {
    mutable_state()->::grpc::channelz::v1::ChannelConnectivityState::MergeFrom(from.state());
  }
  if (from.has_trace()) {
    mutable_trace()->::grpc::channelz::v1::ChannelTrace::MergeFrom(from.trace());
  }
  if (from.has_last_call_started_timestamp()) {
    mutable_last_call_started_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.last_call_started_timestamp());
  }
  if (from.calls_started() != 0) {
    set_calls_started(from.calls_started());
  }
  if (from.calls_succeeded() != 0) {
    set_calls_succeeded(from.calls_succeeded());
  }
  if (from.calls_failed() != 0) {
    set_calls_failed(from.calls_failed());
  }
}

void ChannelData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.channelz.v1.ChannelData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelData::CopyFrom(const ChannelData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.ChannelData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelData::IsInitialized() const {
  return true;
}

void ChannelData::Swap(ChannelData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelData::InternalSwap(ChannelData* other) {
  using std::swap;
  target_.Swap(&other->target_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
  swap(trace_, other->trace_);
  swap(last_call_started_timestamp_, other->last_call_started_timestamp_);
  swap(calls_started_, other->calls_started_);
  swap(calls_succeeded_, other->calls_succeeded_);
  swap(calls_failed_, other->calls_failed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChannelData::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChannelTraceEvent::InitAsDefaultInstance() {
  ::grpc::channelz::v1::_ChannelTraceEvent_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::grpc::channelz::v1::_ChannelTraceEvent_default_instance_.channel_ref_ = const_cast< ::grpc::channelz::v1::ChannelRef*>(
      ::grpc::channelz::v1::ChannelRef::internal_default_instance());
  ::grpc::channelz::v1::_ChannelTraceEvent_default_instance_.subchannel_ref_ = const_cast< ::grpc::channelz::v1::SubchannelRef*>(
      ::grpc::channelz::v1::SubchannelRef::internal_default_instance());
}
void ChannelTraceEvent::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
}
void ChannelTraceEvent::set_allocated_channel_ref(::grpc::channelz::v1::ChannelRef* channel_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_child_ref();
  if (channel_ref) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      channel_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, channel_ref, submessage_arena);
    }
    set_has_channel_ref();
    child_ref_.channel_ref_ = channel_ref;
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.ChannelTraceEvent.channel_ref)
}
void ChannelTraceEvent::set_allocated_subchannel_ref(::grpc::channelz::v1::SubchannelRef* subchannel_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_child_ref();
  if (subchannel_ref) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      subchannel_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, subchannel_ref, submessage_arena);
    }
    set_has_subchannel_ref();
    child_ref_.subchannel_ref_ = subchannel_ref;
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.ChannelTraceEvent.subchannel_ref)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelTraceEvent::kDescriptionFieldNumber;
const int ChannelTraceEvent::kSeverityFieldNumber;
const int ChannelTraceEvent::kTimestampFieldNumber;
const int ChannelTraceEvent::kChannelRefFieldNumber;
const int ChannelTraceEvent::kSubchannelRefFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelTraceEvent::ChannelTraceEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_ChannelTraceEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.channelz.v1.ChannelTraceEvent)
}
ChannelTraceEvent::ChannelTraceEvent(const ChannelTraceEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::google::protobuf::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  severity_ = from.severity_;
  clear_has_child_ref();
  switch (from.child_ref_case()) {
    case kChannelRef: {
      mutable_channel_ref()->::grpc::channelz::v1::ChannelRef::MergeFrom(from.channel_ref());
      break;
    }
    case kSubchannelRef: {
      mutable_subchannel_ref()->::grpc::channelz::v1::SubchannelRef::MergeFrom(from.subchannel_ref());
      break;
    }
    case CHILD_REF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.ChannelTraceEvent)
}

void ChannelTraceEvent::SharedCtor() {
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&severity_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(severity_));
  clear_has_child_ref();
}

ChannelTraceEvent::~ChannelTraceEvent() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.ChannelTraceEvent)
  SharedDtor();
}

void ChannelTraceEvent::SharedDtor() {
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestamp_;
  if (has_child_ref()) {
    clear_child_ref();
  }
}

void ChannelTraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ChannelTraceEvent::descriptor() {
  ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChannelTraceEvent& ChannelTraceEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_ChannelTraceEvent.base);
  return *internal_default_instance();
}


void ChannelTraceEvent::clear_child_ref() {
// @@protoc_insertion_point(one_of_clear_start:grpc.channelz.v1.ChannelTraceEvent)
  switch (child_ref_case()) {
    case kChannelRef: {
      delete child_ref_.channel_ref_;
      break;
    }
    case kSubchannelRef: {
      delete child_ref_.subchannel_ref_;
      break;
    }
    case CHILD_REF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CHILD_REF_NOT_SET;
}


void ChannelTraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.ChannelTraceEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  severity_ = 0;
  clear_child_ref();
  _internal_metadata_.Clear();
}

bool ChannelTraceEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.channelz.v1.ChannelTraceEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string description = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "grpc.channelz.v1.ChannelTraceEvent.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .grpc.channelz.v1.ChannelTraceEvent.Severity severity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_severity(static_cast< ::grpc::channelz::v1::ChannelTraceEvent_Severity >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .grpc.channelz.v1.ChannelRef channel_ref = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_channel_ref()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .grpc.channelz.v1.SubchannelRef subchannel_ref = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_subchannel_ref()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.channelz.v1.ChannelTraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.channelz.v1.ChannelTraceEvent)
  return false;
#undef DO_
}

void ChannelTraceEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.channelz.v1.ChannelTraceEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string description = 1;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.ChannelTraceEvent.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->description(), output);
  }

  // .grpc.channelz.v1.ChannelTraceEvent.Severity severity = 2;
  if (this->severity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->severity(), output);
  }

  // .google.protobuf.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_timestamp(), output);
  }

  // .grpc.channelz.v1.ChannelRef channel_ref = 4;
  if (has_channel_ref()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_channel_ref(), output);
  }

  // .grpc.channelz.v1.SubchannelRef subchannel_ref = 5;
  if (has_subchannel_ref()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_subchannel_ref(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:grpc.channelz.v1.ChannelTraceEvent)
}

::google::protobuf::uint8* ChannelTraceEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.ChannelTraceEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string description = 1;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.ChannelTraceEvent.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->description(), target);
  }

  // .grpc.channelz.v1.ChannelTraceEvent.Severity severity = 2;
  if (this->severity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->severity(), target);
  }

  // .google.protobuf.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_timestamp(), deterministic, target);
  }

  // .grpc.channelz.v1.ChannelRef channel_ref = 4;
  if (has_channel_ref()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_channel_ref(), deterministic, target);
  }

  // .grpc.channelz.v1.SubchannelRef subchannel_ref = 5;
  if (has_subchannel_ref()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_subchannel_ref(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.ChannelTraceEvent)
  return target;
}

size_t ChannelTraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.ChannelTraceEvent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string description = 1;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // .google.protobuf.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .grpc.channelz.v1.ChannelTraceEvent.Severity severity = 2;
  if (this->severity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->severity());
  }

  switch (child_ref_case()) {
    // .grpc.channelz.v1.ChannelRef channel_ref = 4;
    case kChannelRef: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *child_ref_.channel_ref_);
      break;
    }
    // .grpc.channelz.v1.SubchannelRef subchannel_ref = 5;
    case kSubchannelRef: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *child_ref_.subchannel_ref_);
      break;
    }
    case CHILD_REF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelTraceEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.channelz.v1.ChannelTraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelTraceEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelTraceEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.channelz.v1.ChannelTraceEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.channelz.v1.ChannelTraceEvent)
    MergeFrom(*source);
  }
}

void ChannelTraceEvent::MergeFrom(const ChannelTraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.ChannelTraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.severity() != 0) {
    set_severity(from.severity());
  }
  switch (from.child_ref_case()) {
    case kChannelRef: {
      mutable_channel_ref()->::grpc::channelz::v1::ChannelRef::MergeFrom(from.channel_ref());
      break;
    }
    case kSubchannelRef: {
      mutable_subchannel_ref()->::grpc::channelz::v1::SubchannelRef::MergeFrom(from.subchannel_ref());
      break;
    }
    case CHILD_REF_NOT_SET: {
      break;
    }
  }
}

void ChannelTraceEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.channelz.v1.ChannelTraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelTraceEvent::CopyFrom(const ChannelTraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.ChannelTraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelTraceEvent::IsInitialized() const {
  return true;
}

void ChannelTraceEvent::Swap(ChannelTraceEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelTraceEvent::InternalSwap(ChannelTraceEvent* other) {
  using std::swap;
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(severity_, other->severity_);
  swap(child_ref_, other->child_ref_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChannelTraceEvent::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChannelTrace::InitAsDefaultInstance() {
  ::grpc::channelz::v1::_ChannelTrace_default_instance_._instance.get_mutable()->creation_timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void ChannelTrace::clear_creation_timestamp() {
  if (GetArenaNoVirtual() == NULL && creation_timestamp_ != NULL) {
    delete creation_timestamp_;
  }
  creation_timestamp_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelTrace::kNumEventsLoggedFieldNumber;
const int ChannelTrace::kCreationTimestampFieldNumber;
const int ChannelTrace::kEventsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelTrace::ChannelTrace()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_ChannelTrace.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.channelz.v1.ChannelTrace)
}
ChannelTrace::ChannelTrace(const ChannelTrace& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      events_(from.events_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_creation_timestamp()) {
    creation_timestamp_ = new ::google::protobuf::Timestamp(*from.creation_timestamp_);
  } else {
    creation_timestamp_ = NULL;
  }
  num_events_logged_ = from.num_events_logged_;
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.ChannelTrace)
}

void ChannelTrace::SharedCtor() {
  ::memset(&creation_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_events_logged_) -
      reinterpret_cast<char*>(&creation_timestamp_)) + sizeof(num_events_logged_));
}

ChannelTrace::~ChannelTrace() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.ChannelTrace)
  SharedDtor();
}

void ChannelTrace::SharedDtor() {
  if (this != internal_default_instance()) delete creation_timestamp_;
}

void ChannelTrace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ChannelTrace::descriptor() {
  ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChannelTrace& ChannelTrace::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_ChannelTrace.base);
  return *internal_default_instance();
}


void ChannelTrace::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.ChannelTrace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  if (GetArenaNoVirtual() == NULL && creation_timestamp_ != NULL) {
    delete creation_timestamp_;
  }
  creation_timestamp_ = NULL;
  num_events_logged_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool ChannelTrace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.channelz.v1.ChannelTrace)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 num_events_logged = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_events_logged_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp creation_timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_creation_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .grpc.channelz.v1.ChannelTraceEvent events = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.channelz.v1.ChannelTrace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.channelz.v1.ChannelTrace)
  return false;
#undef DO_
}

void ChannelTrace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.channelz.v1.ChannelTrace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 num_events_logged = 1;
  if (this->num_events_logged() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->num_events_logged(), output);
  }

  // .google.protobuf.Timestamp creation_timestamp = 2;
  if (this->has_creation_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_creation_timestamp(), output);
  }

  // repeated .grpc.channelz.v1.ChannelTraceEvent events = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->events(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:grpc.channelz.v1.ChannelTrace)
}

::google::protobuf::uint8* ChannelTrace::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.ChannelTrace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 num_events_logged = 1;
  if (this->num_events_logged() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->num_events_logged(), target);
  }

  // .google.protobuf.Timestamp creation_timestamp = 2;
  if (this->has_creation_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_creation_timestamp(), deterministic, target);
  }

  // repeated .grpc.channelz.v1.ChannelTraceEvent events = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->events(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.ChannelTrace)
  return target;
}

size_t ChannelTrace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.ChannelTrace)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .grpc.channelz.v1.ChannelTraceEvent events = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->events_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->events(static_cast<int>(i)));
    }
  }

  // .google.protobuf.Timestamp creation_timestamp = 2;
  if (this->has_creation_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *creation_timestamp_);
  }

  // int64 num_events_logged = 1;
  if (this->num_events_logged() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->num_events_logged());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelTrace::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.channelz.v1.ChannelTrace)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelTrace* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelTrace>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.channelz.v1.ChannelTrace)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.channelz.v1.ChannelTrace)
    MergeFrom(*source);
  }
}

void ChannelTrace::MergeFrom(const ChannelTrace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.ChannelTrace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  if (from.has_creation_timestamp()) {
    mutable_creation_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.creation_timestamp());
  }
  if (from.num_events_logged() != 0) {
    set_num_events_logged(from.num_events_logged());
  }
}

void ChannelTrace::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.channelz.v1.ChannelTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelTrace::CopyFrom(const ChannelTrace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.ChannelTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelTrace::IsInitialized() const {
  return true;
}

void ChannelTrace::Swap(ChannelTrace* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelTrace::InternalSwap(ChannelTrace* other) {
  using std::swap;
  CastToBase(&events_)->InternalSwap(CastToBase(&other->events_));
  swap(creation_timestamp_, other->creation_timestamp_);
  swap(num_events_logged_, other->num_events_logged_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChannelTrace::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChannelRef::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelRef::kChannelIdFieldNumber;
const int ChannelRef::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelRef::ChannelRef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_ChannelRef.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.channelz.v1.ChannelRef)
}
ChannelRef::ChannelRef(const ChannelRef& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  channel_id_ = from.channel_id_;
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.ChannelRef)
}

void ChannelRef::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_id_ = GOOGLE_LONGLONG(0);
}

ChannelRef::~ChannelRef() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.ChannelRef)
  SharedDtor();
}

void ChannelRef::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChannelRef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ChannelRef::descriptor() {
  ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChannelRef& ChannelRef::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_ChannelRef.base);
  return *internal_default_instance();
}


void ChannelRef::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.ChannelRef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_id_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool ChannelRef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.channelz.v1.ChannelRef)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 channel_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "grpc.channelz.v1.ChannelRef.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.channelz.v1.ChannelRef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.channelz.v1.ChannelRef)
  return false;
#undef DO_
}

void ChannelRef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.channelz.v1.ChannelRef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 channel_id = 1;
  if (this->channel_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->channel_id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.ChannelRef.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:grpc.channelz.v1.ChannelRef)
}

::google::protobuf::uint8* ChannelRef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.ChannelRef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 channel_id = 1;
  if (this->channel_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->channel_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.ChannelRef.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.ChannelRef)
  return target;
}

size_t ChannelRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.ChannelRef)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int64 channel_id = 1;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->channel_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelRef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.channelz.v1.ChannelRef)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelRef* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelRef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.channelz.v1.ChannelRef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.channelz.v1.ChannelRef)
    MergeFrom(*source);
  }
}

void ChannelRef::MergeFrom(const ChannelRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.ChannelRef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.channel_id() != 0) {
    set_channel_id(from.channel_id());
  }
}

void ChannelRef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.channelz.v1.ChannelRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelRef::CopyFrom(const ChannelRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.ChannelRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelRef::IsInitialized() const {
  return true;
}

void ChannelRef::Swap(ChannelRef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelRef::InternalSwap(ChannelRef* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(channel_id_, other->channel_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChannelRef::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SubchannelRef::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubchannelRef::kSubchannelIdFieldNumber;
const int SubchannelRef::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubchannelRef::SubchannelRef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_SubchannelRef.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.channelz.v1.SubchannelRef)
}
SubchannelRef::SubchannelRef(const SubchannelRef& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  subchannel_id_ = from.subchannel_id_;
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.SubchannelRef)
}

void SubchannelRef::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subchannel_id_ = GOOGLE_LONGLONG(0);
}

SubchannelRef::~SubchannelRef() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.SubchannelRef)
  SharedDtor();
}

void SubchannelRef::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SubchannelRef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SubchannelRef::descriptor() {
  ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubchannelRef& SubchannelRef::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_SubchannelRef.base);
  return *internal_default_instance();
}


void SubchannelRef::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.SubchannelRef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subchannel_id_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool SubchannelRef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.channelz.v1.SubchannelRef)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 subchannel_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &subchannel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "grpc.channelz.v1.SubchannelRef.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.channelz.v1.SubchannelRef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.channelz.v1.SubchannelRef)
  return false;
#undef DO_
}

void SubchannelRef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.channelz.v1.SubchannelRef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 subchannel_id = 7;
  if (this->subchannel_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->subchannel_id(), output);
  }

  // string name = 8;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.SubchannelRef.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:grpc.channelz.v1.SubchannelRef)
}

::google::protobuf::uint8* SubchannelRef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.SubchannelRef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 subchannel_id = 7;
  if (this->subchannel_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->subchannel_id(), target);
  }

  // string name = 8;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.SubchannelRef.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.SubchannelRef)
  return target;
}

size_t SubchannelRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.SubchannelRef)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 8;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int64 subchannel_id = 7;
  if (this->subchannel_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->subchannel_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubchannelRef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.channelz.v1.SubchannelRef)
  GOOGLE_DCHECK_NE(&from, this);
  const SubchannelRef* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubchannelRef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.channelz.v1.SubchannelRef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.channelz.v1.SubchannelRef)
    MergeFrom(*source);
  }
}

void SubchannelRef::MergeFrom(const SubchannelRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.SubchannelRef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.subchannel_id() != 0) {
    set_subchannel_id(from.subchannel_id());
  }
}

void SubchannelRef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.channelz.v1.SubchannelRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubchannelRef::CopyFrom(const SubchannelRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.SubchannelRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubchannelRef::IsInitialized() const {
  return true;
}

void SubchannelRef::Swap(SubchannelRef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubchannelRef::InternalSwap(SubchannelRef* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(subchannel_id_, other->subchannel_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SubchannelRef::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SocketRef::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SocketRef::kSocketIdFieldNumber;
const int SocketRef::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SocketRef::SocketRef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_SocketRef.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.channelz.v1.SocketRef)
}
SocketRef::SocketRef(const SocketRef& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  socket_id_ = from.socket_id_;
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.SocketRef)
}

void SocketRef::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  socket_id_ = GOOGLE_LONGLONG(0);
}

SocketRef::~SocketRef() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.SocketRef)
  SharedDtor();
}

void SocketRef::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SocketRef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SocketRef::descriptor() {
  ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SocketRef& SocketRef::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_SocketRef.base);
  return *internal_default_instance();
}


void SocketRef::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.SocketRef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  socket_id_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool SocketRef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.channelz.v1.SocketRef)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 socket_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &socket_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "grpc.channelz.v1.SocketRef.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.channelz.v1.SocketRef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.channelz.v1.SocketRef)
  return false;
#undef DO_
}

void SocketRef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.channelz.v1.SocketRef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 socket_id = 3;
  if (this->socket_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->socket_id(), output);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.SocketRef.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:grpc.channelz.v1.SocketRef)
}

::google::protobuf::uint8* SocketRef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.SocketRef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 socket_id = 3;
  if (this->socket_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->socket_id(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.SocketRef.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.SocketRef)
  return target;
}

size_t SocketRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.SocketRef)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int64 socket_id = 3;
  if (this->socket_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->socket_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SocketRef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.channelz.v1.SocketRef)
  GOOGLE_DCHECK_NE(&from, this);
  const SocketRef* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SocketRef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.channelz.v1.SocketRef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.channelz.v1.SocketRef)
    MergeFrom(*source);
  }
}

void SocketRef::MergeFrom(const SocketRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.SocketRef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.socket_id() != 0) {
    set_socket_id(from.socket_id());
  }
}

void SocketRef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.channelz.v1.SocketRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SocketRef::CopyFrom(const SocketRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.SocketRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketRef::IsInitialized() const {
  return true;
}

void SocketRef::Swap(SocketRef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SocketRef::InternalSwap(SocketRef* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(socket_id_, other->socket_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SocketRef::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ServerRef::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerRef::kServerIdFieldNumber;
const int ServerRef::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerRef::ServerRef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_ServerRef.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.channelz.v1.ServerRef)
}
ServerRef::ServerRef(const ServerRef& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  server_id_ = from.server_id_;
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.ServerRef)
}

void ServerRef::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_id_ = GOOGLE_LONGLONG(0);
}

ServerRef::~ServerRef() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.ServerRef)
  SharedDtor();
}

void ServerRef::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ServerRef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ServerRef::descriptor() {
  ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerRef& ServerRef::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_ServerRef.base);
  return *internal_default_instance();
}


void ServerRef::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.ServerRef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_id_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool ServerRef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.channelz.v1.ServerRef)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 server_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "grpc.channelz.v1.ServerRef.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.channelz.v1.ServerRef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.channelz.v1.ServerRef)
  return false;
#undef DO_
}

void ServerRef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.channelz.v1.ServerRef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 server_id = 5;
  if (this->server_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->server_id(), output);
  }

  // string name = 6;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.ServerRef.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:grpc.channelz.v1.ServerRef)
}

::google::protobuf::uint8* ServerRef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.ServerRef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 server_id = 5;
  if (this->server_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->server_id(), target);
  }

  // string name = 6;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.ServerRef.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.ServerRef)
  return target;
}

size_t ServerRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.ServerRef)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 6;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int64 server_id = 5;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->server_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerRef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.channelz.v1.ServerRef)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerRef* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerRef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.channelz.v1.ServerRef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.channelz.v1.ServerRef)
    MergeFrom(*source);
  }
}

void ServerRef::MergeFrom(const ServerRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.ServerRef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.server_id() != 0) {
    set_server_id(from.server_id());
  }
}

void ServerRef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.channelz.v1.ServerRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerRef::CopyFrom(const ServerRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.ServerRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerRef::IsInitialized() const {
  return true;
}

void ServerRef::Swap(ServerRef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerRef::InternalSwap(ServerRef* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(server_id_, other->server_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ServerRef::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Server::InitAsDefaultInstance() {
  ::grpc::channelz::v1::_Server_default_instance_._instance.get_mutable()->ref_ = const_cast< ::grpc::channelz::v1::ServerRef*>(
      ::grpc::channelz::v1::ServerRef::internal_default_instance());
  ::grpc::channelz::v1::_Server_default_instance_._instance.get_mutable()->data_ = const_cast< ::grpc::channelz::v1::ServerData*>(
      ::grpc::channelz::v1::ServerData::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Server::kRefFieldNumber;
const int Server::kDataFieldNumber;
const int Server::kListenSocketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Server::Server()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_Server.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.channelz.v1.Server)
}
Server::Server(const Server& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      listen_socket_(from.listen_socket_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ref()) {
    ref_ = new ::grpc::channelz::v1::ServerRef(*from.ref_);
  } else {
    ref_ = NULL;
  }
  if (from.has_data()) {
    data_ = new ::grpc::channelz::v1::ServerData(*from.data_);
  } else {
    data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.Server)
}

void Server::SharedCtor() {
  ::memset(&ref_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_) -
      reinterpret_cast<char*>(&ref_)) + sizeof(data_));
}

Server::~Server() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.Server)
  SharedDtor();
}

void Server::SharedDtor() {
  if (this != internal_default_instance()) delete ref_;
  if (this != internal_default_instance()) delete data_;
}

void Server::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Server::descriptor() {
  ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Server& Server::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_Server.base);
  return *internal_default_instance();
}


void Server::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.Server)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  listen_socket_.Clear();
  if (GetArenaNoVirtual() == NULL && ref_ != NULL) {
    delete ref_;
  }
  ref_ = NULL;
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
  _internal_metadata_.Clear();
}

bool Server::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.channelz.v1.Server)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .grpc.channelz.v1.ServerRef ref = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ref()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .grpc.channelz.v1.ServerData data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .grpc.channelz.v1.SocketRef listen_socket = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_listen_socket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.channelz.v1.Server)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.channelz.v1.Server)
  return false;
#undef DO_
}

void Server::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.channelz.v1.Server)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.ServerRef ref = 1;
  if (this->has_ref()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_ref(), output);
  }

  // .grpc.channelz.v1.ServerData data = 2;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_data(), output);
  }

  // repeated .grpc.channelz.v1.SocketRef listen_socket = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->listen_socket_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->listen_socket(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:grpc.channelz.v1.Server)
}

::google::protobuf::uint8* Server::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.Server)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.ServerRef ref = 1;
  if (this->has_ref()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_ref(), deterministic, target);
  }

  // .grpc.channelz.v1.ServerData data = 2;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_data(), deterministic, target);
  }

  // repeated .grpc.channelz.v1.SocketRef listen_socket = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->listen_socket_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->listen_socket(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.Server)
  return target;
}

size_t Server::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.Server)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .grpc.channelz.v1.SocketRef listen_socket = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->listen_socket_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->listen_socket(static_cast<int>(i)));
    }
  }

  // .grpc.channelz.v1.ServerRef ref = 1;
  if (this->has_ref()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ref_);
  }

  // .grpc.channelz.v1.ServerData data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Server::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.channelz.v1.Server)
  GOOGLE_DCHECK_NE(&from, this);
  const Server* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Server>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.channelz.v1.Server)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.channelz.v1.Server)
    MergeFrom(*source);
  }
}

void Server::MergeFrom(const Server& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.Server)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  listen_socket_.MergeFrom(from.listen_socket_);
  if (from.has_ref()) {
    mutable_ref()->::grpc::channelz::v1::ServerRef::MergeFrom(from.ref());
  }
  if (from.has_data()) {
    mutable_data()->::grpc::channelz::v1::ServerData::MergeFrom(from.data());
  }
}

void Server::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.channelz.v1.Server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Server::CopyFrom(const Server& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.Server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Server::IsInitialized() const {
  return true;
}

void Server::Swap(Server* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Server::InternalSwap(Server* other) {
  using std::swap;
  CastToBase(&listen_socket_)->InternalSwap(CastToBase(&other->listen_socket_));
  swap(ref_, other->ref_);
  swap(data_, other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Server::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ServerData::InitAsDefaultInstance() {
  ::grpc::channelz::v1::_ServerData_default_instance_._instance.get_mutable()->trace_ = const_cast< ::grpc::channelz::v1::ChannelTrace*>(
      ::grpc::channelz::v1::ChannelTrace::internal_default_instance());
  ::grpc::channelz::v1::_ServerData_default_instance_._instance.get_mutable()->last_call_started_timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void ServerData::clear_last_call_started_timestamp() {
  if (GetArenaNoVirtual() == NULL && last_call_started_timestamp_ != NULL) {
    delete last_call_started_timestamp_;
  }
  last_call_started_timestamp_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerData::kTraceFieldNumber;
const int ServerData::kCallsStartedFieldNumber;
const int ServerData::kCallsSucceededFieldNumber;
const int ServerData::kCallsFailedFieldNumber;
const int ServerData::kLastCallStartedTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerData::ServerData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_ServerData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.channelz.v1.ServerData)
}
ServerData::ServerData(const ServerData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_trace()) {
    trace_ = new ::grpc::channelz::v1::ChannelTrace(*from.trace_);
  } else {
    trace_ = NULL;
  }
  if (from.has_last_call_started_timestamp()) {
    last_call_started_timestamp_ = new ::google::protobuf::Timestamp(*from.last_call_started_timestamp_);
  } else {
    last_call_started_timestamp_ = NULL;
  }
  ::memcpy(&calls_started_, &from.calls_started_,
    static_cast<size_t>(reinterpret_cast<char*>(&calls_failed_) -
    reinterpret_cast<char*>(&calls_started_)) + sizeof(calls_failed_));
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.ServerData)
}

void ServerData::SharedCtor() {
  ::memset(&trace_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&calls_failed_) -
      reinterpret_cast<char*>(&trace_)) + sizeof(calls_failed_));
}

ServerData::~ServerData() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.ServerData)
  SharedDtor();
}

void ServerData::SharedDtor() {
  if (this != internal_default_instance()) delete trace_;
  if (this != internal_default_instance()) delete last_call_started_timestamp_;
}

void ServerData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ServerData::descriptor() {
  ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerData& ServerData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_ServerData.base);
  return *internal_default_instance();
}


void ServerData::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.ServerData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && trace_ != NULL) {
    delete trace_;
  }
  trace_ = NULL;
  if (GetArenaNoVirtual() == NULL && last_call_started_timestamp_ != NULL) {
    delete last_call_started_timestamp_;
  }
  last_call_started_timestamp_ = NULL;
  ::memset(&calls_started_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&calls_failed_) -
      reinterpret_cast<char*>(&calls_started_)) + sizeof(calls_failed_));
  _internal_metadata_.Clear();
}

bool ServerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.channelz.v1.ServerData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .grpc.channelz.v1.ChannelTrace trace = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trace()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 calls_started = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &calls_started_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 calls_succeeded = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &calls_succeeded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 calls_failed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &calls_failed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp last_call_started_timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_last_call_started_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.channelz.v1.ServerData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.channelz.v1.ServerData)
  return false;
#undef DO_
}

void ServerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.channelz.v1.ServerData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.ChannelTrace trace = 1;
  if (this->has_trace()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_trace(), output);
  }

  // int64 calls_started = 2;
  if (this->calls_started() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->calls_started(), output);
  }

  // int64 calls_succeeded = 3;
  if (this->calls_succeeded() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->calls_succeeded(), output);
  }

  // int64 calls_failed = 4;
  if (this->calls_failed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->calls_failed(), output);
  }

  // .google.protobuf.Timestamp last_call_started_timestamp = 5;
  if (this->has_last_call_started_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_last_call_started_timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:grpc.channelz.v1.ServerData)
}

::google::protobuf::uint8* ServerData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.ServerData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.ChannelTrace trace = 1;
  if (this->has_trace()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_trace(), deterministic, target);
  }

  // int64 calls_started = 2;
  if (this->calls_started() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->calls_started(), target);
  }

  // int64 calls_succeeded = 3;
  if (this->calls_succeeded() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->calls_succeeded(), target);
  }

  // int64 calls_failed = 4;
  if (this->calls_failed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->calls_failed(), target);
  }

  // .google.protobuf.Timestamp last_call_started_timestamp = 5;
  if (this->has_last_call_started_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_last_call_started_timestamp(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.ServerData)
  return target;
}

size_t ServerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.ServerData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .grpc.channelz.v1.ChannelTrace trace = 1;
  if (this->has_trace()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *trace_);
  }

  // .google.protobuf.Timestamp last_call_started_timestamp = 5;
  if (this->has_last_call_started_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *last_call_started_timestamp_);
  }

  // int64 calls_started = 2;
  if (this->calls_started() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->calls_started());
  }

  // int64 calls_succeeded = 3;
  if (this->calls_succeeded() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->calls_succeeded());
  }

  // int64 calls_failed = 4;
  if (this->calls_failed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->calls_failed());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.channelz.v1.ServerData)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.channelz.v1.ServerData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.channelz.v1.ServerData)
    MergeFrom(*source);
  }
}

void ServerData::MergeFrom(const ServerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.ServerData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_trace()) {
    mutable_trace()->::grpc::channelz::v1::ChannelTrace::MergeFrom(from.trace());
  }
  if (from.has_last_call_started_timestamp()) {
    mutable_last_call_started_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.last_call_started_timestamp());
  }
  if (from.calls_started() != 0) {
    set_calls_started(from.calls_started());
  }
  if (from.calls_succeeded() != 0) {
    set_calls_succeeded(from.calls_succeeded());
  }
  if (from.calls_failed() != 0) {
    set_calls_failed(from.calls_failed());
  }
}

void ServerData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.channelz.v1.ServerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerData::CopyFrom(const ServerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.ServerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerData::IsInitialized() const {
  return true;
}

void ServerData::Swap(ServerData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerData::InternalSwap(ServerData* other) {
  using std::swap;
  swap(trace_, other->trace_);
  swap(last_call_started_timestamp_, other->last_call_started_timestamp_);
  swap(calls_started_, other->calls_started_);
  swap(calls_succeeded_, other->calls_succeeded_);
  swap(calls_failed_, other->calls_failed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ServerData::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Socket::InitAsDefaultInstance() {
  ::grpc::channelz::v1::_Socket_default_instance_._instance.get_mutable()->ref_ = const_cast< ::grpc::channelz::v1::SocketRef*>(
      ::grpc::channelz::v1::SocketRef::internal_default_instance());
  ::grpc::channelz::v1::_Socket_default_instance_._instance.get_mutable()->data_ = const_cast< ::grpc::channelz::v1::SocketData*>(
      ::grpc::channelz::v1::SocketData::internal_default_instance());
  ::grpc::channelz::v1::_Socket_default_instance_._instance.get_mutable()->local_ = const_cast< ::grpc::channelz::v1::Address*>(
      ::grpc::channelz::v1::Address::internal_default_instance());
  ::grpc::channelz::v1::_Socket_default_instance_._instance.get_mutable()->remote_ = const_cast< ::grpc::channelz::v1::Address*>(
      ::grpc::channelz::v1::Address::internal_default_instance());
  ::grpc::channelz::v1::_Socket_default_instance_._instance.get_mutable()->security_ = const_cast< ::grpc::channelz::v1::Security*>(
      ::grpc::channelz::v1::Security::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Socket::kRefFieldNumber;
const int Socket::kDataFieldNumber;
const int Socket::kLocalFieldNumber;
const int Socket::kRemoteFieldNumber;
const int Socket::kSecurityFieldNumber;
const int Socket::kRemoteNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Socket::Socket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_Socket.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.channelz.v1.Socket)
}
Socket::Socket(const Socket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  remote_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.remote_name().size() > 0) {
    remote_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remote_name_);
  }
  if (from.has_ref()) {
    ref_ = new ::grpc::channelz::v1::SocketRef(*from.ref_);
  } else {
    ref_ = NULL;
  }
  if (from.has_data()) {
    data_ = new ::grpc::channelz::v1::SocketData(*from.data_);
  } else {
    data_ = NULL;
  }
  if (from.has_local()) {
    local_ = new ::grpc::channelz::v1::Address(*from.local_);
  } else {
    local_ = NULL;
  }
  if (from.has_remote()) {
    remote_ = new ::grpc::channelz::v1::Address(*from.remote_);
  } else {
    remote_ = NULL;
  }
  if (from.has_security()) {
    security_ = new ::grpc::channelz::v1::Security(*from.security_);
  } else {
    security_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.Socket)
}

void Socket::SharedCtor() {
  remote_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ref_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&security_) -
      reinterpret_cast<char*>(&ref_)) + sizeof(security_));
}

Socket::~Socket() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.Socket)
  SharedDtor();
}

void Socket::SharedDtor() {
  remote_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ref_;
  if (this != internal_default_instance()) delete data_;
  if (this != internal_default_instance()) delete local_;
  if (this != internal_default_instance()) delete remote_;
  if (this != internal_default_instance()) delete security_;
}

void Socket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Socket::descriptor() {
  ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Socket& Socket::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_Socket.base);
  return *internal_default_instance();
}


void Socket::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.Socket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remote_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && ref_ != NULL) {
    delete ref_;
  }
  ref_ = NULL;
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
  if (GetArenaNoVirtual() == NULL && local_ != NULL) {
    delete local_;
  }
  local_ = NULL;
  if (GetArenaNoVirtual() == NULL && remote_ != NULL) {
    delete remote_;
  }
  remote_ = NULL;
  if (GetArenaNoVirtual() == NULL && security_ != NULL) {
    delete security_;
  }
  security_ = NULL;
  _internal_metadata_.Clear();
}

bool Socket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.channelz.v1.Socket)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .grpc.channelz.v1.SocketRef ref = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ref()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .grpc.channelz.v1.SocketData data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .grpc.channelz.v1.Address local = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_local()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .grpc.channelz.v1.Address remote = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_remote()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .grpc.channelz.v1.Security security = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_security()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string remote_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remote_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->remote_name().data(), static_cast<int>(this->remote_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "grpc.channelz.v1.Socket.remote_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.channelz.v1.Socket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.channelz.v1.Socket)
  return false;
#undef DO_
}

void Socket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.channelz.v1.Socket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.SocketRef ref = 1;
  if (this->has_ref()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_ref(), output);
  }

  // .grpc.channelz.v1.SocketData data = 2;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_data(), output);
  }

  // .grpc.channelz.v1.Address local = 3;
  if (this->has_local()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_local(), output);
  }

  // .grpc.channelz.v1.Address remote = 4;
  if (this->has_remote()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_remote(), output);
  }

  // .grpc.channelz.v1.Security security = 5;
  if (this->has_security()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_security(), output);
  }

  // string remote_name = 6;
  if (this->remote_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->remote_name().data(), static_cast<int>(this->remote_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.Socket.remote_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->remote_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:grpc.channelz.v1.Socket)
}

::google::protobuf::uint8* Socket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.Socket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.SocketRef ref = 1;
  if (this->has_ref()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_ref(), deterministic, target);
  }

  // .grpc.channelz.v1.SocketData data = 2;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_data(), deterministic, target);
  }

  // .grpc.channelz.v1.Address local = 3;
  if (this->has_local()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_local(), deterministic, target);
  }

  // .grpc.channelz.v1.Address remote = 4;
  if (this->has_remote()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_remote(), deterministic, target);
  }

  // .grpc.channelz.v1.Security security = 5;
  if (this->has_security()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_security(), deterministic, target);
  }

  // string remote_name = 6;
  if (this->remote_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->remote_name().data(), static_cast<int>(this->remote_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.Socket.remote_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->remote_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.Socket)
  return target;
}

size_t Socket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.Socket)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string remote_name = 6;
  if (this->remote_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->remote_name());
  }

  // .grpc.channelz.v1.SocketRef ref = 1;
  if (this->has_ref()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ref_);
  }

  // .grpc.channelz.v1.SocketData data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // .grpc.channelz.v1.Address local = 3;
  if (this->has_local()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *local_);
  }

  // .grpc.channelz.v1.Address remote = 4;
  if (this->has_remote()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *remote_);
  }

  // .grpc.channelz.v1.Security security = 5;
  if (this->has_security()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *security_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Socket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.channelz.v1.Socket)
  GOOGLE_DCHECK_NE(&from, this);
  const Socket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Socket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.channelz.v1.Socket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.channelz.v1.Socket)
    MergeFrom(*source);
  }
}

void Socket::MergeFrom(const Socket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.Socket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.remote_name().size() > 0) {

    remote_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remote_name_);
  }
  if (from.has_ref()) {
    mutable_ref()->::grpc::channelz::v1::SocketRef::MergeFrom(from.ref());
  }
  if (from.has_data()) {
    mutable_data()->::grpc::channelz::v1::SocketData::MergeFrom(from.data());
  }
  if (from.has_local()) {
    mutable_local()->::grpc::channelz::v1::Address::MergeFrom(from.local());
  }
  if (from.has_remote()) {
    mutable_remote()->::grpc::channelz::v1::Address::MergeFrom(from.remote());
  }
  if (from.has_security()) {
    mutable_security()->::grpc::channelz::v1::Security::MergeFrom(from.security());
  }
}

void Socket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.channelz.v1.Socket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Socket::CopyFrom(const Socket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.Socket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Socket::IsInitialized() const {
  return true;
}

void Socket::Swap(Socket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Socket::InternalSwap(Socket* other) {
  using std::swap;
  remote_name_.Swap(&other->remote_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ref_, other->ref_);
  swap(data_, other->data_);
  swap(local_, other->local_);
  swap(remote_, other->remote_);
  swap(security_, other->security_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Socket::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SocketData::InitAsDefaultInstance() {
  ::grpc::channelz::v1::_SocketData_default_instance_._instance.get_mutable()->last_local_stream_created_timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::grpc::channelz::v1::_SocketData_default_instance_._instance.get_mutable()->last_remote_stream_created_timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::grpc::channelz::v1::_SocketData_default_instance_._instance.get_mutable()->last_message_sent_timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::grpc::channelz::v1::_SocketData_default_instance_._instance.get_mutable()->last_message_received_timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::grpc::channelz::v1::_SocketData_default_instance_._instance.get_mutable()->local_flow_control_window_ = const_cast< ::google::protobuf::Int64Value*>(
      ::google::protobuf::Int64Value::internal_default_instance());
  ::grpc::channelz::v1::_SocketData_default_instance_._instance.get_mutable()->remote_flow_control_window_ = const_cast< ::google::protobuf::Int64Value*>(
      ::google::protobuf::Int64Value::internal_default_instance());
}
void SocketData::clear_last_local_stream_created_timestamp() {
  if (GetArenaNoVirtual() == NULL && last_local_stream_created_timestamp_ != NULL) {
    delete last_local_stream_created_timestamp_;
  }
  last_local_stream_created_timestamp_ = NULL;
}
void SocketData::clear_last_remote_stream_created_timestamp() {
  if (GetArenaNoVirtual() == NULL && last_remote_stream_created_timestamp_ != NULL) {
    delete last_remote_stream_created_timestamp_;
  }
  last_remote_stream_created_timestamp_ = NULL;
}
void SocketData::clear_last_message_sent_timestamp() {
  if (GetArenaNoVirtual() == NULL && last_message_sent_timestamp_ != NULL) {
    delete last_message_sent_timestamp_;
  }
  last_message_sent_timestamp_ = NULL;
}
void SocketData::clear_last_message_received_timestamp() {
  if (GetArenaNoVirtual() == NULL && last_message_received_timestamp_ != NULL) {
    delete last_message_received_timestamp_;
  }
  last_message_received_timestamp_ = NULL;
}
void SocketData::clear_local_flow_control_window() {
  if (GetArenaNoVirtual() == NULL && local_flow_control_window_ != NULL) {
    delete local_flow_control_window_;
  }
  local_flow_control_window_ = NULL;
}
void SocketData::clear_remote_flow_control_window() {
  if (GetArenaNoVirtual() == NULL && remote_flow_control_window_ != NULL) {
    delete remote_flow_control_window_;
  }
  remote_flow_control_window_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SocketData::kStreamsStartedFieldNumber;
const int SocketData::kStreamsSucceededFieldNumber;
const int SocketData::kStreamsFailedFieldNumber;
const int SocketData::kMessagesSentFieldNumber;
const int SocketData::kMessagesReceivedFieldNumber;
const int SocketData::kKeepAlivesSentFieldNumber;
const int SocketData::kLastLocalStreamCreatedTimestampFieldNumber;
const int SocketData::kLastRemoteStreamCreatedTimestampFieldNumber;
const int SocketData::kLastMessageSentTimestampFieldNumber;
const int SocketData::kLastMessageReceivedTimestampFieldNumber;
const int SocketData::kLocalFlowControlWindowFieldNumber;
const int SocketData::kRemoteFlowControlWindowFieldNumber;
const int SocketData::kOptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SocketData::SocketData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_SocketData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.channelz.v1.SocketData)
}
SocketData::SocketData(const SocketData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      option_(from.option_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_last_local_stream_created_timestamp()) {
    last_local_stream_created_timestamp_ = new ::google::protobuf::Timestamp(*from.last_local_stream_created_timestamp_);
  } else {
    last_local_stream_created_timestamp_ = NULL;
  }
  if (from.has_last_remote_stream_created_timestamp()) {
    last_remote_stream_created_timestamp_ = new ::google::protobuf::Timestamp(*from.last_remote_stream_created_timestamp_);
  } else {
    last_remote_stream_created_timestamp_ = NULL;
  }
  if (from.has_last_message_sent_timestamp()) {
    last_message_sent_timestamp_ = new ::google::protobuf::Timestamp(*from.last_message_sent_timestamp_);
  } else {
    last_message_sent_timestamp_ = NULL;
  }
  if (from.has_last_message_received_timestamp()) {
    last_message_received_timestamp_ = new ::google::protobuf::Timestamp(*from.last_message_received_timestamp_);
  } else {
    last_message_received_timestamp_ = NULL;
  }
  if (from.has_local_flow_control_window()) {
    local_flow_control_window_ = new ::google::protobuf::Int64Value(*from.local_flow_control_window_);
  } else {
    local_flow_control_window_ = NULL;
  }
  if (from.has_remote_flow_control_window()) {
    remote_flow_control_window_ = new ::google::protobuf::Int64Value(*from.remote_flow_control_window_);
  } else {
    remote_flow_control_window_ = NULL;
  }
  ::memcpy(&streams_started_, &from.streams_started_,
    static_cast<size_t>(reinterpret_cast<char*>(&keep_alives_sent_) -
    reinterpret_cast<char*>(&streams_started_)) + sizeof(keep_alives_sent_));
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.SocketData)
}

void SocketData::SharedCtor() {
  ::memset(&last_local_stream_created_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keep_alives_sent_) -
      reinterpret_cast<char*>(&last_local_stream_created_timestamp_)) + sizeof(keep_alives_sent_));
}

SocketData::~SocketData() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.SocketData)
  SharedDtor();
}

void SocketData::SharedDtor() {
  if (this != internal_default_instance()) delete last_local_stream_created_timestamp_;
  if (this != internal_default_instance()) delete last_remote_stream_created_timestamp_;
  if (this != internal_default_instance()) delete last_message_sent_timestamp_;
  if (this != internal_default_instance()) delete last_message_received_timestamp_;
  if (this != internal_default_instance()) delete local_flow_control_window_;
  if (this != internal_default_instance()) delete remote_flow_control_window_;
}

void SocketData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SocketData::descriptor() {
  ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SocketData& SocketData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_SocketData.base);
  return *internal_default_instance();
}


void SocketData::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.SocketData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  option_.Clear();
  if (GetArenaNoVirtual() == NULL && last_local_stream_created_timestamp_ != NULL) {
    delete last_local_stream_created_timestamp_;
  }
  last_local_stream_created_timestamp_ = NULL;
  if (GetArenaNoVirtual() == NULL && last_remote_stream_created_timestamp_ != NULL) {
    delete last_remote_stream_created_timestamp_;
  }
  last_remote_stream_created_timestamp_ = NULL;
  if (GetArenaNoVirtual() == NULL && last_message_sent_timestamp_ != NULL) {
    delete last_message_sent_timestamp_;
  }
  last_message_sent_timestamp_ = NULL;
  if (GetArenaNoVirtual() == NULL && last_message_received_timestamp_ != NULL) {
    delete last_message_received_timestamp_;
  }
  last_message_received_timestamp_ = NULL;
  if (GetArenaNoVirtual() == NULL && local_flow_control_window_ != NULL) {
    delete local_flow_control_window_;
  }
  local_flow_control_window_ = NULL;
  if (GetArenaNoVirtual() == NULL && remote_flow_control_window_ != NULL) {
    delete remote_flow_control_window_;
  }
  remote_flow_control_window_ = NULL;
  ::memset(&streams_started_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keep_alives_sent_) -
      reinterpret_cast<char*>(&streams_started_)) + sizeof(keep_alives_sent_));
  _internal_metadata_.Clear();
}

bool SocketData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.channelz.v1.SocketData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 streams_started = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &streams_started_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 streams_succeeded = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &streams_succeeded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 streams_failed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &streams_failed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 messages_sent = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &messages_sent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 messages_received = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &messages_received_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 keep_alives_sent = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &keep_alives_sent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp last_local_stream_created_timestamp = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_last_local_stream_created_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp last_remote_stream_created_timestamp = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_last_remote_stream_created_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp last_message_sent_timestamp = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_last_message_sent_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp last_message_received_timestamp = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_last_message_received_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int64Value local_flow_control_window = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_local_flow_control_window()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int64Value remote_flow_control_window = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_remote_flow_control_window()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .grpc.channelz.v1.SocketOption option = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_option()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.channelz.v1.SocketData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.channelz.v1.SocketData)
  return false;
#undef DO_
}

void SocketData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.channelz.v1.SocketData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 streams_started = 1;
  if (this->streams_started() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->streams_started(), output);
  }

  // int64 streams_succeeded = 2;
  if (this->streams_succeeded() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->streams_succeeded(), output);
  }

  // int64 streams_failed = 3;
  if (this->streams_failed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->streams_failed(), output);
  }

  // int64 messages_sent = 4;
  if (this->messages_sent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->messages_sent(), output);
  }

  // int64 messages_received = 5;
  if (this->messages_received() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->messages_received(), output);
  }

  // int64 keep_alives_sent = 6;
  if (this->keep_alives_sent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->keep_alives_sent(), output);
  }

  // .google.protobuf.Timestamp last_local_stream_created_timestamp = 7;
  if (this->has_last_local_stream_created_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_last_local_stream_created_timestamp(), output);
  }

  // .google.protobuf.Timestamp last_remote_stream_created_timestamp = 8;
  if (this->has_last_remote_stream_created_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_last_remote_stream_created_timestamp(), output);
  }

  // .google.protobuf.Timestamp last_message_sent_timestamp = 9;
  if (this->has_last_message_sent_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_last_message_sent_timestamp(), output);
  }

  // .google.protobuf.Timestamp last_message_received_timestamp = 10;
  if (this->has_last_message_received_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_last_message_received_timestamp(), output);
  }

  // .google.protobuf.Int64Value local_flow_control_window = 11;
  if (this->has_local_flow_control_window()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_local_flow_control_window(), output);
  }

  // .google.protobuf.Int64Value remote_flow_control_window = 12;
  if (this->has_remote_flow_control_window()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_remote_flow_control_window(), output);
  }

  // repeated .grpc.channelz.v1.SocketOption option = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->option_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13,
      this->option(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:grpc.channelz.v1.SocketData)
}

::google::protobuf::uint8* SocketData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.SocketData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 streams_started = 1;
  if (this->streams_started() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->streams_started(), target);
  }

  // int64 streams_succeeded = 2;
  if (this->streams_succeeded() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->streams_succeeded(), target);
  }

  // int64 streams_failed = 3;
  if (this->streams_failed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->streams_failed(), target);
  }

  // int64 messages_sent = 4;
  if (this->messages_sent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->messages_sent(), target);
  }

  // int64 messages_received = 5;
  if (this->messages_received() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->messages_received(), target);
  }

  // int64 keep_alives_sent = 6;
  if (this->keep_alives_sent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->keep_alives_sent(), target);
  }

  // .google.protobuf.Timestamp last_local_stream_created_timestamp = 7;
  if (this->has_last_local_stream_created_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_last_local_stream_created_timestamp(), deterministic, target);
  }

  // .google.protobuf.Timestamp last_remote_stream_created_timestamp = 8;
  if (this->has_last_remote_stream_created_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_last_remote_stream_created_timestamp(), deterministic, target);
  }

  // .google.protobuf.Timestamp last_message_sent_timestamp = 9;
  if (this->has_last_message_sent_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_last_message_sent_timestamp(), deterministic, target);
  }

  // .google.protobuf.Timestamp last_message_received_timestamp = 10;
  if (this->has_last_message_received_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_last_message_received_timestamp(), deterministic, target);
  }

  // .google.protobuf.Int64Value local_flow_control_window = 11;
  if (this->has_local_flow_control_window()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_local_flow_control_window(), deterministic, target);
  }

  // .google.protobuf.Int64Value remote_flow_control_window = 12;
  if (this->has_remote_flow_control_window()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_remote_flow_control_window(), deterministic, target);
  }

  // repeated .grpc.channelz.v1.SocketOption option = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->option_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->option(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.SocketData)
  return target;
}

size_t SocketData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.SocketData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .grpc.channelz.v1.SocketOption option = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->option_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->option(static_cast<int>(i)));
    }
  }

  // .google.protobuf.Timestamp last_local_stream_created_timestamp = 7;
  if (this->has_last_local_stream_created_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *last_local_stream_created_timestamp_);
  }

  // .google.protobuf.Timestamp last_remote_stream_created_timestamp = 8;
  if (this->has_last_remote_stream_created_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *last_remote_stream_created_timestamp_);
  }

  // .google.protobuf.Timestamp last_message_sent_timestamp = 9;
  if (this->has_last_message_sent_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *last_message_sent_timestamp_);
  }

  // .google.protobuf.Timestamp last_message_received_timestamp = 10;
  if (this->has_last_message_received_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *last_message_received_timestamp_);
  }

  // .google.protobuf.Int64Value local_flow_control_window = 11;
  if (this->has_local_flow_control_window()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *local_flow_control_window_);
  }

  // .google.protobuf.Int64Value remote_flow_control_window = 12;
  if (this->has_remote_flow_control_window()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *remote_flow_control_window_);
  }

  // int64 streams_started = 1;
  if (this->streams_started() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->streams_started());
  }

  // int64 streams_succeeded = 2;
  if (this->streams_succeeded() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->streams_succeeded());
  }

  // int64 streams_failed = 3;
  if (this->streams_failed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->streams_failed());
  }

  // int64 messages_sent = 4;
  if (this->messages_sent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->messages_sent());
  }

  // int64 messages_received = 5;
  if (this->messages_received() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->messages_received());
  }

  // int64 keep_alives_sent = 6;
  if (this->keep_alives_sent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->keep_alives_sent());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SocketData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.channelz.v1.SocketData)
  GOOGLE_DCHECK_NE(&from, this);
  const SocketData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SocketData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.channelz.v1.SocketData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.channelz.v1.SocketData)
    MergeFrom(*source);
  }
}

void SocketData::MergeFrom(const SocketData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.SocketData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  option_.MergeFrom(from.option_);
  if (from.has_last_local_stream_created_timestamp()) {
    mutable_last_local_stream_created_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.last_local_stream_created_timestamp());
  }
  if (from.has_last_remote_stream_created_timestamp()) {
    mutable_last_remote_stream_created_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.last_remote_stream_created_timestamp());
  }
  if (from.has_last_message_sent_timestamp()) {
    mutable_last_message_sent_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.last_message_sent_timestamp());
  }
  if (from.has_last_message_received_timestamp()) {
    mutable_last_message_received_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.last_message_received_timestamp());
  }
  if (from.has_local_flow_control_window()) {
    mutable_local_flow_control_window()->::google::protobuf::Int64Value::MergeFrom(from.local_flow_control_window());
  }
  if (from.has_remote_flow_control_window()) {
    mutable_remote_flow_control_window()->::google::protobuf::Int64Value::MergeFrom(from.remote_flow_control_window());
  }
  if (from.streams_started() != 0) {
    set_streams_started(from.streams_started());
  }
  if (from.streams_succeeded() != 0) {
    set_streams_succeeded(from.streams_succeeded());
  }
  if (from.streams_failed() != 0) {
    set_streams_failed(from.streams_failed());
  }
  if (from.messages_sent() != 0) {
    set_messages_sent(from.messages_sent());
  }
  if (from.messages_received() != 0) {
    set_messages_received(from.messages_received());
  }
  if (from.keep_alives_sent() != 0) {
    set_keep_alives_sent(from.keep_alives_sent());
  }
}

void SocketData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.channelz.v1.SocketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SocketData::CopyFrom(const SocketData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.SocketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketData::IsInitialized() const {
  return true;
}

void SocketData::Swap(SocketData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SocketData::InternalSwap(SocketData* other) {
  using std::swap;
  CastToBase(&option_)->InternalSwap(CastToBase(&other->option_));
  swap(last_local_stream_created_timestamp_, other->last_local_stream_created_timestamp_);
  swap(last_remote_stream_created_timestamp_, other->last_remote_stream_created_timestamp_);
  swap(last_message_sent_timestamp_, other->last_message_sent_timestamp_);
  swap(last_message_received_timestamp_, other->last_message_received_timestamp_);
  swap(local_flow_control_window_, other->local_flow_control_window_);
  swap(remote_flow_control_window_, other->remote_flow_control_window_);
  swap(streams_started_, other->streams_started_);
  swap(streams_succeeded_, other->streams_succeeded_);
  swap(streams_failed_, other->streams_failed_);
  swap(messages_sent_, other->messages_sent_);
  swap(messages_received_, other->messages_received_);
  swap(keep_alives_sent_, other->keep_alives_sent_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SocketData::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Address_TcpIpAddress::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Address_TcpIpAddress::kIpAddressFieldNumber;
const int Address_TcpIpAddress::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Address_TcpIpAddress::Address_TcpIpAddress()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_Address_TcpIpAddress.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.channelz.v1.Address.TcpIpAddress)
}
Address_TcpIpAddress::Address_TcpIpAddress(const Address_TcpIpAddress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip_address().size() > 0) {
    ip_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_address_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.Address.TcpIpAddress)
}

void Address_TcpIpAddress::SharedCtor() {
  ip_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

Address_TcpIpAddress::~Address_TcpIpAddress() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.Address.TcpIpAddress)
  SharedDtor();
}

void Address_TcpIpAddress::SharedDtor() {
  ip_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Address_TcpIpAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Address_TcpIpAddress::descriptor() {
  ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Address_TcpIpAddress& Address_TcpIpAddress::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_Address_TcpIpAddress.base);
  return *internal_default_instance();
}


void Address_TcpIpAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.Address.TcpIpAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  _internal_metadata_.Clear();
}

bool Address_TcpIpAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.channelz.v1.Address.TcpIpAddress)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes ip_address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.channelz.v1.Address.TcpIpAddress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.channelz.v1.Address.TcpIpAddress)
  return false;
#undef DO_
}

void Address_TcpIpAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.channelz.v1.Address.TcpIpAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes ip_address = 1;
  if (this->ip_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->ip_address(), output);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:grpc.channelz.v1.Address.TcpIpAddress)
}

::google::protobuf::uint8* Address_TcpIpAddress::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.Address.TcpIpAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes ip_address = 1;
  if (this->ip_address().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ip_address(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.Address.TcpIpAddress)
  return target;
}

size_t Address_TcpIpAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.Address.TcpIpAddress)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes ip_address = 1;
  if (this->ip_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ip_address());
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Address_TcpIpAddress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.channelz.v1.Address.TcpIpAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const Address_TcpIpAddress* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Address_TcpIpAddress>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.channelz.v1.Address.TcpIpAddress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.channelz.v1.Address.TcpIpAddress)
    MergeFrom(*source);
  }
}

void Address_TcpIpAddress::MergeFrom(const Address_TcpIpAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.Address.TcpIpAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip_address().size() > 0) {

    ip_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_address_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void Address_TcpIpAddress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.channelz.v1.Address.TcpIpAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Address_TcpIpAddress::CopyFrom(const Address_TcpIpAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.Address.TcpIpAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Address_TcpIpAddress::IsInitialized() const {
  return true;
}

void Address_TcpIpAddress::Swap(Address_TcpIpAddress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Address_TcpIpAddress::InternalSwap(Address_TcpIpAddress* other) {
  using std::swap;
  ip_address_.Swap(&other->ip_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Address_TcpIpAddress::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Address_UdsAddress::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Address_UdsAddress::kFilenameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Address_UdsAddress::Address_UdsAddress()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_Address_UdsAddress.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.channelz.v1.Address.UdsAddress)
}
Address_UdsAddress::Address_UdsAddress(const Address_UdsAddress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filename().size() > 0) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.Address.UdsAddress)
}

void Address_UdsAddress::SharedCtor() {
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Address_UdsAddress::~Address_UdsAddress() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.Address.UdsAddress)
  SharedDtor();
}

void Address_UdsAddress::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Address_UdsAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Address_UdsAddress::descriptor() {
  ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Address_UdsAddress& Address_UdsAddress::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_Address_UdsAddress.base);
  return *internal_default_instance();
}


void Address_UdsAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.Address.UdsAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Address_UdsAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.channelz.v1.Address.UdsAddress)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string filename = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "grpc.channelz.v1.Address.UdsAddress.filename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.channelz.v1.Address.UdsAddress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.channelz.v1.Address.UdsAddress)
  return false;
#undef DO_
}

void Address_UdsAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.channelz.v1.Address.UdsAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.Address.UdsAddress.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:grpc.channelz.v1.Address.UdsAddress)
}

::google::protobuf::uint8* Address_UdsAddress::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.Address.UdsAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.Address.UdsAddress.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.Address.UdsAddress)
  return target;
}

size_t Address_UdsAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.Address.UdsAddress)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string filename = 1;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Address_UdsAddress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.channelz.v1.Address.UdsAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const Address_UdsAddress* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Address_UdsAddress>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.channelz.v1.Address.UdsAddress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.channelz.v1.Address.UdsAddress)
    MergeFrom(*source);
  }
}

void Address_UdsAddress::MergeFrom(const Address_UdsAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.Address.UdsAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
}

void Address_UdsAddress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.channelz.v1.Address.UdsAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Address_UdsAddress::CopyFrom(const Address_UdsAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.Address.UdsAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Address_UdsAddress::IsInitialized() const {
  return true;
}

void Address_UdsAddress::Swap(Address_UdsAddress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Address_UdsAddress::InternalSwap(Address_UdsAddress* other) {
  using std::swap;
  filename_.Swap(&other->filename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Address_UdsAddress::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Address_OtherAddress::InitAsDefaultInstance() {
  ::grpc::channelz::v1::_Address_OtherAddress_default_instance_._instance.get_mutable()->value_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}
void Address_OtherAddress::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Address_OtherAddress::kNameFieldNumber;
const int Address_OtherAddress::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Address_OtherAddress::Address_OtherAddress()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_Address_OtherAddress.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.channelz.v1.Address.OtherAddress)
}
Address_OtherAddress::Address_OtherAddress(const Address_OtherAddress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_value()) {
    value_ = new ::google::protobuf::Any(*from.value_);
  } else {
    value_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.Address.OtherAddress)
}

void Address_OtherAddress::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = NULL;
}

Address_OtherAddress::~Address_OtherAddress() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.Address.OtherAddress)
  SharedDtor();
}

void Address_OtherAddress::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void Address_OtherAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Address_OtherAddress::descriptor() {
  ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Address_OtherAddress& Address_OtherAddress::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_Address_OtherAddress.base);
  return *internal_default_instance();
}


void Address_OtherAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.Address.OtherAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
  _internal_metadata_.Clear();
}

bool Address_OtherAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.channelz.v1.Address.OtherAddress)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "grpc.channelz.v1.Address.OtherAddress.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.channelz.v1.Address.OtherAddress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.channelz.v1.Address.OtherAddress)
  return false;
#undef DO_
}

void Address_OtherAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.channelz.v1.Address.OtherAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.Address.OtherAddress.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .google.protobuf.Any value = 2;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:grpc.channelz.v1.Address.OtherAddress)
}

::google::protobuf::uint8* Address_OtherAddress::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.Address.OtherAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.Address.OtherAddress.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .google.protobuf.Any value = 2;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_value(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.Address.OtherAddress)
  return target;
}

size_t Address_OtherAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.Address.OtherAddress)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .google.protobuf.Any value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *value_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Address_OtherAddress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.channelz.v1.Address.OtherAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const Address_OtherAddress* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Address_OtherAddress>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.channelz.v1.Address.OtherAddress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.channelz.v1.Address.OtherAddress)
    MergeFrom(*source);
  }
}

void Address_OtherAddress::MergeFrom(const Address_OtherAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.Address.OtherAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_value()) {
    mutable_value()->::google::protobuf::Any::MergeFrom(from.value());
  }
}

void Address_OtherAddress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.channelz.v1.Address.OtherAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Address_OtherAddress::CopyFrom(const Address_OtherAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.Address.OtherAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Address_OtherAddress::IsInitialized() const {
  return true;
}

void Address_OtherAddress::Swap(Address_OtherAddress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Address_OtherAddress::InternalSwap(Address_OtherAddress* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Address_OtherAddress::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Address::InitAsDefaultInstance() {
  ::grpc::channelz::v1::_Address_default_instance_.tcpip_address_ = const_cast< ::grpc::channelz::v1::Address_TcpIpAddress*>(
      ::grpc::channelz::v1::Address_TcpIpAddress::internal_default_instance());
  ::grpc::channelz::v1::_Address_default_instance_.uds_address_ = const_cast< ::grpc::channelz::v1::Address_UdsAddress*>(
      ::grpc::channelz::v1::Address_UdsAddress::internal_default_instance());
  ::grpc::channelz::v1::_Address_default_instance_.other_address_ = const_cast< ::grpc::channelz::v1::Address_OtherAddress*>(
      ::grpc::channelz::v1::Address_OtherAddress::internal_default_instance());
}
void Address::set_allocated_tcpip_address(::grpc::channelz::v1::Address_TcpIpAddress* tcpip_address) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_address();
  if (tcpip_address) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tcpip_address = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tcpip_address, submessage_arena);
    }
    set_has_tcpip_address();
    address_.tcpip_address_ = tcpip_address;
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.Address.tcpip_address)
}
void Address::set_allocated_uds_address(::grpc::channelz::v1::Address_UdsAddress* uds_address) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_address();
  if (uds_address) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      uds_address = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, uds_address, submessage_arena);
    }
    set_has_uds_address();
    address_.uds_address_ = uds_address;
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.Address.uds_address)
}
void Address::set_allocated_other_address(::grpc::channelz::v1::Address_OtherAddress* other_address) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_address();
  if (other_address) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      other_address = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, other_address, submessage_arena);
    }
    set_has_other_address();
    address_.other_address_ = other_address;
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.Address.other_address)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Address::kTcpipAddressFieldNumber;
const int Address::kUdsAddressFieldNumber;
const int Address::kOtherAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Address::Address()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_Address.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.channelz.v1.Address)
}
Address::Address(const Address& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_address();
  switch (from.address_case()) {
    case kTcpipAddress: {
      mutable_tcpip_address()->::grpc::channelz::v1::Address_TcpIpAddress::MergeFrom(from.tcpip_address());
      break;
    }
    case kUdsAddress: {
      mutable_uds_address()->::grpc::channelz::v1::Address_UdsAddress::MergeFrom(from.uds_address());
      break;
    }
    case kOtherAddress: {
      mutable_other_address()->::grpc::channelz::v1::Address_OtherAddress::MergeFrom(from.other_address());
      break;
    }
    case ADDRESS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.Address)
}

void Address::SharedCtor() {
  clear_has_address();
}

Address::~Address() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.Address)
  SharedDtor();
}

void Address::SharedDtor() {
  if (has_address()) {
    clear_address();
  }
}

void Address::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Address::descriptor() {
  ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Address& Address::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_Address.base);
  return *internal_default_instance();
}


void Address::clear_address() {
// @@protoc_insertion_point(one_of_clear_start:grpc.channelz.v1.Address)
  switch (address_case()) {
    case kTcpipAddress: {
      delete address_.tcpip_address_;
      break;
    }
    case kUdsAddress: {
      delete address_.uds_address_;
      break;
    }
    case kOtherAddress: {
      delete address_.other_address_;
      break;
    }
    case ADDRESS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ADDRESS_NOT_SET;
}


void Address::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.Address)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_address();
  _internal_metadata_.Clear();
}

bool Address::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.channelz.v1.Address)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .grpc.channelz.v1.Address.TcpIpAddress tcpip_address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tcpip_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .grpc.channelz.v1.Address.UdsAddress uds_address = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_uds_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .grpc.channelz.v1.Address.OtherAddress other_address = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_other_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.channelz.v1.Address)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.channelz.v1.Address)
  return false;
#undef DO_
}

void Address::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.channelz.v1.Address)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.Address.TcpIpAddress tcpip_address = 1;
  if (has_tcpip_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_tcpip_address(), output);
  }

  // .grpc.channelz.v1.Address.UdsAddress uds_address = 2;
  if (has_uds_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_uds_address(), output);
  }

  // .grpc.channelz.v1.Address.OtherAddress other_address = 3;
  if (has_other_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_other_address(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:grpc.channelz.v1.Address)
}

::google::protobuf::uint8* Address::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.Address)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.Address.TcpIpAddress tcpip_address = 1;
  if (has_tcpip_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_tcpip_address(), deterministic, target);
  }

  // .grpc.channelz.v1.Address.UdsAddress uds_address = 2;
  if (has_uds_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_uds_address(), deterministic, target);
  }

  // .grpc.channelz.v1.Address.OtherAddress other_address = 3;
  if (has_other_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_other_address(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.Address)
  return target;
}

size_t Address::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.Address)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (address_case()) {
    // .grpc.channelz.v1.Address.TcpIpAddress tcpip_address = 1;
    case kTcpipAddress: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *address_.tcpip_address_);
      break;
    }
    // .grpc.channelz.v1.Address.UdsAddress uds_address = 2;
    case kUdsAddress: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *address_.uds_address_);
      break;
    }
    // .grpc.channelz.v1.Address.OtherAddress other_address = 3;
    case kOtherAddress: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *address_.other_address_);
      break;
    }
    case ADDRESS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Address::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.channelz.v1.Address)
  GOOGLE_DCHECK_NE(&from, this);
  const Address* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Address>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.channelz.v1.Address)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.channelz.v1.Address)
    MergeFrom(*source);
  }
}

void Address::MergeFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.Address)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.address_case()) {
    case kTcpipAddress: {
      mutable_tcpip_address()->::grpc::channelz::v1::Address_TcpIpAddress::MergeFrom(from.tcpip_address());
      break;
    }
    case kUdsAddress: {
      mutable_uds_address()->::grpc::channelz::v1::Address_UdsAddress::MergeFrom(from.uds_address());
      break;
    }
    case kOtherAddress: {
      mutable_other_address()->::grpc::channelz::v1::Address_OtherAddress::MergeFrom(from.other_address());
      break;
    }
    case ADDRESS_NOT_SET: {
      break;
    }
  }
}

void Address::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.channelz.v1.Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Address::CopyFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Address::IsInitialized() const {
  return true;
}

void Address::Swap(Address* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Address::InternalSwap(Address* other) {
  using std::swap;
  swap(address_, other->address_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Address::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Security_Tls::InitAsDefaultInstance() {
  ::grpc::channelz::v1::_Security_Tls_default_instance_.standard_name_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::grpc::channelz::v1::_Security_Tls_default_instance_.other_name_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Security_Tls::kStandardNameFieldNumber;
const int Security_Tls::kOtherNameFieldNumber;
const int Security_Tls::kLocalCertificateFieldNumber;
const int Security_Tls::kRemoteCertificateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Security_Tls::Security_Tls()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_Security_Tls.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.channelz.v1.Security.Tls)
}
Security_Tls::Security_Tls(const Security_Tls& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  local_certificate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.local_certificate().size() > 0) {
    local_certificate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.local_certificate_);
  }
  remote_certificate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.remote_certificate().size() > 0) {
    remote_certificate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remote_certificate_);
  }
  clear_has_cipher_suite();
  switch (from.cipher_suite_case()) {
    case kStandardName: {
      set_standard_name(from.standard_name());
      break;
    }
    case kOtherName: {
      set_other_name(from.other_name());
      break;
    }
    case CIPHER_SUITE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.Security.Tls)
}

void Security_Tls::SharedCtor() {
  local_certificate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remote_certificate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cipher_suite();
}

Security_Tls::~Security_Tls() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.Security.Tls)
  SharedDtor();
}

void Security_Tls::SharedDtor() {
  local_certificate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remote_certificate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_cipher_suite()) {
    clear_cipher_suite();
  }
}

void Security_Tls::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Security_Tls::descriptor() {
  ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Security_Tls& Security_Tls::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_Security_Tls.base);
  return *internal_default_instance();
}


void Security_Tls::clear_cipher_suite() {
// @@protoc_insertion_point(one_of_clear_start:grpc.channelz.v1.Security.Tls)
  switch (cipher_suite_case()) {
    case kStandardName: {
      cipher_suite_.standard_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kOtherName: {
      cipher_suite_.other_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case CIPHER_SUITE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CIPHER_SUITE_NOT_SET;
}


void Security_Tls::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.Security.Tls)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  local_certificate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remote_certificate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_cipher_suite();
  _internal_metadata_.Clear();
}

bool Security_Tls::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.channelz.v1.Security.Tls)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string standard_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_standard_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->standard_name().data(), static_cast<int>(this->standard_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "grpc.channelz.v1.Security.Tls.standard_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string other_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_other_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->other_name().data(), static_cast<int>(this->other_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "grpc.channelz.v1.Security.Tls.other_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes local_certificate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_local_certificate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes remote_certificate = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_remote_certificate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.channelz.v1.Security.Tls)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.channelz.v1.Security.Tls)
  return false;
#undef DO_
}

void Security_Tls::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.channelz.v1.Security.Tls)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string standard_name = 1;
  if (has_standard_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->standard_name().data(), static_cast<int>(this->standard_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.Security.Tls.standard_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->standard_name(), output);
  }

  // string other_name = 2;
  if (has_other_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->other_name().data(), static_cast<int>(this->other_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.Security.Tls.other_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->other_name(), output);
  }

  // bytes local_certificate = 3;
  if (this->local_certificate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->local_certificate(), output);
  }

  // bytes remote_certificate = 4;
  if (this->remote_certificate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->remote_certificate(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:grpc.channelz.v1.Security.Tls)
}

::google::protobuf::uint8* Security_Tls::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.Security.Tls)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string standard_name = 1;
  if (has_standard_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->standard_name().data(), static_cast<int>(this->standard_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.Security.Tls.standard_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->standard_name(), target);
  }

  // string other_name = 2;
  if (has_other_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->other_name().data(), static_cast<int>(this->other_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.Security.Tls.other_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->other_name(), target);
  }

  // bytes local_certificate = 3;
  if (this->local_certificate().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->local_certificate(), target);
  }

  // bytes remote_certificate = 4;
  if (this->remote_certificate().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->remote_certificate(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.Security.Tls)
  return target;
}

size_t Security_Tls::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.Security.Tls)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes local_certificate = 3;
  if (this->local_certificate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->local_certificate());
  }

  // bytes remote_certificate = 4;
  if (this->remote_certificate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->remote_certificate());
  }

  switch (cipher_suite_case()) {
    // string standard_name = 1;
    case kStandardName: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->standard_name());
      break;
    }
    // string other_name = 2;
    case kOtherName: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->other_name());
      break;
    }
    case CIPHER_SUITE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Security_Tls::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.channelz.v1.Security.Tls)
  GOOGLE_DCHECK_NE(&from, this);
  const Security_Tls* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Security_Tls>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.channelz.v1.Security.Tls)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.channelz.v1.Security.Tls)
    MergeFrom(*source);
  }
}

void Security_Tls::MergeFrom(const Security_Tls& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.Security.Tls)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.local_certificate().size() > 0) {

    local_certificate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.local_certificate_);
  }
  if (from.remote_certificate().size() > 0) {

    remote_certificate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remote_certificate_);
  }
  switch (from.cipher_suite_case()) {
    case kStandardName: {
      set_standard_name(from.standard_name());
      break;
    }
    case kOtherName: {
      set_other_name(from.other_name());
      break;
    }
    case CIPHER_SUITE_NOT_SET: {
      break;
    }
  }
}

void Security_Tls::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.channelz.v1.Security.Tls)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Security_Tls::CopyFrom(const Security_Tls& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.Security.Tls)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Security_Tls::IsInitialized() const {
  return true;
}

void Security_Tls::Swap(Security_Tls* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Security_Tls::InternalSwap(Security_Tls* other) {
  using std::swap;
  local_certificate_.Swap(&other->local_certificate_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  remote_certificate_.Swap(&other->remote_certificate_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cipher_suite_, other->cipher_suite_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Security_Tls::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Security_OtherSecurity::InitAsDefaultInstance() {
  ::grpc::channelz::v1::_Security_OtherSecurity_default_instance_._instance.get_mutable()->value_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}
void Security_OtherSecurity::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Security_OtherSecurity::kNameFieldNumber;
const int Security_OtherSecurity::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Security_OtherSecurity::Security_OtherSecurity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_Security_OtherSecurity.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.channelz.v1.Security.OtherSecurity)
}
Security_OtherSecurity::Security_OtherSecurity(const Security_OtherSecurity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_value()) {
    value_ = new ::google::protobuf::Any(*from.value_);
  } else {
    value_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.Security.OtherSecurity)
}

void Security_OtherSecurity::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = NULL;
}

Security_OtherSecurity::~Security_OtherSecurity() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.Security.OtherSecurity)
  SharedDtor();
}

void Security_OtherSecurity::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void Security_OtherSecurity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Security_OtherSecurity::descriptor() {
  ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Security_OtherSecurity& Security_OtherSecurity::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_Security_OtherSecurity.base);
  return *internal_default_instance();
}


void Security_OtherSecurity::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.Security.OtherSecurity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
  _internal_metadata_.Clear();
}

bool Security_OtherSecurity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.channelz.v1.Security.OtherSecurity)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "grpc.channelz.v1.Security.OtherSecurity.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.channelz.v1.Security.OtherSecurity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.channelz.v1.Security.OtherSecurity)
  return false;
#undef DO_
}

void Security_OtherSecurity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.channelz.v1.Security.OtherSecurity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.Security.OtherSecurity.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .google.protobuf.Any value = 2;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:grpc.channelz.v1.Security.OtherSecurity)
}

::google::protobuf::uint8* Security_OtherSecurity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.Security.OtherSecurity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.Security.OtherSecurity.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .google.protobuf.Any value = 2;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_value(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.Security.OtherSecurity)
  return target;
}

size_t Security_OtherSecurity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.Security.OtherSecurity)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .google.protobuf.Any value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *value_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Security_OtherSecurity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.channelz.v1.Security.OtherSecurity)
  GOOGLE_DCHECK_NE(&from, this);
  const Security_OtherSecurity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Security_OtherSecurity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.channelz.v1.Security.OtherSecurity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.channelz.v1.Security.OtherSecurity)
    MergeFrom(*source);
  }
}

void Security_OtherSecurity::MergeFrom(const Security_OtherSecurity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.Security.OtherSecurity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_value()) {
    mutable_value()->::google::protobuf::Any::MergeFrom(from.value());
  }
}

void Security_OtherSecurity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.channelz.v1.Security.OtherSecurity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Security_OtherSecurity::CopyFrom(const Security_OtherSecurity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.Security.OtherSecurity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Security_OtherSecurity::IsInitialized() const {
  return true;
}

void Security_OtherSecurity::Swap(Security_OtherSecurity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Security_OtherSecurity::InternalSwap(Security_OtherSecurity* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Security_OtherSecurity::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Security::InitAsDefaultInstance() {
  ::grpc::channelz::v1::_Security_default_instance_.tls_ = const_cast< ::grpc::channelz::v1::Security_Tls*>(
      ::grpc::channelz::v1::Security_Tls::internal_default_instance());
  ::grpc::channelz::v1::_Security_default_instance_.other_ = const_cast< ::grpc::channelz::v1::Security_OtherSecurity*>(
      ::grpc::channelz::v1::Security_OtherSecurity::internal_default_instance());
}
void Security::set_allocated_tls(::grpc::channelz::v1::Security_Tls* tls) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_model();
  if (tls) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tls = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tls, submessage_arena);
    }
    set_has_tls();
    model_.tls_ = tls;
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.Security.tls)
}
void Security::set_allocated_other(::grpc::channelz::v1::Security_OtherSecurity* other) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_model();
  if (other) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      other = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, other, submessage_arena);
    }
    set_has_other();
    model_.other_ = other;
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.Security.other)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Security::kTlsFieldNumber;
const int Security::kOtherFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Security::Security()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_Security.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.channelz.v1.Security)
}
Security::Security(const Security& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_model();
  switch (from.model_case()) {
    case kTls: {
      mutable_tls()->::grpc::channelz::v1::Security_Tls::MergeFrom(from.tls());
      break;
    }
    case kOther: {
      mutable_other()->::grpc::channelz::v1::Security_OtherSecurity::MergeFrom(from.other());
      break;
    }
    case MODEL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.Security)
}

void Security::SharedCtor() {
  clear_has_model();
}

Security::~Security() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.Security)
  SharedDtor();
}

void Security::SharedDtor() {
  if (has_model()) {
    clear_model();
  }
}

void Security::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Security::descriptor() {
  ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Security& Security::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_Security.base);
  return *internal_default_instance();
}


void Security::clear_model() {
// @@protoc_insertion_point(one_of_clear_start:grpc.channelz.v1.Security)
  switch (model_case()) {
    case kTls: {
      delete model_.tls_;
      break;
    }
    case kOther: {
      delete model_.other_;
      break;
    }
    case MODEL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MODEL_NOT_SET;
}


void Security::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.Security)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_model();
  _internal_metadata_.Clear();
}

bool Security::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.channelz.v1.Security)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .grpc.channelz.v1.Security.Tls tls = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .grpc.channelz.v1.Security.OtherSecurity other = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_other()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.channelz.v1.Security)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.channelz.v1.Security)
  return false;
#undef DO_
}

void Security::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.channelz.v1.Security)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.Security.Tls tls = 1;
  if (has_tls()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_tls(), output);
  }

  // .grpc.channelz.v1.Security.OtherSecurity other = 2;
  if (has_other()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_other(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:grpc.channelz.v1.Security)
}

::google::protobuf::uint8* Security::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.Security)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.Security.Tls tls = 1;
  if (has_tls()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_tls(), deterministic, target);
  }

  // .grpc.channelz.v1.Security.OtherSecurity other = 2;
  if (has_other()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_other(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.Security)
  return target;
}

size_t Security::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.Security)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (model_case()) {
    // .grpc.channelz.v1.Security.Tls tls = 1;
    case kTls: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *model_.tls_);
      break;
    }
    // .grpc.channelz.v1.Security.OtherSecurity other = 2;
    case kOther: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *model_.other_);
      break;
    }
    case MODEL_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Security::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.channelz.v1.Security)
  GOOGLE_DCHECK_NE(&from, this);
  const Security* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Security>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.channelz.v1.Security)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.channelz.v1.Security)
    MergeFrom(*source);
  }
}

void Security::MergeFrom(const Security& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.Security)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.model_case()) {
    case kTls: {
      mutable_tls()->::grpc::channelz::v1::Security_Tls::MergeFrom(from.tls());
      break;
    }
    case kOther: {
      mutable_other()->::grpc::channelz::v1::Security_OtherSecurity::MergeFrom(from.other());
      break;
    }
    case MODEL_NOT_SET: {
      break;
    }
  }
}

void Security::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.channelz.v1.Security)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Security::CopyFrom(const Security& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.Security)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Security::IsInitialized() const {
  return true;
}

void Security::Swap(Security* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Security::InternalSwap(Security* other) {
  using std::swap;
  swap(model_, other->model_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Security::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SocketOption::InitAsDefaultInstance() {
  ::grpc::channelz::v1::_SocketOption_default_instance_._instance.get_mutable()->additional_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}
void SocketOption::clear_additional() {
  if (GetArenaNoVirtual() == NULL && additional_ != NULL) {
    delete additional_;
  }
  additional_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SocketOption::kNameFieldNumber;
const int SocketOption::kValueFieldNumber;
const int SocketOption::kAdditionalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SocketOption::SocketOption()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_SocketOption.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.channelz.v1.SocketOption)
}
SocketOption::SocketOption(const SocketOption& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_additional()) {
    additional_ = new ::google::protobuf::Any(*from.additional_);
  } else {
    additional_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.SocketOption)
}

void SocketOption::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  additional_ = NULL;
}

SocketOption::~SocketOption() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.SocketOption)
  SharedDtor();
}

void SocketOption::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete additional_;
}

void SocketOption::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SocketOption::descriptor() {
  ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SocketOption& SocketOption::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_SocketOption.base);
  return *internal_default_instance();
}


void SocketOption::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.SocketOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && additional_ != NULL) {
    delete additional_;
  }
  additional_ = NULL;
  _internal_metadata_.Clear();
}

bool SocketOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.channelz.v1.SocketOption)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "grpc.channelz.v1.SocketOption.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "grpc.channelz.v1.SocketOption.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any additional = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_additional()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.channelz.v1.SocketOption)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.channelz.v1.SocketOption)
  return false;
#undef DO_
}

void SocketOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.channelz.v1.SocketOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.SocketOption.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.SocketOption.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // .google.protobuf.Any additional = 3;
  if (this->has_additional()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_additional(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:grpc.channelz.v1.SocketOption)
}

::google::protobuf::uint8* SocketOption::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.SocketOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.SocketOption.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.SocketOption.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // .google.protobuf.Any additional = 3;
  if (this->has_additional()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_additional(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.SocketOption)
  return target;
}

size_t SocketOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.SocketOption)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  // .google.protobuf.Any additional = 3;
  if (this->has_additional()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *additional_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SocketOption::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.channelz.v1.SocketOption)
  GOOGLE_DCHECK_NE(&from, this);
  const SocketOption* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SocketOption>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.channelz.v1.SocketOption)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.channelz.v1.SocketOption)
    MergeFrom(*source);
  }
}

void SocketOption::MergeFrom(const SocketOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.SocketOption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_additional()) {
    mutable_additional()->::google::protobuf::Any::MergeFrom(from.additional());
  }
}

void SocketOption::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.channelz.v1.SocketOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SocketOption::CopyFrom(const SocketOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.SocketOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketOption::IsInitialized() const {
  return true;
}

void SocketOption::Swap(SocketOption* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SocketOption::InternalSwap(SocketOption* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(additional_, other->additional_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SocketOption::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SocketOptionTimeout::InitAsDefaultInstance() {
  ::grpc::channelz::v1::_SocketOptionTimeout_default_instance_._instance.get_mutable()->duration_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
}
void SocketOptionTimeout::clear_duration() {
  if (GetArenaNoVirtual() == NULL && duration_ != NULL) {
    delete duration_;
  }
  duration_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SocketOptionTimeout::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SocketOptionTimeout::SocketOptionTimeout()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_SocketOptionTimeout.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.channelz.v1.SocketOptionTimeout)
}
SocketOptionTimeout::SocketOptionTimeout(const SocketOptionTimeout& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_duration()) {
    duration_ = new ::google::protobuf::Duration(*from.duration_);
  } else {
    duration_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.SocketOptionTimeout)
}

void SocketOptionTimeout::SharedCtor() {
  duration_ = NULL;
}

SocketOptionTimeout::~SocketOptionTimeout() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.SocketOptionTimeout)
  SharedDtor();
}

void SocketOptionTimeout::SharedDtor() {
  if (this != internal_default_instance()) delete duration_;
}

void SocketOptionTimeout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SocketOptionTimeout::descriptor() {
  ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SocketOptionTimeout& SocketOptionTimeout::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_SocketOptionTimeout.base);
  return *internal_default_instance();
}


void SocketOptionTimeout::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.SocketOptionTimeout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && duration_ != NULL) {
    delete duration_;
  }
  duration_ = NULL;
  _internal_metadata_.Clear();
}

bool SocketOptionTimeout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.channelz.v1.SocketOptionTimeout)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Duration duration = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_duration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.channelz.v1.SocketOptionTimeout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.channelz.v1.SocketOptionTimeout)
  return false;
#undef DO_
}

void SocketOptionTimeout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.channelz.v1.SocketOptionTimeout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration duration = 1;
  if (this->has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_duration(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:grpc.channelz.v1.SocketOptionTimeout)
}

::google::protobuf::uint8* SocketOptionTimeout::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.SocketOptionTimeout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration duration = 1;
  if (this->has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_duration(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.SocketOptionTimeout)
  return target;
}

size_t SocketOptionTimeout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.SocketOptionTimeout)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.Duration duration = 1;
  if (this->has_duration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *duration_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SocketOptionTimeout::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.channelz.v1.SocketOptionTimeout)
  GOOGLE_DCHECK_NE(&from, this);
  const SocketOptionTimeout* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SocketOptionTimeout>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.channelz.v1.SocketOptionTimeout)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.channelz.v1.SocketOptionTimeout)
    MergeFrom(*source);
  }
}

void SocketOptionTimeout::MergeFrom(const SocketOptionTimeout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.SocketOptionTimeout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_duration()) {
    mutable_duration()->::google::protobuf::Duration::MergeFrom(from.duration());
  }
}

void SocketOptionTimeout::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.channelz.v1.SocketOptionTimeout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SocketOptionTimeout::CopyFrom(const SocketOptionTimeout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.SocketOptionTimeout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketOptionTimeout::IsInitialized() const {
  return true;
}

void SocketOptionTimeout::Swap(SocketOptionTimeout* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SocketOptionTimeout::InternalSwap(SocketOptionTimeout* other) {
  using std::swap;
  swap(duration_, other->duration_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SocketOptionTimeout::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SocketOptionLinger::InitAsDefaultInstance() {
  ::grpc::channelz::v1::_SocketOptionLinger_default_instance_._instance.get_mutable()->duration_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
}
void SocketOptionLinger::clear_duration() {
  if (GetArenaNoVirtual() == NULL && duration_ != NULL) {
    delete duration_;
  }
  duration_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SocketOptionLinger::kActiveFieldNumber;
const int SocketOptionLinger::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SocketOptionLinger::SocketOptionLinger()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_SocketOptionLinger.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.channelz.v1.SocketOptionLinger)
}
SocketOptionLinger::SocketOptionLinger(const SocketOptionLinger& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_duration()) {
    duration_ = new ::google::protobuf::Duration(*from.duration_);
  } else {
    duration_ = NULL;
  }
  active_ = from.active_;
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.SocketOptionLinger)
}

void SocketOptionLinger::SharedCtor() {
  ::memset(&duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(active_));
}

SocketOptionLinger::~SocketOptionLinger() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.SocketOptionLinger)
  SharedDtor();
}

void SocketOptionLinger::SharedDtor() {
  if (this != internal_default_instance()) delete duration_;
}

void SocketOptionLinger::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SocketOptionLinger::descriptor() {
  ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SocketOptionLinger& SocketOptionLinger::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_SocketOptionLinger.base);
  return *internal_default_instance();
}


void SocketOptionLinger::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.SocketOptionLinger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && duration_ != NULL) {
    delete duration_;
  }
  duration_ = NULL;
  active_ = false;
  _internal_metadata_.Clear();
}

bool SocketOptionLinger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.channelz.v1.SocketOptionLinger)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool active = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration duration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_duration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.channelz.v1.SocketOptionLinger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.channelz.v1.SocketOptionLinger)
  return false;
#undef DO_
}

void SocketOptionLinger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.channelz.v1.SocketOptionLinger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool active = 1;
  if (this->active() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  // .google.protobuf.Duration duration = 2;
  if (this->has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_duration(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:grpc.channelz.v1.SocketOptionLinger)
}

::google::protobuf::uint8* SocketOptionLinger::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.SocketOptionLinger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool active = 1;
  if (this->active() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  // .google.protobuf.Duration duration = 2;
  if (this->has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_duration(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.SocketOptionLinger)
  return target;
}

size_t SocketOptionLinger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.SocketOptionLinger)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.Duration duration = 2;
  if (this->has_duration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *duration_);
  }

  // bool active = 1;
  if (this->active() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SocketOptionLinger::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.channelz.v1.SocketOptionLinger)
  GOOGLE_DCHECK_NE(&from, this);
  const SocketOptionLinger* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SocketOptionLinger>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.channelz.v1.SocketOptionLinger)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.channelz.v1.SocketOptionLinger)
    MergeFrom(*source);
  }
}

void SocketOptionLinger::MergeFrom(const SocketOptionLinger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.SocketOptionLinger)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_duration()) {
    mutable_duration()->::google::protobuf::Duration::MergeFrom(from.duration());
  }
  if (from.active() != 0) {
    set_active(from.active());
  }
}

void SocketOptionLinger::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.channelz.v1.SocketOptionLinger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SocketOptionLinger::CopyFrom(const SocketOptionLinger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.SocketOptionLinger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketOptionLinger::IsInitialized() const {
  return true;
}

void SocketOptionLinger::Swap(SocketOptionLinger* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SocketOptionLinger::InternalSwap(SocketOptionLinger* other) {
  using std::swap;
  swap(duration_, other->duration_);
  swap(active_, other->active_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SocketOptionLinger::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SocketOptionTcpInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SocketOptionTcpInfo::kTcpiStateFieldNumber;
const int SocketOptionTcpInfo::kTcpiCaStateFieldNumber;
const int SocketOptionTcpInfo::kTcpiRetransmitsFieldNumber;
const int SocketOptionTcpInfo::kTcpiProbesFieldNumber;
const int SocketOptionTcpInfo::kTcpiBackoffFieldNumber;
const int SocketOptionTcpInfo::kTcpiOptionsFieldNumber;
const int SocketOptionTcpInfo::kTcpiSndWscaleFieldNumber;
const int SocketOptionTcpInfo::kTcpiRcvWscaleFieldNumber;
const int SocketOptionTcpInfo::kTcpiRtoFieldNumber;
const int SocketOptionTcpInfo::kTcpiAtoFieldNumber;
const int SocketOptionTcpInfo::kTcpiSndMssFieldNumber;
const int SocketOptionTcpInfo::kTcpiRcvMssFieldNumber;
const int SocketOptionTcpInfo::kTcpiUnackedFieldNumber;
const int SocketOptionTcpInfo::kTcpiSackedFieldNumber;
const int SocketOptionTcpInfo::kTcpiLostFieldNumber;
const int SocketOptionTcpInfo::kTcpiRetransFieldNumber;
const int SocketOptionTcpInfo::kTcpiFacketsFieldNumber;
const int SocketOptionTcpInfo::kTcpiLastDataSentFieldNumber;
const int SocketOptionTcpInfo::kTcpiLastAckSentFieldNumber;
const int SocketOptionTcpInfo::kTcpiLastDataRecvFieldNumber;
const int SocketOptionTcpInfo::kTcpiLastAckRecvFieldNumber;
const int SocketOptionTcpInfo::kTcpiPmtuFieldNumber;
const int SocketOptionTcpInfo::kTcpiRcvSsthreshFieldNumber;
const int SocketOptionTcpInfo::kTcpiRttFieldNumber;
const int SocketOptionTcpInfo::kTcpiRttvarFieldNumber;
const int SocketOptionTcpInfo::kTcpiSndSsthreshFieldNumber;
const int SocketOptionTcpInfo::kTcpiSndCwndFieldNumber;
const int SocketOptionTcpInfo::kTcpiAdvmssFieldNumber;
const int SocketOptionTcpInfo::kTcpiReorderingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SocketOptionTcpInfo::SocketOptionTcpInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_SocketOptionTcpInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.channelz.v1.SocketOptionTcpInfo)
}
SocketOptionTcpInfo::SocketOptionTcpInfo(const SocketOptionTcpInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tcpi_state_, &from.tcpi_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&tcpi_reordering_) -
    reinterpret_cast<char*>(&tcpi_state_)) + sizeof(tcpi_reordering_));
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.SocketOptionTcpInfo)
}

void SocketOptionTcpInfo::SharedCtor() {
  ::memset(&tcpi_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tcpi_reordering_) -
      reinterpret_cast<char*>(&tcpi_state_)) + sizeof(tcpi_reordering_));
}

SocketOptionTcpInfo::~SocketOptionTcpInfo() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.SocketOptionTcpInfo)
  SharedDtor();
}

void SocketOptionTcpInfo::SharedDtor() {
}

void SocketOptionTcpInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SocketOptionTcpInfo::descriptor() {
  ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SocketOptionTcpInfo& SocketOptionTcpInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_SocketOptionTcpInfo.base);
  return *internal_default_instance();
}


void SocketOptionTcpInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.SocketOptionTcpInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&tcpi_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tcpi_reordering_) -
      reinterpret_cast<char*>(&tcpi_state_)) + sizeof(tcpi_reordering_));
  _internal_metadata_.Clear();
}

bool SocketOptionTcpInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.channelz.v1.SocketOptionTcpInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 tcpi_state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcpi_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tcpi_ca_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcpi_ca_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tcpi_retransmits = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcpi_retransmits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tcpi_probes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcpi_probes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tcpi_backoff = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcpi_backoff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tcpi_options = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcpi_options_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tcpi_snd_wscale = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcpi_snd_wscale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tcpi_rcv_wscale = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcpi_rcv_wscale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tcpi_rto = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcpi_rto_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tcpi_ato = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcpi_ato_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tcpi_snd_mss = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcpi_snd_mss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tcpi_rcv_mss = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcpi_rcv_mss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tcpi_unacked = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcpi_unacked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tcpi_sacked = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcpi_sacked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tcpi_lost = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcpi_lost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tcpi_retrans = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcpi_retrans_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tcpi_fackets = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcpi_fackets_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tcpi_last_data_sent = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcpi_last_data_sent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tcpi_last_ack_sent = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcpi_last_ack_sent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tcpi_last_data_recv = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcpi_last_data_recv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tcpi_last_ack_recv = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcpi_last_ack_recv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tcpi_pmtu = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcpi_pmtu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tcpi_rcv_ssthresh = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcpi_rcv_ssthresh_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tcpi_rtt = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcpi_rtt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tcpi_rttvar = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcpi_rttvar_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tcpi_snd_ssthresh = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcpi_snd_ssthresh_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tcpi_snd_cwnd = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcpi_snd_cwnd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tcpi_advmss = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcpi_advmss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tcpi_reordering = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcpi_reordering_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.channelz.v1.SocketOptionTcpInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.channelz.v1.SocketOptionTcpInfo)
  return false;
#undef DO_
}

void SocketOptionTcpInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.channelz.v1.SocketOptionTcpInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 tcpi_state = 1;
  if (this->tcpi_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tcpi_state(), output);
  }

  // uint32 tcpi_ca_state = 2;
  if (this->tcpi_ca_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tcpi_ca_state(), output);
  }

  // uint32 tcpi_retransmits = 3;
  if (this->tcpi_retransmits() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tcpi_retransmits(), output);
  }

  // uint32 tcpi_probes = 4;
  if (this->tcpi_probes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tcpi_probes(), output);
  }

  // uint32 tcpi_backoff = 5;
  if (this->tcpi_backoff() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tcpi_backoff(), output);
  }

  // uint32 tcpi_options = 6;
  if (this->tcpi_options() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->tcpi_options(), output);
  }

  // uint32 tcpi_snd_wscale = 7;
  if (this->tcpi_snd_wscale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->tcpi_snd_wscale(), output);
  }

  // uint32 tcpi_rcv_wscale = 8;
  if (this->tcpi_rcv_wscale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->tcpi_rcv_wscale(), output);
  }

  // uint32 tcpi_rto = 9;
  if (this->tcpi_rto() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->tcpi_rto(), output);
  }

  // uint32 tcpi_ato = 10;
  if (this->tcpi_ato() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->tcpi_ato(), output);
  }

  // uint32 tcpi_snd_mss = 11;
  if (this->tcpi_snd_mss() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->tcpi_snd_mss(), output);
  }

  // uint32 tcpi_rcv_mss = 12;
  if (this->tcpi_rcv_mss() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->tcpi_rcv_mss(), output);
  }

  // uint32 tcpi_unacked = 13;
  if (this->tcpi_unacked() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->tcpi_unacked(), output);
  }

  // uint32 tcpi_sacked = 14;
  if (this->tcpi_sacked() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->tcpi_sacked(), output);
  }

  // uint32 tcpi_lost = 15;
  if (this->tcpi_lost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->tcpi_lost(), output);
  }

  // uint32 tcpi_retrans = 16;
  if (this->tcpi_retrans() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->tcpi_retrans(), output);
  }

  // uint32 tcpi_fackets = 17;
  if (this->tcpi_fackets() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->tcpi_fackets(), output);
  }

  // uint32 tcpi_last_data_sent = 18;
  if (this->tcpi_last_data_sent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->tcpi_last_data_sent(), output);
  }

  // uint32 tcpi_last_ack_sent = 19;
  if (this->tcpi_last_ack_sent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->tcpi_last_ack_sent(), output);
  }

  // uint32 tcpi_last_data_recv = 20;
  if (this->tcpi_last_data_recv() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->tcpi_last_data_recv(), output);
  }

  // uint32 tcpi_last_ack_recv = 21;
  if (this->tcpi_last_ack_recv() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->tcpi_last_ack_recv(), output);
  }

  // uint32 tcpi_pmtu = 22;
  if (this->tcpi_pmtu() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->tcpi_pmtu(), output);
  }

  // uint32 tcpi_rcv_ssthresh = 23;
  if (this->tcpi_rcv_ssthresh() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->tcpi_rcv_ssthresh(), output);
  }

  // uint32 tcpi_rtt = 24;
  if (this->tcpi_rtt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->tcpi_rtt(), output);
  }

  // uint32 tcpi_rttvar = 25;
  if (this->tcpi_rttvar() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->tcpi_rttvar(), output);
  }

  // uint32 tcpi_snd_ssthresh = 26;
  if (this->tcpi_snd_ssthresh() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->tcpi_snd_ssthresh(), output);
  }

  // uint32 tcpi_snd_cwnd = 27;
  if (this->tcpi_snd_cwnd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->tcpi_snd_cwnd(), output);
  }

  // uint32 tcpi_advmss = 28;
  if (this->tcpi_advmss() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->tcpi_advmss(), output);
  }

  // uint32 tcpi_reordering = 29;
  if (this->tcpi_reordering() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->tcpi_reordering(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:grpc.channelz.v1.SocketOptionTcpInfo)
}

::google::protobuf::uint8* SocketOptionTcpInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.SocketOptionTcpInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 tcpi_state = 1;
  if (this->tcpi_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tcpi_state(), target);
  }

  // uint32 tcpi_ca_state = 2;
  if (this->tcpi_ca_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tcpi_ca_state(), target);
  }

  // uint32 tcpi_retransmits = 3;
  if (this->tcpi_retransmits() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tcpi_retransmits(), target);
  }

  // uint32 tcpi_probes = 4;
  if (this->tcpi_probes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tcpi_probes(), target);
  }

  // uint32 tcpi_backoff = 5;
  if (this->tcpi_backoff() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tcpi_backoff(), target);
  }

  // uint32 tcpi_options = 6;
  if (this->tcpi_options() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->tcpi_options(), target);
  }

  // uint32 tcpi_snd_wscale = 7;
  if (this->tcpi_snd_wscale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->tcpi_snd_wscale(), target);
  }

  // uint32 tcpi_rcv_wscale = 8;
  if (this->tcpi_rcv_wscale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->tcpi_rcv_wscale(), target);
  }

  // uint32 tcpi_rto = 9;
  if (this->tcpi_rto() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->tcpi_rto(), target);
  }

  // uint32 tcpi_ato = 10;
  if (this->tcpi_ato() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->tcpi_ato(), target);
  }

  // uint32 tcpi_snd_mss = 11;
  if (this->tcpi_snd_mss() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->tcpi_snd_mss(), target);
  }

  // uint32 tcpi_rcv_mss = 12;
  if (this->tcpi_rcv_mss() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->tcpi_rcv_mss(), target);
  }

  // uint32 tcpi_unacked = 13;
  if (this->tcpi_unacked() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->tcpi_unacked(), target);
  }

  // uint32 tcpi_sacked = 14;
  if (this->tcpi_sacked() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->tcpi_sacked(), target);
  }

  // uint32 tcpi_lost = 15;
  if (this->tcpi_lost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->tcpi_lost(), target);
  }

  // uint32 tcpi_retrans = 16;
  if (this->tcpi_retrans() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->tcpi_retrans(), target);
  }

  // uint32 tcpi_fackets = 17;
  if (this->tcpi_fackets() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->tcpi_fackets(), target);
  }

  // uint32 tcpi_last_data_sent = 18;
  if (this->tcpi_last_data_sent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->tcpi_last_data_sent(), target);
  }

  // uint32 tcpi_last_ack_sent = 19;
  if (this->tcpi_last_ack_sent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->tcpi_last_ack_sent(), target);
  }

  // uint32 tcpi_last_data_recv = 20;
  if (this->tcpi_last_data_recv() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->tcpi_last_data_recv(), target);
  }

  // uint32 tcpi_last_ack_recv = 21;
  if (this->tcpi_last_ack_recv() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->tcpi_last_ack_recv(), target);
  }

  // uint32 tcpi_pmtu = 22;
  if (this->tcpi_pmtu() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->tcpi_pmtu(), target);
  }

  // uint32 tcpi_rcv_ssthresh = 23;
  if (this->tcpi_rcv_ssthresh() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->tcpi_rcv_ssthresh(), target);
  }

  // uint32 tcpi_rtt = 24;
  if (this->tcpi_rtt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->tcpi_rtt(), target);
  }

  // uint32 tcpi_rttvar = 25;
  if (this->tcpi_rttvar() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->tcpi_rttvar(), target);
  }

  // uint32 tcpi_snd_ssthresh = 26;
  if (this->tcpi_snd_ssthresh() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->tcpi_snd_ssthresh(), target);
  }

  // uint32 tcpi_snd_cwnd = 27;
  if (this->tcpi_snd_cwnd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->tcpi_snd_cwnd(), target);
  }

  // uint32 tcpi_advmss = 28;
  if (this->tcpi_advmss() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->tcpi_advmss(), target);
  }

  // uint32 tcpi_reordering = 29;
  if (this->tcpi_reordering() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->tcpi_reordering(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.SocketOptionTcpInfo)
  return target;
}

size_t SocketOptionTcpInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.SocketOptionTcpInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 tcpi_state = 1;
  if (this->tcpi_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tcpi_state());
  }

  // uint32 tcpi_ca_state = 2;
  if (this->tcpi_ca_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tcpi_ca_state());
  }

  // uint32 tcpi_retransmits = 3;
  if (this->tcpi_retransmits() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tcpi_retransmits());
  }

  // uint32 tcpi_probes = 4;
  if (this->tcpi_probes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tcpi_probes());
  }

  // uint32 tcpi_backoff = 5;
  if (this->tcpi_backoff() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tcpi_backoff());
  }

  // uint32 tcpi_options = 6;
  if (this->tcpi_options() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tcpi_options());
  }

  // uint32 tcpi_snd_wscale = 7;
  if (this->tcpi_snd_wscale() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tcpi_snd_wscale());
  }

  // uint32 tcpi_rcv_wscale = 8;
  if (this->tcpi_rcv_wscale() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tcpi_rcv_wscale());
  }

  // uint32 tcpi_rto = 9;
  if (this->tcpi_rto() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tcpi_rto());
  }

  // uint32 tcpi_ato = 10;
  if (this->tcpi_ato() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tcpi_ato());
  }

  // uint32 tcpi_snd_mss = 11;
  if (this->tcpi_snd_mss() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tcpi_snd_mss());
  }

  // uint32 tcpi_rcv_mss = 12;
  if (this->tcpi_rcv_mss() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tcpi_rcv_mss());
  }

  // uint32 tcpi_unacked = 13;
  if (this->tcpi_unacked() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tcpi_unacked());
  }

  // uint32 tcpi_sacked = 14;
  if (this->tcpi_sacked() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tcpi_sacked());
  }

  // uint32 tcpi_lost = 15;
  if (this->tcpi_lost() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tcpi_lost());
  }

  // uint32 tcpi_retrans = 16;
  if (this->tcpi_retrans() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tcpi_retrans());
  }

  // uint32 tcpi_fackets = 17;
  if (this->tcpi_fackets() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tcpi_fackets());
  }

  // uint32 tcpi_last_data_sent = 18;
  if (this->tcpi_last_data_sent() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tcpi_last_data_sent());
  }

  // uint32 tcpi_last_ack_sent = 19;
  if (this->tcpi_last_ack_sent() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tcpi_last_ack_sent());
  }

  // uint32 tcpi_last_data_recv = 20;
  if (this->tcpi_last_data_recv() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tcpi_last_data_recv());
  }

  // uint32 tcpi_last_ack_recv = 21;
  if (this->tcpi_last_ack_recv() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tcpi_last_ack_recv());
  }

  // uint32 tcpi_pmtu = 22;
  if (this->tcpi_pmtu() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tcpi_pmtu());
  }

  // uint32 tcpi_rcv_ssthresh = 23;
  if (this->tcpi_rcv_ssthresh() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tcpi_rcv_ssthresh());
  }

  // uint32 tcpi_rtt = 24;
  if (this->tcpi_rtt() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tcpi_rtt());
  }

  // uint32 tcpi_rttvar = 25;
  if (this->tcpi_rttvar() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tcpi_rttvar());
  }

  // uint32 tcpi_snd_ssthresh = 26;
  if (this->tcpi_snd_ssthresh() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tcpi_snd_ssthresh());
  }

  // uint32 tcpi_snd_cwnd = 27;
  if (this->tcpi_snd_cwnd() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tcpi_snd_cwnd());
  }

  // uint32 tcpi_advmss = 28;
  if (this->tcpi_advmss() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tcpi_advmss());
  }

  // uint32 tcpi_reordering = 29;
  if (this->tcpi_reordering() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tcpi_reordering());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SocketOptionTcpInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.channelz.v1.SocketOptionTcpInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SocketOptionTcpInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SocketOptionTcpInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.channelz.v1.SocketOptionTcpInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.channelz.v1.SocketOptionTcpInfo)
    MergeFrom(*source);
  }
}

void SocketOptionTcpInfo::MergeFrom(const SocketOptionTcpInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.SocketOptionTcpInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tcpi_state() != 0) {
    set_tcpi_state(from.tcpi_state());
  }
  if (from.tcpi_ca_state() != 0) {
    set_tcpi_ca_state(from.tcpi_ca_state());
  }
  if (from.tcpi_retransmits() != 0) {
    set_tcpi_retransmits(from.tcpi_retransmits());
  }
  if (from.tcpi_probes() != 0) {
    set_tcpi_probes(from.tcpi_probes());
  }
  if (from.tcpi_backoff() != 0) {
    set_tcpi_backoff(from.tcpi_backoff());
  }
  if (from.tcpi_options() != 0) {
    set_tcpi_options(from.tcpi_options());
  }
  if (from.tcpi_snd_wscale() != 0) {
    set_tcpi_snd_wscale(from.tcpi_snd_wscale());
  }
  if (from.tcpi_rcv_wscale() != 0) {
    set_tcpi_rcv_wscale(from.tcpi_rcv_wscale());
  }
  if (from.tcpi_rto() != 0) {
    set_tcpi_rto(from.tcpi_rto());
  }
  if (from.tcpi_ato() != 0) {
    set_tcpi_ato(from.tcpi_ato());
  }
  if (from.tcpi_snd_mss() != 0) {
    set_tcpi_snd_mss(from.tcpi_snd_mss());
  }
  if (from.tcpi_rcv_mss() != 0) {
    set_tcpi_rcv_mss(from.tcpi_rcv_mss());
  }
  if (from.tcpi_unacked() != 0) {
    set_tcpi_unacked(from.tcpi_unacked());
  }
  if (from.tcpi_sacked() != 0) {
    set_tcpi_sacked(from.tcpi_sacked());
  }
  if (from.tcpi_lost() != 0) {
    set_tcpi_lost(from.tcpi_lost());
  }
  if (from.tcpi_retrans() != 0) {
    set_tcpi_retrans(from.tcpi_retrans());
  }
  if (from.tcpi_fackets() != 0) {
    set_tcpi_fackets(from.tcpi_fackets());
  }
  if (from.tcpi_last_data_sent() != 0) {
    set_tcpi_last_data_sent(from.tcpi_last_data_sent());
  }
  if (from.tcpi_last_ack_sent() != 0) {
    set_tcpi_last_ack_sent(from.tcpi_last_ack_sent());
  }
  if (from.tcpi_last_data_recv() != 0) {
    set_tcpi_last_data_recv(from.tcpi_last_data_recv());
  }
  if (from.tcpi_last_ack_recv() != 0) {
    set_tcpi_last_ack_recv(from.tcpi_last_ack_recv());
  }
  if (from.tcpi_pmtu() != 0) {
    set_tcpi_pmtu(from.tcpi_pmtu());
  }
  if (from.tcpi_rcv_ssthresh() != 0) {
    set_tcpi_rcv_ssthresh(from.tcpi_rcv_ssthresh());
  }
  if (from.tcpi_rtt() != 0) {
    set_tcpi_rtt(from.tcpi_rtt());
  }
  if (from.tcpi_rttvar() != 0) {
    set_tcpi_rttvar(from.tcpi_rttvar());
  }
  if (from.tcpi_snd_ssthresh() != 0) {
    set_tcpi_snd_ssthresh(from.tcpi_snd_ssthresh());
  }
  if (from.tcpi_snd_cwnd() != 0) {
    set_tcpi_snd_cwnd(from.tcpi_snd_cwnd());
  }
  if (from.tcpi_advmss() != 0) {
    set_tcpi_advmss(from.tcpi_advmss());
  }
  if (from.tcpi_reordering() != 0) {
    set_tcpi_reordering(from.tcpi_reordering());
  }
}

void SocketOptionTcpInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.channelz.v1.SocketOptionTcpInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SocketOptionTcpInfo::CopyFrom(const SocketOptionTcpInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.SocketOptionTcpInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketOptionTcpInfo::IsInitialized() const {
  return true;
}

void SocketOptionTcpInfo::Swap(SocketOptionTcpInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SocketOptionTcpInfo::InternalSwap(SocketOptionTcpInfo* other) {
  using std::swap;
  swap(tcpi_state_, other->tcpi_state_);
  swap(tcpi_ca_state_, other->tcpi_ca_state_);
  swap(tcpi_retransmits_, other->tcpi_retransmits_);
  swap(tcpi_probes_, other->tcpi_probes_);
  swap(tcpi_backoff_, other->tcpi_backoff_);
  swap(tcpi_options_, other->tcpi_options_);
  swap(tcpi_snd_wscale_, other->tcpi_snd_wscale_);
  swap(tcpi_rcv_wscale_, other->tcpi_rcv_wscale_);
  swap(tcpi_rto_, other->tcpi_rto_);
  swap(tcpi_ato_, other->tcpi_ato_);
  swap(tcpi_snd_mss_, other->tcpi_snd_mss_);
  swap(tcpi_rcv_mss_, other->tcpi_rcv_mss_);
  swap(tcpi_unacked_, other->tcpi_unacked_);
  swap(tcpi_sacked_, other->tcpi_sacked_);
  swap(tcpi_lost_, other->tcpi_lost_);
  swap(tcpi_retrans_, other->tcpi_retrans_);
  swap(tcpi_fackets_, other->tcpi_fackets_);
  swap(tcpi_last_data_sent_, other->tcpi_last_data_sent_);
  swap(tcpi_last_ack_sent_, other->tcpi_last_ack_sent_);
  swap(tcpi_last_data_recv_, other->tcpi_last_data_recv_);
  swap(tcpi_last_ack_recv_, other->tcpi_last_ack_recv_);
  swap(tcpi_pmtu_, other->tcpi_pmtu_);
  swap(tcpi_rcv_ssthresh_, other->tcpi_rcv_ssthresh_);
  swap(tcpi_rtt_, other->tcpi_rtt_);
  swap(tcpi_rttvar_, other->tcpi_rttvar_);
  swap(tcpi_snd_ssthresh_, other->tcpi_snd_ssthresh_);
  swap(tcpi_snd_cwnd_, other->tcpi_snd_cwnd_);
  swap(tcpi_advmss_, other->tcpi_advmss_);
  swap(tcpi_reordering_, other->tcpi_reordering_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SocketOptionTcpInfo::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetTopChannelsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTopChannelsRequest::kStartChannelIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTopChannelsRequest::GetTopChannelsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_GetTopChannelsRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.channelz.v1.GetTopChannelsRequest)
}
GetTopChannelsRequest::GetTopChannelsRequest(const GetTopChannelsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  start_channel_id_ = from.start_channel_id_;
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.GetTopChannelsRequest)
}

void GetTopChannelsRequest::SharedCtor() {
  start_channel_id_ = GOOGLE_LONGLONG(0);
}

GetTopChannelsRequest::~GetTopChannelsRequest() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.GetTopChannelsRequest)
  SharedDtor();
}

void GetTopChannelsRequest::SharedDtor() {
}

void GetTopChannelsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetTopChannelsRequest::descriptor() {
  ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetTopChannelsRequest& GetTopChannelsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_GetTopChannelsRequest.base);
  return *internal_default_instance();
}


void GetTopChannelsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.GetTopChannelsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  start_channel_id_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool GetTopChannelsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.channelz.v1.GetTopChannelsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 start_channel_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.channelz.v1.GetTopChannelsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.channelz.v1.GetTopChannelsRequest)
  return false;
#undef DO_
}

void GetTopChannelsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.channelz.v1.GetTopChannelsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 start_channel_id = 1;
  if (this->start_channel_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->start_channel_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:grpc.channelz.v1.GetTopChannelsRequest)
}

::google::protobuf::uint8* GetTopChannelsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.GetTopChannelsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 start_channel_id = 1;
  if (this->start_channel_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->start_channel_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.GetTopChannelsRequest)
  return target;
}

size_t GetTopChannelsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.GetTopChannelsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 start_channel_id = 1;
  if (this->start_channel_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start_channel_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTopChannelsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.channelz.v1.GetTopChannelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTopChannelsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetTopChannelsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.channelz.v1.GetTopChannelsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.channelz.v1.GetTopChannelsRequest)
    MergeFrom(*source);
  }
}

void GetTopChannelsRequest::MergeFrom(const GetTopChannelsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.GetTopChannelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start_channel_id() != 0) {
    set_start_channel_id(from.start_channel_id());
  }
}

void GetTopChannelsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.channelz.v1.GetTopChannelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTopChannelsRequest::CopyFrom(const GetTopChannelsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.GetTopChannelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTopChannelsRequest::IsInitialized() const {
  return true;
}

void GetTopChannelsRequest::Swap(GetTopChannelsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTopChannelsRequest::InternalSwap(GetTopChannelsRequest* other) {
  using std::swap;
  swap(start_channel_id_, other->start_channel_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetTopChannelsRequest::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetTopChannelsResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTopChannelsResponse::kChannelFieldNumber;
const int GetTopChannelsResponse::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTopChannelsResponse::GetTopChannelsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_GetTopChannelsResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.channelz.v1.GetTopChannelsResponse)
}
GetTopChannelsResponse::GetTopChannelsResponse(const GetTopChannelsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      channel_(from.channel_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  end_ = from.end_;
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.GetTopChannelsResponse)
}

void GetTopChannelsResponse::SharedCtor() {
  end_ = false;
}

GetTopChannelsResponse::~GetTopChannelsResponse() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.GetTopChannelsResponse)
  SharedDtor();
}

void GetTopChannelsResponse::SharedDtor() {
}

void GetTopChannelsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetTopChannelsResponse::descriptor() {
  ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetTopChannelsResponse& GetTopChannelsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_GetTopChannelsResponse.base);
  return *internal_default_instance();
}


void GetTopChannelsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.GetTopChannelsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_.Clear();
  end_ = false;
  _internal_metadata_.Clear();
}

bool GetTopChannelsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.channelz.v1.GetTopChannelsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .grpc.channelz.v1.Channel channel = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_channel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool end = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.channelz.v1.GetTopChannelsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.channelz.v1.GetTopChannelsResponse)
  return false;
#undef DO_
}

void GetTopChannelsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.channelz.v1.GetTopChannelsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .grpc.channelz.v1.Channel channel = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->channel_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->channel(static_cast<int>(i)),
      output);
  }

  // bool end = 2;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->end(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:grpc.channelz.v1.GetTopChannelsResponse)
}

::google::protobuf::uint8* GetTopChannelsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.GetTopChannelsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .grpc.channelz.v1.Channel channel = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->channel_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->channel(static_cast<int>(i)), deterministic, target);
  }

  // bool end = 2;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->end(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.GetTopChannelsResponse)
  return target;
}

size_t GetTopChannelsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.GetTopChannelsResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .grpc.channelz.v1.Channel channel = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->channel_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->channel(static_cast<int>(i)));
    }
  }

  // bool end = 2;
  if (this->end() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTopChannelsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.channelz.v1.GetTopChannelsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTopChannelsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetTopChannelsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.channelz.v1.GetTopChannelsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.channelz.v1.GetTopChannelsResponse)
    MergeFrom(*source);
  }
}

void GetTopChannelsResponse::MergeFrom(const GetTopChannelsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.GetTopChannelsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channel_.MergeFrom(from.channel_);
  if (from.end() != 0) {
    set_end(from.end());
  }
}

void GetTopChannelsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.channelz.v1.GetTopChannelsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTopChannelsResponse::CopyFrom(const GetTopChannelsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.GetTopChannelsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTopChannelsResponse::IsInitialized() const {
  return true;
}

void GetTopChannelsResponse::Swap(GetTopChannelsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTopChannelsResponse::InternalSwap(GetTopChannelsResponse* other) {
  using std::swap;
  CastToBase(&channel_)->InternalSwap(CastToBase(&other->channel_));
  swap(end_, other->end_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetTopChannelsResponse::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetServersRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetServersRequest::kStartServerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetServersRequest::GetServersRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_GetServersRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.channelz.v1.GetServersRequest)
}
GetServersRequest::GetServersRequest(const GetServersRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  start_server_id_ = from.start_server_id_;
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.GetServersRequest)
}

void GetServersRequest::SharedCtor() {
  start_server_id_ = GOOGLE_LONGLONG(0);
}

GetServersRequest::~GetServersRequest() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.GetServersRequest)
  SharedDtor();
}

void GetServersRequest::SharedDtor() {
}

void GetServersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetServersRequest::descriptor() {
  ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetServersRequest& GetServersRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_GetServersRequest.base);
  return *internal_default_instance();
}


void GetServersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.GetServersRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  start_server_id_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool GetServersRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.channelz.v1.GetServersRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 start_server_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.channelz.v1.GetServersRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.channelz.v1.GetServersRequest)
  return false;
#undef DO_
}

void GetServersRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.channelz.v1.GetServersRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 start_server_id = 1;
  if (this->start_server_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->start_server_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:grpc.channelz.v1.GetServersRequest)
}

::google::protobuf::uint8* GetServersRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.GetServersRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 start_server_id = 1;
  if (this->start_server_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->start_server_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.GetServersRequest)
  return target;
}

size_t GetServersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.GetServersRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 start_server_id = 1;
  if (this->start_server_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start_server_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServersRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.channelz.v1.GetServersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServersRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetServersRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.channelz.v1.GetServersRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.channelz.v1.GetServersRequest)
    MergeFrom(*source);
  }
}

void GetServersRequest::MergeFrom(const GetServersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.GetServersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start_server_id() != 0) {
    set_start_server_id(from.start_server_id());
  }
}

void GetServersRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.channelz.v1.GetServersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServersRequest::CopyFrom(const GetServersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.GetServersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServersRequest::IsInitialized() const {
  return true;
}

void GetServersRequest::Swap(GetServersRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetServersRequest::InternalSwap(GetServersRequest* other) {
  using std::swap;
  swap(start_server_id_, other->start_server_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetServersRequest::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetServersResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetServersResponse::kServerFieldNumber;
const int GetServersResponse::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetServersResponse::GetServersResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_GetServersResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.channelz.v1.GetServersResponse)
}
GetServersResponse::GetServersResponse(const GetServersResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      server_(from.server_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  end_ = from.end_;
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.GetServersResponse)
}

void GetServersResponse::SharedCtor() {
  end_ = false;
}

GetServersResponse::~GetServersResponse() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.GetServersResponse)
  SharedDtor();
}

void GetServersResponse::SharedDtor() {
}

void GetServersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetServersResponse::descriptor() {
  ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetServersResponse& GetServersResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_GetServersResponse.base);
  return *internal_default_instance();
}


void GetServersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.GetServersResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_.Clear();
  end_ = false;
  _internal_metadata_.Clear();
}

bool GetServersResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.channelz.v1.GetServersResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .grpc.channelz.v1.Server server = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool end = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.channelz.v1.GetServersResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.channelz.v1.GetServersResponse)
  return false;
#undef DO_
}

void GetServersResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.channelz.v1.GetServersResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .grpc.channelz.v1.Server server = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->server_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->server(static_cast<int>(i)),
      output);
  }

  // bool end = 2;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->end(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:grpc.channelz.v1.GetServersResponse)
}

::google::protobuf::uint8* GetServersResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.GetServersResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .grpc.channelz.v1.Server server = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->server_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->server(static_cast<int>(i)), deterministic, target);
  }

  // bool end = 2;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->end(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.GetServersResponse)
  return target;
}

size_t GetServersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.GetServersResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .grpc.channelz.v1.Server server = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->server_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->server(static_cast<int>(i)));
    }
  }

  // bool end = 2;
  if (this->end() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServersResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.channelz.v1.GetServersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServersResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetServersResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.channelz.v1.GetServersResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.channelz.v1.GetServersResponse)
    MergeFrom(*source);
  }
}

void GetServersResponse::MergeFrom(const GetServersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.GetServersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  server_.MergeFrom(from.server_);
  if (from.end() != 0) {
    set_end(from.end());
  }
}

void GetServersResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.channelz.v1.GetServersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServersResponse::CopyFrom(const GetServersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.GetServersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServersResponse::IsInitialized() const {
  return true;
}

void GetServersResponse::Swap(GetServersResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetServersResponse::InternalSwap(GetServersResponse* other) {
  using std::swap;
  CastToBase(&server_)->InternalSwap(CastToBase(&other->server_));
  swap(end_, other->end_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetServersResponse::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetServerSocketsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetServerSocketsRequest::kServerIdFieldNumber;
const int GetServerSocketsRequest::kStartSocketIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetServerSocketsRequest::GetServerSocketsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_GetServerSocketsRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.channelz.v1.GetServerSocketsRequest)
}
GetServerSocketsRequest::GetServerSocketsRequest(const GetServerSocketsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&server_id_, &from.server_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&start_socket_id_) -
    reinterpret_cast<char*>(&server_id_)) + sizeof(start_socket_id_));
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.GetServerSocketsRequest)
}

void GetServerSocketsRequest::SharedCtor() {
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_socket_id_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(start_socket_id_));
}

GetServerSocketsRequest::~GetServerSocketsRequest() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.GetServerSocketsRequest)
  SharedDtor();
}

void GetServerSocketsRequest::SharedDtor() {
}

void GetServerSocketsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetServerSocketsRequest::descriptor() {
  ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetServerSocketsRequest& GetServerSocketsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_GetServerSocketsRequest.base);
  return *internal_default_instance();
}


void GetServerSocketsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.GetServerSocketsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_socket_id_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(start_socket_id_));
  _internal_metadata_.Clear();
}

bool GetServerSocketsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.channelz.v1.GetServerSocketsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 server_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 start_socket_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_socket_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.channelz.v1.GetServerSocketsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.channelz.v1.GetServerSocketsRequest)
  return false;
#undef DO_
}

void GetServerSocketsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.channelz.v1.GetServerSocketsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 server_id = 1;
  if (this->server_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->server_id(), output);
  }

  // int64 start_socket_id = 2;
  if (this->start_socket_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->start_socket_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:grpc.channelz.v1.GetServerSocketsRequest)
}

::google::protobuf::uint8* GetServerSocketsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.GetServerSocketsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 server_id = 1;
  if (this->server_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->server_id(), target);
  }

  // int64 start_socket_id = 2;
  if (this->start_socket_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->start_socket_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.GetServerSocketsRequest)
  return target;
}

size_t GetServerSocketsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.GetServerSocketsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->server_id());
  }

  // int64 start_socket_id = 2;
  if (this->start_socket_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start_socket_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServerSocketsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.channelz.v1.GetServerSocketsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServerSocketsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetServerSocketsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.channelz.v1.GetServerSocketsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.channelz.v1.GetServerSocketsRequest)
    MergeFrom(*source);
  }
}

void GetServerSocketsRequest::MergeFrom(const GetServerSocketsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.GetServerSocketsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_id() != 0) {
    set_server_id(from.server_id());
  }
  if (from.start_socket_id() != 0) {
    set_start_socket_id(from.start_socket_id());
  }
}

void GetServerSocketsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.channelz.v1.GetServerSocketsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServerSocketsRequest::CopyFrom(const GetServerSocketsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.GetServerSocketsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServerSocketsRequest::IsInitialized() const {
  return true;
}

void GetServerSocketsRequest::Swap(GetServerSocketsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetServerSocketsRequest::InternalSwap(GetServerSocketsRequest* other) {
  using std::swap;
  swap(server_id_, other->server_id_);
  swap(start_socket_id_, other->start_socket_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetServerSocketsRequest::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetServerSocketsResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetServerSocketsResponse::kSocketRefFieldNumber;
const int GetServerSocketsResponse::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetServerSocketsResponse::GetServerSocketsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_GetServerSocketsResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.channelz.v1.GetServerSocketsResponse)
}
GetServerSocketsResponse::GetServerSocketsResponse(const GetServerSocketsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      socket_ref_(from.socket_ref_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  end_ = from.end_;
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.GetServerSocketsResponse)
}

void GetServerSocketsResponse::SharedCtor() {
  end_ = false;
}

GetServerSocketsResponse::~GetServerSocketsResponse() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.GetServerSocketsResponse)
  SharedDtor();
}

void GetServerSocketsResponse::SharedDtor() {
}

void GetServerSocketsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetServerSocketsResponse::descriptor() {
  ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetServerSocketsResponse& GetServerSocketsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_GetServerSocketsResponse.base);
  return *internal_default_instance();
}


void GetServerSocketsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.GetServerSocketsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  socket_ref_.Clear();
  end_ = false;
  _internal_metadata_.Clear();
}

bool GetServerSocketsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.channelz.v1.GetServerSocketsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .grpc.channelz.v1.SocketRef socket_ref = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_socket_ref()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool end = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.channelz.v1.GetServerSocketsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.channelz.v1.GetServerSocketsResponse)
  return false;
#undef DO_
}

void GetServerSocketsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.channelz.v1.GetServerSocketsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .grpc.channelz.v1.SocketRef socket_ref = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->socket_ref_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->socket_ref(static_cast<int>(i)),
      output);
  }

  // bool end = 2;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->end(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:grpc.channelz.v1.GetServerSocketsResponse)
}

::google::protobuf::uint8* GetServerSocketsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.GetServerSocketsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .grpc.channelz.v1.SocketRef socket_ref = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->socket_ref_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->socket_ref(static_cast<int>(i)), deterministic, target);
  }

  // bool end = 2;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->end(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.GetServerSocketsResponse)
  return target;
}

size_t GetServerSocketsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.GetServerSocketsResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .grpc.channelz.v1.SocketRef socket_ref = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->socket_ref_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->socket_ref(static_cast<int>(i)));
    }
  }

  // bool end = 2;
  if (this->end() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServerSocketsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.channelz.v1.GetServerSocketsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServerSocketsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetServerSocketsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.channelz.v1.GetServerSocketsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.channelz.v1.GetServerSocketsResponse)
    MergeFrom(*source);
  }
}

void GetServerSocketsResponse::MergeFrom(const GetServerSocketsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.GetServerSocketsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  socket_ref_.MergeFrom(from.socket_ref_);
  if (from.end() != 0) {
    set_end(from.end());
  }
}

void GetServerSocketsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.channelz.v1.GetServerSocketsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServerSocketsResponse::CopyFrom(const GetServerSocketsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.GetServerSocketsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServerSocketsResponse::IsInitialized() const {
  return true;
}

void GetServerSocketsResponse::Swap(GetServerSocketsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetServerSocketsResponse::InternalSwap(GetServerSocketsResponse* other) {
  using std::swap;
  CastToBase(&socket_ref_)->InternalSwap(CastToBase(&other->socket_ref_));
  swap(end_, other->end_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetServerSocketsResponse::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetChannelRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetChannelRequest::kChannelIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetChannelRequest::GetChannelRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_GetChannelRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.channelz.v1.GetChannelRequest)
}
GetChannelRequest::GetChannelRequest(const GetChannelRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_id_ = from.channel_id_;
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.GetChannelRequest)
}

void GetChannelRequest::SharedCtor() {
  channel_id_ = GOOGLE_LONGLONG(0);
}

GetChannelRequest::~GetChannelRequest() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.GetChannelRequest)
  SharedDtor();
}

void GetChannelRequest::SharedDtor() {
}

void GetChannelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetChannelRequest::descriptor() {
  ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetChannelRequest& GetChannelRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_GetChannelRequest.base);
  return *internal_default_instance();
}


void GetChannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.GetChannelRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_id_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool GetChannelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.channelz.v1.GetChannelRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 channel_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.channelz.v1.GetChannelRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.channelz.v1.GetChannelRequest)
  return false;
#undef DO_
}

void GetChannelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.channelz.v1.GetChannelRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 channel_id = 1;
  if (this->channel_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->channel_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:grpc.channelz.v1.GetChannelRequest)
}

::google::protobuf::uint8* GetChannelRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.GetChannelRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 channel_id = 1;
  if (this->channel_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->channel_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.GetChannelRequest)
  return target;
}

size_t GetChannelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.GetChannelRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 channel_id = 1;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->channel_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetChannelRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.channelz.v1.GetChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetChannelRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetChannelRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.channelz.v1.GetChannelRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.channelz.v1.GetChannelRequest)
    MergeFrom(*source);
  }
}

void GetChannelRequest::MergeFrom(const GetChannelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.GetChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel_id() != 0) {
    set_channel_id(from.channel_id());
  }
}

void GetChannelRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.channelz.v1.GetChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChannelRequest::CopyFrom(const GetChannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.GetChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChannelRequest::IsInitialized() const {
  return true;
}

void GetChannelRequest::Swap(GetChannelRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetChannelRequest::InternalSwap(GetChannelRequest* other) {
  using std::swap;
  swap(channel_id_, other->channel_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetChannelRequest::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetChannelResponse::InitAsDefaultInstance() {
  ::grpc::channelz::v1::_GetChannelResponse_default_instance_._instance.get_mutable()->channel_ = const_cast< ::grpc::channelz::v1::Channel*>(
      ::grpc::channelz::v1::Channel::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetChannelResponse::kChannelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetChannelResponse::GetChannelResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_GetChannelResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.channelz.v1.GetChannelResponse)
}
GetChannelResponse::GetChannelResponse(const GetChannelResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_channel()) {
    channel_ = new ::grpc::channelz::v1::Channel(*from.channel_);
  } else {
    channel_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.GetChannelResponse)
}

void GetChannelResponse::SharedCtor() {
  channel_ = NULL;
}

GetChannelResponse::~GetChannelResponse() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.GetChannelResponse)
  SharedDtor();
}

void GetChannelResponse::SharedDtor() {
  if (this != internal_default_instance()) delete channel_;
}

void GetChannelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetChannelResponse::descriptor() {
  ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetChannelResponse& GetChannelResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_GetChannelResponse.base);
  return *internal_default_instance();
}


void GetChannelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.GetChannelResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && channel_ != NULL) {
    delete channel_;
  }
  channel_ = NULL;
  _internal_metadata_.Clear();
}

bool GetChannelResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.channelz.v1.GetChannelResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .grpc.channelz.v1.Channel channel = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_channel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.channelz.v1.GetChannelResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.channelz.v1.GetChannelResponse)
  return false;
#undef DO_
}

void GetChannelResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.channelz.v1.GetChannelResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.Channel channel = 1;
  if (this->has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_channel(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:grpc.channelz.v1.GetChannelResponse)
}

::google::protobuf::uint8* GetChannelResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.GetChannelResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.Channel channel = 1;
  if (this->has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_channel(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.GetChannelResponse)
  return target;
}

size_t GetChannelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.GetChannelResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .grpc.channelz.v1.Channel channel = 1;
  if (this->has_channel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *channel_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetChannelResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.channelz.v1.GetChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetChannelResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetChannelResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.channelz.v1.GetChannelResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.channelz.v1.GetChannelResponse)
    MergeFrom(*source);
  }
}

void GetChannelResponse::MergeFrom(const GetChannelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.GetChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_channel()) {
    mutable_channel()->::grpc::channelz::v1::Channel::MergeFrom(from.channel());
  }
}

void GetChannelResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.channelz.v1.GetChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChannelResponse::CopyFrom(const GetChannelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.GetChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChannelResponse::IsInitialized() const {
  return true;
}

void GetChannelResponse::Swap(GetChannelResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetChannelResponse::InternalSwap(GetChannelResponse* other) {
  using std::swap;
  swap(channel_, other->channel_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetChannelResponse::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetSubchannelRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetSubchannelRequest::kSubchannelIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetSubchannelRequest::GetSubchannelRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_GetSubchannelRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.channelz.v1.GetSubchannelRequest)
}
GetSubchannelRequest::GetSubchannelRequest(const GetSubchannelRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subchannel_id_ = from.subchannel_id_;
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.GetSubchannelRequest)
}

void GetSubchannelRequest::SharedCtor() {
  subchannel_id_ = GOOGLE_LONGLONG(0);
}

GetSubchannelRequest::~GetSubchannelRequest() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.GetSubchannelRequest)
  SharedDtor();
}

void GetSubchannelRequest::SharedDtor() {
}

void GetSubchannelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetSubchannelRequest::descriptor() {
  ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetSubchannelRequest& GetSubchannelRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_GetSubchannelRequest.base);
  return *internal_default_instance();
}


void GetSubchannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.GetSubchannelRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subchannel_id_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool GetSubchannelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.channelz.v1.GetSubchannelRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 subchannel_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &subchannel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.channelz.v1.GetSubchannelRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.channelz.v1.GetSubchannelRequest)
  return false;
#undef DO_
}

void GetSubchannelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.channelz.v1.GetSubchannelRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 subchannel_id = 1;
  if (this->subchannel_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->subchannel_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:grpc.channelz.v1.GetSubchannelRequest)
}

::google::protobuf::uint8* GetSubchannelRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.GetSubchannelRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 subchannel_id = 1;
  if (this->subchannel_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->subchannel_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.GetSubchannelRequest)
  return target;
}

size_t GetSubchannelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.GetSubchannelRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 subchannel_id = 1;
  if (this->subchannel_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->subchannel_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSubchannelRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.channelz.v1.GetSubchannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSubchannelRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetSubchannelRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.channelz.v1.GetSubchannelRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.channelz.v1.GetSubchannelRequest)
    MergeFrom(*source);
  }
}

void GetSubchannelRequest::MergeFrom(const GetSubchannelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.GetSubchannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.subchannel_id() != 0) {
    set_subchannel_id(from.subchannel_id());
  }
}

void GetSubchannelRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.channelz.v1.GetSubchannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSubchannelRequest::CopyFrom(const GetSubchannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.GetSubchannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSubchannelRequest::IsInitialized() const {
  return true;
}

void GetSubchannelRequest::Swap(GetSubchannelRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetSubchannelRequest::InternalSwap(GetSubchannelRequest* other) {
  using std::swap;
  swap(subchannel_id_, other->subchannel_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetSubchannelRequest::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetSubchannelResponse::InitAsDefaultInstance() {
  ::grpc::channelz::v1::_GetSubchannelResponse_default_instance_._instance.get_mutable()->subchannel_ = const_cast< ::grpc::channelz::v1::Subchannel*>(
      ::grpc::channelz::v1::Subchannel::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetSubchannelResponse::kSubchannelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetSubchannelResponse::GetSubchannelResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_GetSubchannelResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.channelz.v1.GetSubchannelResponse)
}
GetSubchannelResponse::GetSubchannelResponse(const GetSubchannelResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_subchannel()) {
    subchannel_ = new ::grpc::channelz::v1::Subchannel(*from.subchannel_);
  } else {
    subchannel_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.GetSubchannelResponse)
}

void GetSubchannelResponse::SharedCtor() {
  subchannel_ = NULL;
}

GetSubchannelResponse::~GetSubchannelResponse() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.GetSubchannelResponse)
  SharedDtor();
}

void GetSubchannelResponse::SharedDtor() {
  if (this != internal_default_instance()) delete subchannel_;
}

void GetSubchannelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetSubchannelResponse::descriptor() {
  ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetSubchannelResponse& GetSubchannelResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_GetSubchannelResponse.base);
  return *internal_default_instance();
}


void GetSubchannelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.GetSubchannelResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && subchannel_ != NULL) {
    delete subchannel_;
  }
  subchannel_ = NULL;
  _internal_metadata_.Clear();
}

bool GetSubchannelResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.channelz.v1.GetSubchannelResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .grpc.channelz.v1.Subchannel subchannel = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_subchannel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.channelz.v1.GetSubchannelResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.channelz.v1.GetSubchannelResponse)
  return false;
#undef DO_
}

void GetSubchannelResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.channelz.v1.GetSubchannelResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.Subchannel subchannel = 1;
  if (this->has_subchannel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_subchannel(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:grpc.channelz.v1.GetSubchannelResponse)
}

::google::protobuf::uint8* GetSubchannelResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.GetSubchannelResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.Subchannel subchannel = 1;
  if (this->has_subchannel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_subchannel(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.GetSubchannelResponse)
  return target;
}

size_t GetSubchannelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.GetSubchannelResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .grpc.channelz.v1.Subchannel subchannel = 1;
  if (this->has_subchannel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *subchannel_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSubchannelResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.channelz.v1.GetSubchannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSubchannelResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetSubchannelResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.channelz.v1.GetSubchannelResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.channelz.v1.GetSubchannelResponse)
    MergeFrom(*source);
  }
}

void GetSubchannelResponse::MergeFrom(const GetSubchannelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.GetSubchannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_subchannel()) {
    mutable_subchannel()->::grpc::channelz::v1::Subchannel::MergeFrom(from.subchannel());
  }
}

void GetSubchannelResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.channelz.v1.GetSubchannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSubchannelResponse::CopyFrom(const GetSubchannelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.GetSubchannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSubchannelResponse::IsInitialized() const {
  return true;
}

void GetSubchannelResponse::Swap(GetSubchannelResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetSubchannelResponse::InternalSwap(GetSubchannelResponse* other) {
  using std::swap;
  swap(subchannel_, other->subchannel_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetSubchannelResponse::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetSocketRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetSocketRequest::kSocketIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetSocketRequest::GetSocketRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_GetSocketRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.channelz.v1.GetSocketRequest)
}
GetSocketRequest::GetSocketRequest(const GetSocketRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  socket_id_ = from.socket_id_;
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.GetSocketRequest)
}

void GetSocketRequest::SharedCtor() {
  socket_id_ = GOOGLE_LONGLONG(0);
}

GetSocketRequest::~GetSocketRequest() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.GetSocketRequest)
  SharedDtor();
}

void GetSocketRequest::SharedDtor() {
}

void GetSocketRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetSocketRequest::descriptor() {
  ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetSocketRequest& GetSocketRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_GetSocketRequest.base);
  return *internal_default_instance();
}


void GetSocketRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.GetSocketRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  socket_id_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool GetSocketRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.channelz.v1.GetSocketRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 socket_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &socket_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.channelz.v1.GetSocketRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.channelz.v1.GetSocketRequest)
  return false;
#undef DO_
}

void GetSocketRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.channelz.v1.GetSocketRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 socket_id = 1;
  if (this->socket_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->socket_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:grpc.channelz.v1.GetSocketRequest)
}

::google::protobuf::uint8* GetSocketRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.GetSocketRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 socket_id = 1;
  if (this->socket_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->socket_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.GetSocketRequest)
  return target;
}

size_t GetSocketRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.GetSocketRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 socket_id = 1;
  if (this->socket_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->socket_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSocketRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.channelz.v1.GetSocketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSocketRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetSocketRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.channelz.v1.GetSocketRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.channelz.v1.GetSocketRequest)
    MergeFrom(*source);
  }
}

void GetSocketRequest::MergeFrom(const GetSocketRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.GetSocketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.socket_id() != 0) {
    set_socket_id(from.socket_id());
  }
}

void GetSocketRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.channelz.v1.GetSocketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSocketRequest::CopyFrom(const GetSocketRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.GetSocketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSocketRequest::IsInitialized() const {
  return true;
}

void GetSocketRequest::Swap(GetSocketRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetSocketRequest::InternalSwap(GetSocketRequest* other) {
  using std::swap;
  swap(socket_id_, other->socket_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetSocketRequest::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetSocketResponse::InitAsDefaultInstance() {
  ::grpc::channelz::v1::_GetSocketResponse_default_instance_._instance.get_mutable()->socket_ = const_cast< ::grpc::channelz::v1::Socket*>(
      ::grpc::channelz::v1::Socket::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetSocketResponse::kSocketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetSocketResponse::GetSocketResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_GetSocketResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.channelz.v1.GetSocketResponse)
}
GetSocketResponse::GetSocketResponse(const GetSocketResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_socket()) {
    socket_ = new ::grpc::channelz::v1::Socket(*from.socket_);
  } else {
    socket_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.GetSocketResponse)
}

void GetSocketResponse::SharedCtor() {
  socket_ = NULL;
}

GetSocketResponse::~GetSocketResponse() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.GetSocketResponse)
  SharedDtor();
}

void GetSocketResponse::SharedDtor() {
  if (this != internal_default_instance()) delete socket_;
}

void GetSocketResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetSocketResponse::descriptor() {
  ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetSocketResponse& GetSocketResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::scc_info_GetSocketResponse.base);
  return *internal_default_instance();
}


void GetSocketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.GetSocketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && socket_ != NULL) {
    delete socket_;
  }
  socket_ = NULL;
  _internal_metadata_.Clear();
}

bool GetSocketResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.channelz.v1.GetSocketResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .grpc.channelz.v1.Socket socket = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_socket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.channelz.v1.GetSocketResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.channelz.v1.GetSocketResponse)
  return false;
#undef DO_
}

void GetSocketResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.channelz.v1.GetSocketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.Socket socket = 1;
  if (this->has_socket()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_socket(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:grpc.channelz.v1.GetSocketResponse)
}

::google::protobuf::uint8* GetSocketResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.GetSocketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.Socket socket = 1;
  if (this->has_socket()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_socket(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.GetSocketResponse)
  return target;
}

size_t GetSocketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.GetSocketResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .grpc.channelz.v1.Socket socket = 1;
  if (this->has_socket()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *socket_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSocketResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.channelz.v1.GetSocketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSocketResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetSocketResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.channelz.v1.GetSocketResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.channelz.v1.GetSocketResponse)
    MergeFrom(*source);
  }
}

void GetSocketResponse::MergeFrom(const GetSocketResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.GetSocketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_socket()) {
    mutable_socket()->::grpc::channelz::v1::Socket::MergeFrom(from.socket());
  }
}

void GetSocketResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.channelz.v1.GetSocketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSocketResponse::CopyFrom(const GetSocketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.GetSocketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSocketResponse::IsInitialized() const {
  return true;
}

void GetSocketResponse::Swap(GetSocketResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetSocketResponse::InternalSwap(GetSocketResponse* other) {
  using std::swap;
  swap(socket_, other->socket_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetSocketResponse::GetMetadata() const {
  protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace channelz
}  // namespace grpc
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::grpc::channelz::v1::Channel* Arena::CreateMaybeMessage< ::grpc::channelz::v1::Channel >(Arena* arena) {
  return Arena::CreateInternal< ::grpc::channelz::v1::Channel >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::grpc::channelz::v1::Subchannel* Arena::CreateMaybeMessage< ::grpc::channelz::v1::Subchannel >(Arena* arena) {
  return Arena::CreateInternal< ::grpc::channelz::v1::Subchannel >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::grpc::channelz::v1::ChannelConnectivityState* Arena::CreateMaybeMessage< ::grpc::channelz::v1::ChannelConnectivityState >(Arena* arena) {
  return Arena::CreateInternal< ::grpc::channelz::v1::ChannelConnectivityState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::grpc::channelz::v1::ChannelData* Arena::CreateMaybeMessage< ::grpc::channelz::v1::ChannelData >(Arena* arena) {
  return Arena::CreateInternal< ::grpc::channelz::v1::ChannelData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::grpc::channelz::v1::ChannelTraceEvent* Arena::CreateMaybeMessage< ::grpc::channelz::v1::ChannelTraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::grpc::channelz::v1::ChannelTraceEvent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::grpc::channelz::v1::ChannelTrace* Arena::CreateMaybeMessage< ::grpc::channelz::v1::ChannelTrace >(Arena* arena) {
  return Arena::CreateInternal< ::grpc::channelz::v1::ChannelTrace >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::grpc::channelz::v1::ChannelRef* Arena::CreateMaybeMessage< ::grpc::channelz::v1::ChannelRef >(Arena* arena) {
  return Arena::CreateInternal< ::grpc::channelz::v1::ChannelRef >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::grpc::channelz::v1::SubchannelRef* Arena::CreateMaybeMessage< ::grpc::channelz::v1::SubchannelRef >(Arena* arena) {
  return Arena::CreateInternal< ::grpc::channelz::v1::SubchannelRef >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::grpc::channelz::v1::SocketRef* Arena::CreateMaybeMessage< ::grpc::channelz::v1::SocketRef >(Arena* arena) {
  return Arena::CreateInternal< ::grpc::channelz::v1::SocketRef >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::grpc::channelz::v1::ServerRef* Arena::CreateMaybeMessage< ::grpc::channelz::v1::ServerRef >(Arena* arena) {
  return Arena::CreateInternal< ::grpc::channelz::v1::ServerRef >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::grpc::channelz::v1::Server* Arena::CreateMaybeMessage< ::grpc::channelz::v1::Server >(Arena* arena) {
  return Arena::CreateInternal< ::grpc::channelz::v1::Server >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::grpc::channelz::v1::ServerData* Arena::CreateMaybeMessage< ::grpc::channelz::v1::ServerData >(Arena* arena) {
  return Arena::CreateInternal< ::grpc::channelz::v1::ServerData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::grpc::channelz::v1::Socket* Arena::CreateMaybeMessage< ::grpc::channelz::v1::Socket >(Arena* arena) {
  return Arena::CreateInternal< ::grpc::channelz::v1::Socket >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::grpc::channelz::v1::SocketData* Arena::CreateMaybeMessage< ::grpc::channelz::v1::SocketData >(Arena* arena) {
  return Arena::CreateInternal< ::grpc::channelz::v1::SocketData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::grpc::channelz::v1::Address_TcpIpAddress* Arena::CreateMaybeMessage< ::grpc::channelz::v1::Address_TcpIpAddress >(Arena* arena) {
  return Arena::CreateInternal< ::grpc::channelz::v1::Address_TcpIpAddress >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::grpc::channelz::v1::Address_UdsAddress* Arena::CreateMaybeMessage< ::grpc::channelz::v1::Address_UdsAddress >(Arena* arena) {
  return Arena::CreateInternal< ::grpc::channelz::v1::Address_UdsAddress >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::grpc::channelz::v1::Address_OtherAddress* Arena::CreateMaybeMessage< ::grpc::channelz::v1::Address_OtherAddress >(Arena* arena) {
  return Arena::CreateInternal< ::grpc::channelz::v1::Address_OtherAddress >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::grpc::channelz::v1::Address* Arena::CreateMaybeMessage< ::grpc::channelz::v1::Address >(Arena* arena) {
  return Arena::CreateInternal< ::grpc::channelz::v1::Address >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::grpc::channelz::v1::Security_Tls* Arena::CreateMaybeMessage< ::grpc::channelz::v1::Security_Tls >(Arena* arena) {
  return Arena::CreateInternal< ::grpc::channelz::v1::Security_Tls >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::grpc::channelz::v1::Security_OtherSecurity* Arena::CreateMaybeMessage< ::grpc::channelz::v1::Security_OtherSecurity >(Arena* arena) {
  return Arena::CreateInternal< ::grpc::channelz::v1::Security_OtherSecurity >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::grpc::channelz::v1::Security* Arena::CreateMaybeMessage< ::grpc::channelz::v1::Security >(Arena* arena) {
  return Arena::CreateInternal< ::grpc::channelz::v1::Security >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::grpc::channelz::v1::SocketOption* Arena::CreateMaybeMessage< ::grpc::channelz::v1::SocketOption >(Arena* arena) {
  return Arena::CreateInternal< ::grpc::channelz::v1::SocketOption >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::grpc::channelz::v1::SocketOptionTimeout* Arena::CreateMaybeMessage< ::grpc::channelz::v1::SocketOptionTimeout >(Arena* arena) {
  return Arena::CreateInternal< ::grpc::channelz::v1::SocketOptionTimeout >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::grpc::channelz::v1::SocketOptionLinger* Arena::CreateMaybeMessage< ::grpc::channelz::v1::SocketOptionLinger >(Arena* arena) {
  return Arena::CreateInternal< ::grpc::channelz::v1::SocketOptionLinger >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::grpc::channelz::v1::SocketOptionTcpInfo* Arena::CreateMaybeMessage< ::grpc::channelz::v1::SocketOptionTcpInfo >(Arena* arena) {
  return Arena::CreateInternal< ::grpc::channelz::v1::SocketOptionTcpInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::grpc::channelz::v1::GetTopChannelsRequest* Arena::CreateMaybeMessage< ::grpc::channelz::v1::GetTopChannelsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::grpc::channelz::v1::GetTopChannelsRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::grpc::channelz::v1::GetTopChannelsResponse* Arena::CreateMaybeMessage< ::grpc::channelz::v1::GetTopChannelsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::grpc::channelz::v1::GetTopChannelsResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::grpc::channelz::v1::GetServersRequest* Arena::CreateMaybeMessage< ::grpc::channelz::v1::GetServersRequest >(Arena* arena) {
  return Arena::CreateInternal< ::grpc::channelz::v1::GetServersRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::grpc::channelz::v1::GetServersResponse* Arena::CreateMaybeMessage< ::grpc::channelz::v1::GetServersResponse >(Arena* arena) {
  return Arena::CreateInternal< ::grpc::channelz::v1::GetServersResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::grpc::channelz::v1::GetServerSocketsRequest* Arena::CreateMaybeMessage< ::grpc::channelz::v1::GetServerSocketsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::grpc::channelz::v1::GetServerSocketsRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::grpc::channelz::v1::GetServerSocketsResponse* Arena::CreateMaybeMessage< ::grpc::channelz::v1::GetServerSocketsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::grpc::channelz::v1::GetServerSocketsResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::grpc::channelz::v1::GetChannelRequest* Arena::CreateMaybeMessage< ::grpc::channelz::v1::GetChannelRequest >(Arena* arena) {
  return Arena::CreateInternal< ::grpc::channelz::v1::GetChannelRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::grpc::channelz::v1::GetChannelResponse* Arena::CreateMaybeMessage< ::grpc::channelz::v1::GetChannelResponse >(Arena* arena) {
  return Arena::CreateInternal< ::grpc::channelz::v1::GetChannelResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::grpc::channelz::v1::GetSubchannelRequest* Arena::CreateMaybeMessage< ::grpc::channelz::v1::GetSubchannelRequest >(Arena* arena) {
  return Arena::CreateInternal< ::grpc::channelz::v1::GetSubchannelRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::grpc::channelz::v1::GetSubchannelResponse* Arena::CreateMaybeMessage< ::grpc::channelz::v1::GetSubchannelResponse >(Arena* arena) {
  return Arena::CreateInternal< ::grpc::channelz::v1::GetSubchannelResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::grpc::channelz::v1::GetSocketRequest* Arena::CreateMaybeMessage< ::grpc::channelz::v1::GetSocketRequest >(Arena* arena) {
  return Arena::CreateInternal< ::grpc::channelz::v1::GetSocketRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::grpc::channelz::v1::GetSocketResponse* Arena::CreateMaybeMessage< ::grpc::channelz::v1::GetSocketResponse >(Arena* arena) {
  return Arena::CreateInternal< ::grpc::channelz::v1::GetSocketResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
