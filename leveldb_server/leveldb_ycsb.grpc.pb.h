// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: leveldb_ycsb.proto
#ifndef GRPC_leveldb_5fycsb_2eproto__INCLUDED
#define GRPC_leveldb_5fycsb_2eproto__INCLUDED

#include "leveldb_ycsb.pb.h"

#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace ycsbleveldb {

class LevelDB final {
 public:
  static constexpr char const* service_full_name() {
    return "ycsbleveldb.LevelDB";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Read(::grpc::ClientContext* context, const ::ycsbleveldb::ReadM& request, ::ycsbleveldb::ReadResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ycsbleveldb::ReadResult>> AsyncRead(::grpc::ClientContext* context, const ::ycsbleveldb::ReadM& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ycsbleveldb::ReadResult>>(AsyncReadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ycsbleveldb::ReadResult>> PrepareAsyncRead(::grpc::ClientContext* context, const ::ycsbleveldb::ReadM& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ycsbleveldb::ReadResult>>(PrepareAsyncReadRaw(context, request, cq));
    }
    virtual ::grpc::Status Scan(::grpc::ClientContext* context, const ::ycsbleveldb::ScanM& request, ::ycsbleveldb::Result* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ycsbleveldb::Result>> AsyncScan(::grpc::ClientContext* context, const ::ycsbleveldb::ScanM& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ycsbleveldb::Result>>(AsyncScanRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ycsbleveldb::Result>> PrepareAsyncScan(::grpc::ClientContext* context, const ::ycsbleveldb::ScanM& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ycsbleveldb::Result>>(PrepareAsyncScanRaw(context, request, cq));
    }
    virtual ::grpc::Status Update(::grpc::ClientContext* context, const ::ycsbleveldb::UpdateM& request, ::ycsbleveldb::Result* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ycsbleveldb::Result>> AsyncUpdate(::grpc::ClientContext* context, const ::ycsbleveldb::UpdateM& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ycsbleveldb::Result>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ycsbleveldb::Result>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::ycsbleveldb::UpdateM& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ycsbleveldb::Result>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    virtual ::grpc::Status Insert(::grpc::ClientContext* context, const ::ycsbleveldb::InsertM& request, ::ycsbleveldb::Result* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ycsbleveldb::Result>> AsyncInsert(::grpc::ClientContext* context, const ::ycsbleveldb::InsertM& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ycsbleveldb::Result>>(AsyncInsertRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ycsbleveldb::Result>> PrepareAsyncInsert(::grpc::ClientContext* context, const ::ycsbleveldb::InsertM& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ycsbleveldb::Result>>(PrepareAsyncInsertRaw(context, request, cq));
    }
    virtual ::grpc::Status Ldelete(::grpc::ClientContext* context, const ::ycsbleveldb::DeleteM& request, ::ycsbleveldb::Result* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ycsbleveldb::Result>> AsyncLdelete(::grpc::ClientContext* context, const ::ycsbleveldb::DeleteM& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ycsbleveldb::Result>>(AsyncLdeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ycsbleveldb::Result>> PrepareAsyncLdelete(::grpc::ClientContext* context, const ::ycsbleveldb::DeleteM& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ycsbleveldb::Result>>(PrepareAsyncLdeleteRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ycsbleveldb::ReadResult>* AsyncReadRaw(::grpc::ClientContext* context, const ::ycsbleveldb::ReadM& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ycsbleveldb::ReadResult>* PrepareAsyncReadRaw(::grpc::ClientContext* context, const ::ycsbleveldb::ReadM& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ycsbleveldb::Result>* AsyncScanRaw(::grpc::ClientContext* context, const ::ycsbleveldb::ScanM& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ycsbleveldb::Result>* PrepareAsyncScanRaw(::grpc::ClientContext* context, const ::ycsbleveldb::ScanM& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ycsbleveldb::Result>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::ycsbleveldb::UpdateM& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ycsbleveldb::Result>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::ycsbleveldb::UpdateM& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ycsbleveldb::Result>* AsyncInsertRaw(::grpc::ClientContext* context, const ::ycsbleveldb::InsertM& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ycsbleveldb::Result>* PrepareAsyncInsertRaw(::grpc::ClientContext* context, const ::ycsbleveldb::InsertM& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ycsbleveldb::Result>* AsyncLdeleteRaw(::grpc::ClientContext* context, const ::ycsbleveldb::DeleteM& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ycsbleveldb::Result>* PrepareAsyncLdeleteRaw(::grpc::ClientContext* context, const ::ycsbleveldb::DeleteM& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Read(::grpc::ClientContext* context, const ::ycsbleveldb::ReadM& request, ::ycsbleveldb::ReadResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ycsbleveldb::ReadResult>> AsyncRead(::grpc::ClientContext* context, const ::ycsbleveldb::ReadM& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ycsbleveldb::ReadResult>>(AsyncReadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ycsbleveldb::ReadResult>> PrepareAsyncRead(::grpc::ClientContext* context, const ::ycsbleveldb::ReadM& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ycsbleveldb::ReadResult>>(PrepareAsyncReadRaw(context, request, cq));
    }
    ::grpc::Status Scan(::grpc::ClientContext* context, const ::ycsbleveldb::ScanM& request, ::ycsbleveldb::Result* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ycsbleveldb::Result>> AsyncScan(::grpc::ClientContext* context, const ::ycsbleveldb::ScanM& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ycsbleveldb::Result>>(AsyncScanRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ycsbleveldb::Result>> PrepareAsyncScan(::grpc::ClientContext* context, const ::ycsbleveldb::ScanM& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ycsbleveldb::Result>>(PrepareAsyncScanRaw(context, request, cq));
    }
    ::grpc::Status Update(::grpc::ClientContext* context, const ::ycsbleveldb::UpdateM& request, ::ycsbleveldb::Result* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ycsbleveldb::Result>> AsyncUpdate(::grpc::ClientContext* context, const ::ycsbleveldb::UpdateM& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ycsbleveldb::Result>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ycsbleveldb::Result>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::ycsbleveldb::UpdateM& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ycsbleveldb::Result>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    ::grpc::Status Insert(::grpc::ClientContext* context, const ::ycsbleveldb::InsertM& request, ::ycsbleveldb::Result* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ycsbleveldb::Result>> AsyncInsert(::grpc::ClientContext* context, const ::ycsbleveldb::InsertM& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ycsbleveldb::Result>>(AsyncInsertRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ycsbleveldb::Result>> PrepareAsyncInsert(::grpc::ClientContext* context, const ::ycsbleveldb::InsertM& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ycsbleveldb::Result>>(PrepareAsyncInsertRaw(context, request, cq));
    }
    ::grpc::Status Ldelete(::grpc::ClientContext* context, const ::ycsbleveldb::DeleteM& request, ::ycsbleveldb::Result* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ycsbleveldb::Result>> AsyncLdelete(::grpc::ClientContext* context, const ::ycsbleveldb::DeleteM& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ycsbleveldb::Result>>(AsyncLdeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ycsbleveldb::Result>> PrepareAsyncLdelete(::grpc::ClientContext* context, const ::ycsbleveldb::DeleteM& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ycsbleveldb::Result>>(PrepareAsyncLdeleteRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::ycsbleveldb::ReadResult>* AsyncReadRaw(::grpc::ClientContext* context, const ::ycsbleveldb::ReadM& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ycsbleveldb::ReadResult>* PrepareAsyncReadRaw(::grpc::ClientContext* context, const ::ycsbleveldb::ReadM& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ycsbleveldb::Result>* AsyncScanRaw(::grpc::ClientContext* context, const ::ycsbleveldb::ScanM& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ycsbleveldb::Result>* PrepareAsyncScanRaw(::grpc::ClientContext* context, const ::ycsbleveldb::ScanM& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ycsbleveldb::Result>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::ycsbleveldb::UpdateM& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ycsbleveldb::Result>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::ycsbleveldb::UpdateM& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ycsbleveldb::Result>* AsyncInsertRaw(::grpc::ClientContext* context, const ::ycsbleveldb::InsertM& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ycsbleveldb::Result>* PrepareAsyncInsertRaw(::grpc::ClientContext* context, const ::ycsbleveldb::InsertM& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ycsbleveldb::Result>* AsyncLdeleteRaw(::grpc::ClientContext* context, const ::ycsbleveldb::DeleteM& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ycsbleveldb::Result>* PrepareAsyncLdeleteRaw(::grpc::ClientContext* context, const ::ycsbleveldb::DeleteM& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Read_;
    const ::grpc::internal::RpcMethod rpcmethod_Scan_;
    const ::grpc::internal::RpcMethod rpcmethod_Update_;
    const ::grpc::internal::RpcMethod rpcmethod_Insert_;
    const ::grpc::internal::RpcMethod rpcmethod_Ldelete_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Read(::grpc::ServerContext* context, const ::ycsbleveldb::ReadM* request, ::ycsbleveldb::ReadResult* response);
    virtual ::grpc::Status Scan(::grpc::ServerContext* context, const ::ycsbleveldb::ScanM* request, ::ycsbleveldb::Result* response);
    virtual ::grpc::Status Update(::grpc::ServerContext* context, const ::ycsbleveldb::UpdateM* request, ::ycsbleveldb::Result* response);
    virtual ::grpc::Status Insert(::grpc::ServerContext* context, const ::ycsbleveldb::InsertM* request, ::ycsbleveldb::Result* response);
    virtual ::grpc::Status Ldelete(::grpc::ServerContext* context, const ::ycsbleveldb::DeleteM* request, ::ycsbleveldb::Result* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Read() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* context, const ::ycsbleveldb::ReadM* request, ::ycsbleveldb::ReadResult* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRead(::grpc::ServerContext* context, ::ycsbleveldb::ReadM* request, ::grpc::ServerAsyncResponseWriter< ::ycsbleveldb::ReadResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Scan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Scan() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Scan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Scan(::grpc::ServerContext* context, const ::ycsbleveldb::ScanM* request, ::ycsbleveldb::Result* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestScan(::grpc::ServerContext* context, ::ycsbleveldb::ScanM* request, ::grpc::ServerAsyncResponseWriter< ::ycsbleveldb::Result>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Update() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::ycsbleveldb::UpdateM* request, ::ycsbleveldb::Result* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::ycsbleveldb::UpdateM* request, ::grpc::ServerAsyncResponseWriter< ::ycsbleveldb::Result>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Insert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Insert() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Insert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Insert(::grpc::ServerContext* context, const ::ycsbleveldb::InsertM* request, ::ycsbleveldb::Result* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInsert(::grpc::ServerContext* context, ::ycsbleveldb::InsertM* request, ::grpc::ServerAsyncResponseWriter< ::ycsbleveldb::Result>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Ldelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Ldelete() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Ldelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ldelete(::grpc::ServerContext* context, const ::ycsbleveldb::DeleteM* request, ::ycsbleveldb::Result* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLdelete(::grpc::ServerContext* context, ::ycsbleveldb::DeleteM* request, ::grpc::ServerAsyncResponseWriter< ::ycsbleveldb::Result>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Read<WithAsyncMethod_Scan<WithAsyncMethod_Update<WithAsyncMethod_Insert<WithAsyncMethod_Ldelete<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Read() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* context, const ::ycsbleveldb::ReadM* request, ::ycsbleveldb::ReadResult* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Scan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Scan() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Scan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Scan(::grpc::ServerContext* context, const ::ycsbleveldb::ScanM* request, ::ycsbleveldb::Result* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Update() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::ycsbleveldb::UpdateM* request, ::ycsbleveldb::Result* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Insert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Insert() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Insert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Insert(::grpc::ServerContext* context, const ::ycsbleveldb::InsertM* request, ::ycsbleveldb::Result* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Ldelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Ldelete() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Ldelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ldelete(::grpc::ServerContext* context, const ::ycsbleveldb::DeleteM* request, ::ycsbleveldb::Result* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Read() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* context, const ::ycsbleveldb::ReadM* request, ::ycsbleveldb::ReadResult* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRead(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Scan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Scan() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Scan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Scan(::grpc::ServerContext* context, const ::ycsbleveldb::ScanM* request, ::ycsbleveldb::Result* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestScan(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Update() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::ycsbleveldb::UpdateM* request, ::ycsbleveldb::Result* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Insert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Insert() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Insert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Insert(::grpc::ServerContext* context, const ::ycsbleveldb::InsertM* request, ::ycsbleveldb::Result* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInsert(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Ldelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Ldelete() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Ldelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ldelete(::grpc::ServerContext* context, const ::ycsbleveldb::DeleteM* request, ::ycsbleveldb::Result* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLdelete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Read() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::ycsbleveldb::ReadM, ::ycsbleveldb::ReadResult>(std::bind(&WithStreamedUnaryMethod_Read<BaseClass>::StreamedRead, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Read(::grpc::ServerContext* context, const ::ycsbleveldb::ReadM* request, ::ycsbleveldb::ReadResult* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRead(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ycsbleveldb::ReadM,::ycsbleveldb::ReadResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Scan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Scan() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::ycsbleveldb::ScanM, ::ycsbleveldb::Result>(std::bind(&WithStreamedUnaryMethod_Scan<BaseClass>::StreamedScan, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Scan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Scan(::grpc::ServerContext* context, const ::ycsbleveldb::ScanM* request, ::ycsbleveldb::Result* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedScan(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ycsbleveldb::ScanM,::ycsbleveldb::Result>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Update() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::ycsbleveldb::UpdateM, ::ycsbleveldb::Result>(std::bind(&WithStreamedUnaryMethod_Update<BaseClass>::StreamedUpdate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::ycsbleveldb::UpdateM* request, ::ycsbleveldb::Result* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ycsbleveldb::UpdateM,::ycsbleveldb::Result>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Insert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Insert() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::ycsbleveldb::InsertM, ::ycsbleveldb::Result>(std::bind(&WithStreamedUnaryMethod_Insert<BaseClass>::StreamedInsert, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Insert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Insert(::grpc::ServerContext* context, const ::ycsbleveldb::InsertM* request, ::ycsbleveldb::Result* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInsert(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ycsbleveldb::InsertM,::ycsbleveldb::Result>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Ldelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Ldelete() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::ycsbleveldb::DeleteM, ::ycsbleveldb::Result>(std::bind(&WithStreamedUnaryMethod_Ldelete<BaseClass>::StreamedLdelete, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Ldelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Ldelete(::grpc::ServerContext* context, const ::ycsbleveldb::DeleteM* request, ::ycsbleveldb::Result* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLdelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ycsbleveldb::DeleteM,::ycsbleveldb::Result>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Read<WithStreamedUnaryMethod_Scan<WithStreamedUnaryMethod_Update<WithStreamedUnaryMethod_Insert<WithStreamedUnaryMethod_Ldelete<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Read<WithStreamedUnaryMethod_Scan<WithStreamedUnaryMethod_Update<WithStreamedUnaryMethod_Insert<WithStreamedUnaryMethod_Ldelete<Service > > > > > StreamedService;
};

}  // namespace ycsbleveldb


#endif  // GRPC_leveldb_5fycsb_2eproto__INCLUDED
