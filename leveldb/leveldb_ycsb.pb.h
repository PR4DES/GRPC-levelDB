// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: leveldb_ycsb.proto

#ifndef PROTOBUF_leveldb_5fycsb_2eproto__INCLUDED
#define PROTOBUF_leveldb_5fycsb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_leveldb_5fycsb_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsReadMImpl();
void InitDefaultsReadM();
void InitDefaultsScanMImpl();
void InitDefaultsScanM();
void InitDefaultsUpdateMImpl();
void InitDefaultsUpdateM();
void InitDefaultsInsertMImpl();
void InitDefaultsInsertM();
void InitDefaultsDeleteMImpl();
void InitDefaultsDeleteM();
void InitDefaultsResultImpl();
void InitDefaultsResult();
inline void InitDefaults() {
  InitDefaultsReadM();
  InitDefaultsScanM();
  InitDefaultsUpdateM();
  InitDefaultsInsertM();
  InitDefaultsDeleteM();
  InitDefaultsResult();
}
}  // namespace protobuf_leveldb_5fycsb_2eproto
namespace ycsbleveldb {
class DeleteM;
class DeleteMDefaultTypeInternal;
extern DeleteMDefaultTypeInternal _DeleteM_default_instance_;
class InsertM;
class InsertMDefaultTypeInternal;
extern InsertMDefaultTypeInternal _InsertM_default_instance_;
class ReadM;
class ReadMDefaultTypeInternal;
extern ReadMDefaultTypeInternal _ReadM_default_instance_;
class Result;
class ResultDefaultTypeInternal;
extern ResultDefaultTypeInternal _Result_default_instance_;
class ScanM;
class ScanMDefaultTypeInternal;
extern ScanMDefaultTypeInternal _ScanM_default_instance_;
class UpdateM;
class UpdateMDefaultTypeInternal;
extern UpdateMDefaultTypeInternal _UpdateM_default_instance_;
}  // namespace ycsbleveldb
namespace ycsbleveldb {

// ===================================================================

class ReadM : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ycsbleveldb.ReadM) */ {
 public:
  ReadM();
  virtual ~ReadM();

  ReadM(const ReadM& from);

  inline ReadM& operator=(const ReadM& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReadM(ReadM&& from) noexcept
    : ReadM() {
    *this = ::std::move(from);
  }

  inline ReadM& operator=(ReadM&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadM& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadM* internal_default_instance() {
    return reinterpret_cast<const ReadM*>(
               &_ReadM_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ReadM* other);
  friend void swap(ReadM& a, ReadM& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReadM* New() const PROTOBUF_FINAL { return New(NULL); }

  ReadM* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReadM& from);
  void MergeFrom(const ReadM& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReadM* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string table = 1;
  void clear_table();
  static const int kTableFieldNumber = 1;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // string key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string field = 3;
  void clear_field();
  static const int kFieldFieldNumber = 3;
  const ::std::string& field() const;
  void set_field(const ::std::string& value);
  #if LANG_CXX11
  void set_field(::std::string&& value);
  #endif
  void set_field(const char* value);
  void set_field(const char* value, size_t size);
  ::std::string* mutable_field();
  ::std::string* release_field();
  void set_allocated_field(::std::string* field);

  // @@protoc_insertion_point(class_scope:ycsbleveldb.ReadM)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr field_;
  mutable int _cached_size_;
  friend struct ::protobuf_leveldb_5fycsb_2eproto::TableStruct;
  friend void ::protobuf_leveldb_5fycsb_2eproto::InitDefaultsReadMImpl();
};
// -------------------------------------------------------------------

class ScanM : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ycsbleveldb.ScanM) */ {
 public:
  ScanM();
  virtual ~ScanM();

  ScanM(const ScanM& from);

  inline ScanM& operator=(const ScanM& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScanM(ScanM&& from) noexcept
    : ScanM() {
    *this = ::std::move(from);
  }

  inline ScanM& operator=(ScanM&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScanM& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScanM* internal_default_instance() {
    return reinterpret_cast<const ScanM*>(
               &_ScanM_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ScanM* other);
  friend void swap(ScanM& a, ScanM& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScanM* New() const PROTOBUF_FINAL { return New(NULL); }

  ScanM* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ScanM& from);
  void MergeFrom(const ScanM& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ScanM* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string table = 1;
  void clear_table();
  static const int kTableFieldNumber = 1;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // string startkey = 2;
  void clear_startkey();
  static const int kStartkeyFieldNumber = 2;
  const ::std::string& startkey() const;
  void set_startkey(const ::std::string& value);
  #if LANG_CXX11
  void set_startkey(::std::string&& value);
  #endif
  void set_startkey(const char* value);
  void set_startkey(const char* value, size_t size);
  ::std::string* mutable_startkey();
  ::std::string* release_startkey();
  void set_allocated_startkey(::std::string* startkey);

  // string field = 4;
  void clear_field();
  static const int kFieldFieldNumber = 4;
  const ::std::string& field() const;
  void set_field(const ::std::string& value);
  #if LANG_CXX11
  void set_field(::std::string&& value);
  #endif
  void set_field(const char* value);
  void set_field(const char* value, size_t size);
  ::std::string* mutable_field();
  ::std::string* release_field();
  void set_allocated_field(::std::string* field);

  // int32 recordcount = 3;
  void clear_recordcount();
  static const int kRecordcountFieldNumber = 3;
  ::google::protobuf::int32 recordcount() const;
  void set_recordcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ycsbleveldb.ScanM)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::google::protobuf::internal::ArenaStringPtr startkey_;
  ::google::protobuf::internal::ArenaStringPtr field_;
  ::google::protobuf::int32 recordcount_;
  mutable int _cached_size_;
  friend struct ::protobuf_leveldb_5fycsb_2eproto::TableStruct;
  friend void ::protobuf_leveldb_5fycsb_2eproto::InitDefaultsScanMImpl();
};
// -------------------------------------------------------------------

class UpdateM : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ycsbleveldb.UpdateM) */ {
 public:
  UpdateM();
  virtual ~UpdateM();

  UpdateM(const UpdateM& from);

  inline UpdateM& operator=(const UpdateM& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateM(UpdateM&& from) noexcept
    : UpdateM() {
    *this = ::std::move(from);
  }

  inline UpdateM& operator=(UpdateM&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateM& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateM* internal_default_instance() {
    return reinterpret_cast<const UpdateM*>(
               &_UpdateM_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(UpdateM* other);
  friend void swap(UpdateM& a, UpdateM& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateM* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateM* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateM& from);
  void MergeFrom(const UpdateM& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateM* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string table = 1;
  void clear_table();
  static const int kTableFieldNumber = 1;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // string key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string values = 3;
  void clear_values();
  static const int kValuesFieldNumber = 3;
  const ::std::string& values() const;
  void set_values(const ::std::string& value);
  #if LANG_CXX11
  void set_values(::std::string&& value);
  #endif
  void set_values(const char* value);
  void set_values(const char* value, size_t size);
  ::std::string* mutable_values();
  ::std::string* release_values();
  void set_allocated_values(::std::string* values);

  // @@protoc_insertion_point(class_scope:ycsbleveldb.UpdateM)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr values_;
  mutable int _cached_size_;
  friend struct ::protobuf_leveldb_5fycsb_2eproto::TableStruct;
  friend void ::protobuf_leveldb_5fycsb_2eproto::InitDefaultsUpdateMImpl();
};
// -------------------------------------------------------------------

class InsertM : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ycsbleveldb.InsertM) */ {
 public:
  InsertM();
  virtual ~InsertM();

  InsertM(const InsertM& from);

  inline InsertM& operator=(const InsertM& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InsertM(InsertM&& from) noexcept
    : InsertM() {
    *this = ::std::move(from);
  }

  inline InsertM& operator=(InsertM&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InsertM& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InsertM* internal_default_instance() {
    return reinterpret_cast<const InsertM*>(
               &_InsertM_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(InsertM* other);
  friend void swap(InsertM& a, InsertM& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InsertM* New() const PROTOBUF_FINAL { return New(NULL); }

  InsertM* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InsertM& from);
  void MergeFrom(const InsertM& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InsertM* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string table = 1;
  void clear_table();
  static const int kTableFieldNumber = 1;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // string key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string values = 3;
  void clear_values();
  static const int kValuesFieldNumber = 3;
  const ::std::string& values() const;
  void set_values(const ::std::string& value);
  #if LANG_CXX11
  void set_values(::std::string&& value);
  #endif
  void set_values(const char* value);
  void set_values(const char* value, size_t size);
  ::std::string* mutable_values();
  ::std::string* release_values();
  void set_allocated_values(::std::string* values);

  // @@protoc_insertion_point(class_scope:ycsbleveldb.InsertM)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr values_;
  mutable int _cached_size_;
  friend struct ::protobuf_leveldb_5fycsb_2eproto::TableStruct;
  friend void ::protobuf_leveldb_5fycsb_2eproto::InitDefaultsInsertMImpl();
};
// -------------------------------------------------------------------

class DeleteM : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ycsbleveldb.DeleteM) */ {
 public:
  DeleteM();
  virtual ~DeleteM();

  DeleteM(const DeleteM& from);

  inline DeleteM& operator=(const DeleteM& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteM(DeleteM&& from) noexcept
    : DeleteM() {
    *this = ::std::move(from);
  }

  inline DeleteM& operator=(DeleteM&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteM& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteM* internal_default_instance() {
    return reinterpret_cast<const DeleteM*>(
               &_DeleteM_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(DeleteM* other);
  friend void swap(DeleteM& a, DeleteM& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteM* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteM* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteM& from);
  void MergeFrom(const DeleteM& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteM* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string table = 1;
  void clear_table();
  static const int kTableFieldNumber = 1;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // string key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:ycsbleveldb.DeleteM)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  mutable int _cached_size_;
  friend struct ::protobuf_leveldb_5fycsb_2eproto::TableStruct;
  friend void ::protobuf_leveldb_5fycsb_2eproto::InitDefaultsDeleteMImpl();
};
// -------------------------------------------------------------------

class Result : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ycsbleveldb.Result) */ {
 public:
  Result();
  virtual ~Result();

  Result(const Result& from);

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Result(Result&& from) noexcept
    : Result() {
    *this = ::std::move(from);
  }

  inline Result& operator=(Result&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Result& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Result* internal_default_instance() {
    return reinterpret_cast<const Result*>(
               &_Result_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Result* other);
  friend void swap(Result& a, Result& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Result* New() const PROTOBUF_FINAL { return New(NULL); }

  Result* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Result* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ycsbleveldb.Result)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 result_;
  mutable int _cached_size_;
  friend struct ::protobuf_leveldb_5fycsb_2eproto::TableStruct;
  friend void ::protobuf_leveldb_5fycsb_2eproto::InitDefaultsResultImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReadM

// string table = 1;
inline void ReadM::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadM::table() const {
  // @@protoc_insertion_point(field_get:ycsbleveldb.ReadM.table)
  return table_.GetNoArena();
}
inline void ReadM::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ycsbleveldb.ReadM.table)
}
#if LANG_CXX11
inline void ReadM::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ycsbleveldb.ReadM.table)
}
#endif
inline void ReadM::set_table(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ycsbleveldb.ReadM.table)
}
inline void ReadM::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ycsbleveldb.ReadM.table)
}
inline ::std::string* ReadM::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:ycsbleveldb.ReadM.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadM::release_table() {
  // @@protoc_insertion_point(field_release:ycsbleveldb.ReadM.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadM::set_allocated_table(::std::string* table) {
  if (table != NULL) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:ycsbleveldb.ReadM.table)
}

// string key = 2;
inline void ReadM::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadM::key() const {
  // @@protoc_insertion_point(field_get:ycsbleveldb.ReadM.key)
  return key_.GetNoArena();
}
inline void ReadM::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ycsbleveldb.ReadM.key)
}
#if LANG_CXX11
inline void ReadM::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ycsbleveldb.ReadM.key)
}
#endif
inline void ReadM::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ycsbleveldb.ReadM.key)
}
inline void ReadM::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ycsbleveldb.ReadM.key)
}
inline ::std::string* ReadM::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:ycsbleveldb.ReadM.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadM::release_key() {
  // @@protoc_insertion_point(field_release:ycsbleveldb.ReadM.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadM::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:ycsbleveldb.ReadM.key)
}

// string field = 3;
inline void ReadM::clear_field() {
  field_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadM::field() const {
  // @@protoc_insertion_point(field_get:ycsbleveldb.ReadM.field)
  return field_.GetNoArena();
}
inline void ReadM::set_field(const ::std::string& value) {
  
  field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ycsbleveldb.ReadM.field)
}
#if LANG_CXX11
inline void ReadM::set_field(::std::string&& value) {
  
  field_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ycsbleveldb.ReadM.field)
}
#endif
inline void ReadM::set_field(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ycsbleveldb.ReadM.field)
}
inline void ReadM::set_field(const char* value, size_t size) {
  
  field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ycsbleveldb.ReadM.field)
}
inline ::std::string* ReadM::mutable_field() {
  
  // @@protoc_insertion_point(field_mutable:ycsbleveldb.ReadM.field)
  return field_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadM::release_field() {
  // @@protoc_insertion_point(field_release:ycsbleveldb.ReadM.field)
  
  return field_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadM::set_allocated_field(::std::string* field) {
  if (field != NULL) {
    
  } else {
    
  }
  field_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field);
  // @@protoc_insertion_point(field_set_allocated:ycsbleveldb.ReadM.field)
}

// -------------------------------------------------------------------

// ScanM

// string table = 1;
inline void ScanM::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ScanM::table() const {
  // @@protoc_insertion_point(field_get:ycsbleveldb.ScanM.table)
  return table_.GetNoArena();
}
inline void ScanM::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ycsbleveldb.ScanM.table)
}
#if LANG_CXX11
inline void ScanM::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ycsbleveldb.ScanM.table)
}
#endif
inline void ScanM::set_table(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ycsbleveldb.ScanM.table)
}
inline void ScanM::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ycsbleveldb.ScanM.table)
}
inline ::std::string* ScanM::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:ycsbleveldb.ScanM.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScanM::release_table() {
  // @@protoc_insertion_point(field_release:ycsbleveldb.ScanM.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScanM::set_allocated_table(::std::string* table) {
  if (table != NULL) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:ycsbleveldb.ScanM.table)
}

// string startkey = 2;
inline void ScanM::clear_startkey() {
  startkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ScanM::startkey() const {
  // @@protoc_insertion_point(field_get:ycsbleveldb.ScanM.startkey)
  return startkey_.GetNoArena();
}
inline void ScanM::set_startkey(const ::std::string& value) {
  
  startkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ycsbleveldb.ScanM.startkey)
}
#if LANG_CXX11
inline void ScanM::set_startkey(::std::string&& value) {
  
  startkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ycsbleveldb.ScanM.startkey)
}
#endif
inline void ScanM::set_startkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  startkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ycsbleveldb.ScanM.startkey)
}
inline void ScanM::set_startkey(const char* value, size_t size) {
  
  startkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ycsbleveldb.ScanM.startkey)
}
inline ::std::string* ScanM::mutable_startkey() {
  
  // @@protoc_insertion_point(field_mutable:ycsbleveldb.ScanM.startkey)
  return startkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScanM::release_startkey() {
  // @@protoc_insertion_point(field_release:ycsbleveldb.ScanM.startkey)
  
  return startkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScanM::set_allocated_startkey(::std::string* startkey) {
  if (startkey != NULL) {
    
  } else {
    
  }
  startkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), startkey);
  // @@protoc_insertion_point(field_set_allocated:ycsbleveldb.ScanM.startkey)
}

// int32 recordcount = 3;
inline void ScanM::clear_recordcount() {
  recordcount_ = 0;
}
inline ::google::protobuf::int32 ScanM::recordcount() const {
  // @@protoc_insertion_point(field_get:ycsbleveldb.ScanM.recordcount)
  return recordcount_;
}
inline void ScanM::set_recordcount(::google::protobuf::int32 value) {
  
  recordcount_ = value;
  // @@protoc_insertion_point(field_set:ycsbleveldb.ScanM.recordcount)
}

// string field = 4;
inline void ScanM::clear_field() {
  field_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ScanM::field() const {
  // @@protoc_insertion_point(field_get:ycsbleveldb.ScanM.field)
  return field_.GetNoArena();
}
inline void ScanM::set_field(const ::std::string& value) {
  
  field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ycsbleveldb.ScanM.field)
}
#if LANG_CXX11
inline void ScanM::set_field(::std::string&& value) {
  
  field_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ycsbleveldb.ScanM.field)
}
#endif
inline void ScanM::set_field(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ycsbleveldb.ScanM.field)
}
inline void ScanM::set_field(const char* value, size_t size) {
  
  field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ycsbleveldb.ScanM.field)
}
inline ::std::string* ScanM::mutable_field() {
  
  // @@protoc_insertion_point(field_mutable:ycsbleveldb.ScanM.field)
  return field_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScanM::release_field() {
  // @@protoc_insertion_point(field_release:ycsbleveldb.ScanM.field)
  
  return field_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScanM::set_allocated_field(::std::string* field) {
  if (field != NULL) {
    
  } else {
    
  }
  field_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field);
  // @@protoc_insertion_point(field_set_allocated:ycsbleveldb.ScanM.field)
}

// -------------------------------------------------------------------

// UpdateM

// string table = 1;
inline void UpdateM::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateM::table() const {
  // @@protoc_insertion_point(field_get:ycsbleveldb.UpdateM.table)
  return table_.GetNoArena();
}
inline void UpdateM::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ycsbleveldb.UpdateM.table)
}
#if LANG_CXX11
inline void UpdateM::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ycsbleveldb.UpdateM.table)
}
#endif
inline void UpdateM::set_table(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ycsbleveldb.UpdateM.table)
}
inline void UpdateM::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ycsbleveldb.UpdateM.table)
}
inline ::std::string* UpdateM::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:ycsbleveldb.UpdateM.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateM::release_table() {
  // @@protoc_insertion_point(field_release:ycsbleveldb.UpdateM.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateM::set_allocated_table(::std::string* table) {
  if (table != NULL) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:ycsbleveldb.UpdateM.table)
}

// string key = 2;
inline void UpdateM::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateM::key() const {
  // @@protoc_insertion_point(field_get:ycsbleveldb.UpdateM.key)
  return key_.GetNoArena();
}
inline void UpdateM::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ycsbleveldb.UpdateM.key)
}
#if LANG_CXX11
inline void UpdateM::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ycsbleveldb.UpdateM.key)
}
#endif
inline void UpdateM::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ycsbleveldb.UpdateM.key)
}
inline void UpdateM::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ycsbleveldb.UpdateM.key)
}
inline ::std::string* UpdateM::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:ycsbleveldb.UpdateM.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateM::release_key() {
  // @@protoc_insertion_point(field_release:ycsbleveldb.UpdateM.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateM::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:ycsbleveldb.UpdateM.key)
}

// string values = 3;
inline void UpdateM::clear_values() {
  values_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateM::values() const {
  // @@protoc_insertion_point(field_get:ycsbleveldb.UpdateM.values)
  return values_.GetNoArena();
}
inline void UpdateM::set_values(const ::std::string& value) {
  
  values_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ycsbleveldb.UpdateM.values)
}
#if LANG_CXX11
inline void UpdateM::set_values(::std::string&& value) {
  
  values_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ycsbleveldb.UpdateM.values)
}
#endif
inline void UpdateM::set_values(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  values_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ycsbleveldb.UpdateM.values)
}
inline void UpdateM::set_values(const char* value, size_t size) {
  
  values_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ycsbleveldb.UpdateM.values)
}
inline ::std::string* UpdateM::mutable_values() {
  
  // @@protoc_insertion_point(field_mutable:ycsbleveldb.UpdateM.values)
  return values_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateM::release_values() {
  // @@protoc_insertion_point(field_release:ycsbleveldb.UpdateM.values)
  
  return values_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateM::set_allocated_values(::std::string* values) {
  if (values != NULL) {
    
  } else {
    
  }
  values_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), values);
  // @@protoc_insertion_point(field_set_allocated:ycsbleveldb.UpdateM.values)
}

// -------------------------------------------------------------------

// InsertM

// string table = 1;
inline void InsertM::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InsertM::table() const {
  // @@protoc_insertion_point(field_get:ycsbleveldb.InsertM.table)
  return table_.GetNoArena();
}
inline void InsertM::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ycsbleveldb.InsertM.table)
}
#if LANG_CXX11
inline void InsertM::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ycsbleveldb.InsertM.table)
}
#endif
inline void InsertM::set_table(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ycsbleveldb.InsertM.table)
}
inline void InsertM::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ycsbleveldb.InsertM.table)
}
inline ::std::string* InsertM::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:ycsbleveldb.InsertM.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InsertM::release_table() {
  // @@protoc_insertion_point(field_release:ycsbleveldb.InsertM.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InsertM::set_allocated_table(::std::string* table) {
  if (table != NULL) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:ycsbleveldb.InsertM.table)
}

// string key = 2;
inline void InsertM::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InsertM::key() const {
  // @@protoc_insertion_point(field_get:ycsbleveldb.InsertM.key)
  return key_.GetNoArena();
}
inline void InsertM::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ycsbleveldb.InsertM.key)
}
#if LANG_CXX11
inline void InsertM::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ycsbleveldb.InsertM.key)
}
#endif
inline void InsertM::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ycsbleveldb.InsertM.key)
}
inline void InsertM::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ycsbleveldb.InsertM.key)
}
inline ::std::string* InsertM::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:ycsbleveldb.InsertM.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InsertM::release_key() {
  // @@protoc_insertion_point(field_release:ycsbleveldb.InsertM.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InsertM::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:ycsbleveldb.InsertM.key)
}

// string values = 3;
inline void InsertM::clear_values() {
  values_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InsertM::values() const {
  // @@protoc_insertion_point(field_get:ycsbleveldb.InsertM.values)
  return values_.GetNoArena();
}
inline void InsertM::set_values(const ::std::string& value) {
  
  values_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ycsbleveldb.InsertM.values)
}
#if LANG_CXX11
inline void InsertM::set_values(::std::string&& value) {
  
  values_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ycsbleveldb.InsertM.values)
}
#endif
inline void InsertM::set_values(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  values_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ycsbleveldb.InsertM.values)
}
inline void InsertM::set_values(const char* value, size_t size) {
  
  values_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ycsbleveldb.InsertM.values)
}
inline ::std::string* InsertM::mutable_values() {
  
  // @@protoc_insertion_point(field_mutable:ycsbleveldb.InsertM.values)
  return values_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InsertM::release_values() {
  // @@protoc_insertion_point(field_release:ycsbleveldb.InsertM.values)
  
  return values_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InsertM::set_allocated_values(::std::string* values) {
  if (values != NULL) {
    
  } else {
    
  }
  values_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), values);
  // @@protoc_insertion_point(field_set_allocated:ycsbleveldb.InsertM.values)
}

// -------------------------------------------------------------------

// DeleteM

// string table = 1;
inline void DeleteM::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteM::table() const {
  // @@protoc_insertion_point(field_get:ycsbleveldb.DeleteM.table)
  return table_.GetNoArena();
}
inline void DeleteM::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ycsbleveldb.DeleteM.table)
}
#if LANG_CXX11
inline void DeleteM::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ycsbleveldb.DeleteM.table)
}
#endif
inline void DeleteM::set_table(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ycsbleveldb.DeleteM.table)
}
inline void DeleteM::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ycsbleveldb.DeleteM.table)
}
inline ::std::string* DeleteM::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:ycsbleveldb.DeleteM.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteM::release_table() {
  // @@protoc_insertion_point(field_release:ycsbleveldb.DeleteM.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteM::set_allocated_table(::std::string* table) {
  if (table != NULL) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:ycsbleveldb.DeleteM.table)
}

// string key = 2;
inline void DeleteM::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteM::key() const {
  // @@protoc_insertion_point(field_get:ycsbleveldb.DeleteM.key)
  return key_.GetNoArena();
}
inline void DeleteM::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ycsbleveldb.DeleteM.key)
}
#if LANG_CXX11
inline void DeleteM::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ycsbleveldb.DeleteM.key)
}
#endif
inline void DeleteM::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ycsbleveldb.DeleteM.key)
}
inline void DeleteM::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ycsbleveldb.DeleteM.key)
}
inline ::std::string* DeleteM::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:ycsbleveldb.DeleteM.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteM::release_key() {
  // @@protoc_insertion_point(field_release:ycsbleveldb.DeleteM.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteM::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:ycsbleveldb.DeleteM.key)
}

// -------------------------------------------------------------------

// Result

// int32 result = 1;
inline void Result::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 Result::result() const {
  // @@protoc_insertion_point(field_get:ycsbleveldb.Result.result)
  return result_;
}
inline void Result::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:ycsbleveldb.Result.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ycsbleveldb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_leveldb_5fycsb_2eproto__INCLUDED
